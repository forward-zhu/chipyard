// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FarPath_1(
  input          io_in_a_sign,
  input  [10:0]  io_in_a_exp,
  input  [105:0] io_in_a_sig,
                 io_in_b_sig,
  input  [10:0]  io_in_expDiff,
  input          io_in_effSub,
  output         io_out_result_sign,
  output [105:0] io_out_sig_a,
  output [109:0] io_out_sig_b,
  output [10:0]  io_out_exp_a_vec_0,
                 io_out_exp_a_vec_1,
                 io_out_exp_a_vec_2
);

  wire [107:0] _shiftRightJam_io_out;	// @[ShiftRightJam.scala:28:31]
  wire         _shiftRightJam_io_sticky;	// @[ShiftRightJam.scala:28:31]
  ShiftRightJam_1 shiftRightJam (	// @[ShiftRightJam.scala:28:31]
    .io_in     ({io_in_b_sig, 2'h0}),	// @[Cat.scala:33:92]
    .io_shamt  (io_in_expDiff),
    .io_out    (_shiftRightJam_io_out),
    .io_sticky (_shiftRightJam_io_sticky)
  );
  assign io_out_result_sign = io_in_a_sign;
  assign io_out_sig_a = io_in_a_sig;
  assign io_out_sig_b = (io_in_effSub ? {1'h1, ~_shiftRightJam_io_out, ~_shiftRightJam_io_sticky} : {1'h0, _shiftRightJam_io_out, _shiftRightJam_io_sticky}) + {109'h0, io_in_effSub};	// @[Cat.scala:33:92, FADD.scala:36:{27,37,88}, ShiftRightJam.scala:28:31]
  assign io_out_exp_a_vec_0 = io_in_a_exp + 11'h1;	// @[FADD.scala:46:28]
  assign io_out_exp_a_vec_1 = io_in_a_exp;
  assign io_out_exp_a_vec_2 = io_in_a_exp - 11'h1;	// @[FADD.scala:47:29]
endmodule

