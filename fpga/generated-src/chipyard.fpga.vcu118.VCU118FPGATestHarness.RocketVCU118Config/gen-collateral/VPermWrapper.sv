// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VPermWrapper(
  input          clock,
                 reset,
  input  [5:0]   io_in_uop_ctrl_funct6,
  input  [2:0]   io_in_uop_ctrl_funct3,
  input          io_in_uop_ctrl_vm,
  input  [4:0]   io_in_uop_ctrl_vs1_imm,
  input          io_in_uop_info_ma,
                 io_in_uop_info_ta,
  input  [2:0]   io_in_uop_info_vsew,
                 io_in_uop_info_vlmul,
  input  [7:0]   io_in_uop_info_vl,
  input  [6:0]   io_in_uop_info_vstart,
  input  [63:0]  io_in_rs1,
  input  [7:0]   io_in_vs1_preg_idx_0,
                 io_in_vs1_preg_idx_1,
                 io_in_vs1_preg_idx_2,
                 io_in_vs1_preg_idx_3,
                 io_in_vs1_preg_idx_4,
                 io_in_vs1_preg_idx_5,
                 io_in_vs1_preg_idx_6,
                 io_in_vs1_preg_idx_7,
                 io_in_vs2_preg_idx_0,
                 io_in_vs2_preg_idx_1,
                 io_in_vs2_preg_idx_2,
                 io_in_vs2_preg_idx_3,
                 io_in_vs2_preg_idx_4,
                 io_in_vs2_preg_idx_5,
                 io_in_vs2_preg_idx_6,
                 io_in_vs2_preg_idx_7,
                 io_in_old_vd_preg_idx_0,
                 io_in_old_vd_preg_idx_1,
                 io_in_old_vd_preg_idx_2,
                 io_in_old_vd_preg_idx_3,
                 io_in_old_vd_preg_idx_4,
                 io_in_old_vd_preg_idx_5,
                 io_in_old_vd_preg_idx_6,
                 io_in_old_vd_preg_idx_7,
  input          io_in_uop_valid,
  input  [127:0] io_in_rdata,
  input          io_in_rvalid,
  output [2:0]   io_out_uop_info_vlmul,
  output         io_out_rd_en,
  output [7:0]   io_out_rd_preg_idx,
  output         io_out_wb_vld,
  output [127:0] io_out_wb_data
);

  Permutation vPerm (	// @[VPermWrapper.scala:22:21]
    .clock                   (clock),
    .reset                   (reset),
    .io_in_uop_ctrl_funct6   (io_in_uop_ctrl_funct6),
    .io_in_uop_ctrl_funct3   (io_in_uop_ctrl_funct3),
    .io_in_uop_ctrl_vm       (io_in_uop_ctrl_vm),
    .io_in_uop_ctrl_vs1_imm  (io_in_uop_ctrl_vs1_imm),
    .io_in_uop_info_ma       (io_in_uop_info_ma),
    .io_in_uop_info_ta       (io_in_uop_info_ta),
    .io_in_uop_info_vsew     (io_in_uop_info_vsew),
    .io_in_uop_info_vlmul    (io_in_uop_info_vlmul),
    .io_in_uop_info_vl       (io_in_uop_info_vl),
    .io_in_uop_info_vstart   (io_in_uop_info_vstart),
    .io_in_rs1               (io_in_rs1),
    .io_in_vs1_preg_idx_0    (io_in_vs1_preg_idx_0),
    .io_in_vs1_preg_idx_1    (io_in_vs1_preg_idx_1),
    .io_in_vs1_preg_idx_2    (io_in_vs1_preg_idx_2),
    .io_in_vs1_preg_idx_3    (io_in_vs1_preg_idx_3),
    .io_in_vs1_preg_idx_4    (io_in_vs1_preg_idx_4),
    .io_in_vs1_preg_idx_5    (io_in_vs1_preg_idx_5),
    .io_in_vs1_preg_idx_6    (io_in_vs1_preg_idx_6),
    .io_in_vs1_preg_idx_7    (io_in_vs1_preg_idx_7),
    .io_in_vs2_preg_idx_0    (io_in_vs2_preg_idx_0),
    .io_in_vs2_preg_idx_1    (io_in_vs2_preg_idx_1),
    .io_in_vs2_preg_idx_2    (io_in_vs2_preg_idx_2),
    .io_in_vs2_preg_idx_3    (io_in_vs2_preg_idx_3),
    .io_in_vs2_preg_idx_4    (io_in_vs2_preg_idx_4),
    .io_in_vs2_preg_idx_5    (io_in_vs2_preg_idx_5),
    .io_in_vs2_preg_idx_6    (io_in_vs2_preg_idx_6),
    .io_in_vs2_preg_idx_7    (io_in_vs2_preg_idx_7),
    .io_in_old_vd_preg_idx_0 (io_in_old_vd_preg_idx_0),
    .io_in_old_vd_preg_idx_1 (io_in_old_vd_preg_idx_1),
    .io_in_old_vd_preg_idx_2 (io_in_old_vd_preg_idx_2),
    .io_in_old_vd_preg_idx_3 (io_in_old_vd_preg_idx_3),
    .io_in_old_vd_preg_idx_4 (io_in_old_vd_preg_idx_4),
    .io_in_old_vd_preg_idx_5 (io_in_old_vd_preg_idx_5),
    .io_in_old_vd_preg_idx_6 (io_in_old_vd_preg_idx_6),
    .io_in_old_vd_preg_idx_7 (io_in_old_vd_preg_idx_7),
    .io_in_uop_valid         (io_in_uop_valid),
    .io_in_rdata             (io_in_rdata),
    .io_in_rvalid            (io_in_rvalid),
    .io_out_uop_info_vlmul   (io_out_uop_info_vlmul),
    .io_out_rd_en            (io_out_rd_en),
    .io_out_rd_preg_idx      (io_out_rd_preg_idx),
    .io_out_wb_vld           (io_out_wb_vld),
    .io_out_wb_data          (io_out_wb_data)
  );
endmodule

