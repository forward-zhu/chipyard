// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VSFPUWrapper(
  input          clock,
                 reset,
                 io_in_valid,
  input  [5:0]   io_in_bits_uop_ctrl_funct6,
  input  [2:0]   io_in_bits_uop_ctrl_funct3,
  input          io_in_bits_uop_ctrl_vm,
  input  [4:0]   io_in_bits_uop_ctrl_vs1_imm,
  input          io_in_bits_uop_ctrl_widen,
                 io_in_bits_uop_ctrl_widen2,
                 io_in_bits_uop_ctrl_narrow,
                 io_in_bits_uop_ctrl_narrow_to_1,
                 io_in_bits_uop_info_ma,
                 io_in_bits_uop_info_ta,
  input  [2:0]   io_in_bits_uop_info_vsew,
                 io_in_bits_uop_info_vlmul,
  input  [7:0]   io_in_bits_uop_info_vl,
  input  [6:0]   io_in_bits_uop_info_vstart,
  input  [1:0]   io_in_bits_uop_info_vxrm,
  input  [2:0]   io_in_bits_uop_info_frm,
                 io_in_bits_uop_uopIdx,
  input          io_in_bits_uop_uopEnd,
  input  [127:0] io_in_bits_vs1,
                 io_in_bits_vs2,
  input  [63:0]  io_in_bits_rs1,
  input  [127:0] io_in_bits_oldVd,
                 io_in_bits_mask,
  output         io_in_ready,
                 io_out_valid,
  output [127:0] io_out_bits_vd,
  output [4:0]   io_out_bits_fflags
);

  wire         _vFPu_io_in_ready;	// @[VSFPUWrapper.scala:19:20]
  reg  [5:0]   fpuReq_uop_ctrl_funct6;	// @[VSFPUWrapper.scala:21:26]
  reg  [2:0]   fpuReq_uop_ctrl_funct3;	// @[VSFPUWrapper.scala:21:26]
  reg          fpuReq_uop_ctrl_vm;	// @[VSFPUWrapper.scala:21:26]
  reg  [4:0]   fpuReq_uop_ctrl_vs1_imm;	// @[VSFPUWrapper.scala:21:26]
  reg          fpuReq_uop_ctrl_widen;	// @[VSFPUWrapper.scala:21:26]
  reg          fpuReq_uop_ctrl_widen2;	// @[VSFPUWrapper.scala:21:26]
  reg          fpuReq_uop_ctrl_narrow;	// @[VSFPUWrapper.scala:21:26]
  reg          fpuReq_uop_ctrl_narrow_to_1;	// @[VSFPUWrapper.scala:21:26]
  reg          fpuReq_uop_info_ma;	// @[VSFPUWrapper.scala:21:26]
  reg          fpuReq_uop_info_ta;	// @[VSFPUWrapper.scala:21:26]
  reg  [2:0]   fpuReq_uop_info_vsew;	// @[VSFPUWrapper.scala:21:26]
  reg  [2:0]   fpuReq_uop_info_vlmul;	// @[VSFPUWrapper.scala:21:26]
  reg  [7:0]   fpuReq_uop_info_vl;	// @[VSFPUWrapper.scala:21:26]
  reg  [6:0]   fpuReq_uop_info_vstart;	// @[VSFPUWrapper.scala:21:26]
  reg  [1:0]   fpuReq_uop_info_vxrm;	// @[VSFPUWrapper.scala:21:26]
  reg  [2:0]   fpuReq_uop_info_frm;	// @[VSFPUWrapper.scala:21:26]
  reg  [2:0]   fpuReq_uop_uopIdx;	// @[VSFPUWrapper.scala:21:26]
  reg          fpuReq_uop_uopEnd;	// @[VSFPUWrapper.scala:21:26]
  reg  [127:0] fpuReq_vs1;	// @[VSFPUWrapper.scala:21:26]
  reg  [127:0] fpuReq_vs2;	// @[VSFPUWrapper.scala:21:26]
  reg  [63:0]  fpuReq_rs1;	// @[VSFPUWrapper.scala:21:26]
  reg  [127:0] fpuReq_oldVd;	// @[VSFPUWrapper.scala:21:26]
  reg  [127:0] fpuReq_mask;	// @[VSFPUWrapper.scala:21:26]
  reg          fpuReqValidReg;	// @[VSFPUWrapper.scala:22:31]
  always @(posedge clock) begin
    if (reset) begin
      fpuReq_uop_ctrl_funct6 <= 6'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_uop_ctrl_funct3 <= 3'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_uop_ctrl_vm <= 1'h0;	// @[VSFPUWrapper.scala:21:26]
      fpuReq_uop_ctrl_vs1_imm <= 5'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_uop_ctrl_widen <= 1'h0;	// @[VSFPUWrapper.scala:21:26]
      fpuReq_uop_ctrl_widen2 <= 1'h0;	// @[VSFPUWrapper.scala:21:26]
      fpuReq_uop_ctrl_narrow <= 1'h0;	// @[VSFPUWrapper.scala:21:26]
      fpuReq_uop_ctrl_narrow_to_1 <= 1'h0;	// @[VSFPUWrapper.scala:21:26]
      fpuReq_uop_info_ma <= 1'h0;	// @[VSFPUWrapper.scala:21:26]
      fpuReq_uop_info_ta <= 1'h0;	// @[VSFPUWrapper.scala:21:26]
      fpuReq_uop_info_vsew <= 3'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_uop_info_vlmul <= 3'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_uop_info_vl <= 8'h0;	// @[VSFPUWrapper.scala:21:26]
      fpuReq_uop_info_vstart <= 7'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_uop_info_vxrm <= 2'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_uop_info_frm <= 3'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_uop_uopIdx <= 3'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_uop_uopEnd <= 1'h0;	// @[VSFPUWrapper.scala:21:26]
      fpuReq_vs1 <= 128'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_vs2 <= 128'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_rs1 <= 64'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_oldVd <= 128'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReq_mask <= 128'h0;	// @[VSFPUWrapper.scala:21:{26,39}]
      fpuReqValidReg <= 1'h0;	// @[VSFPUWrapper.scala:22:31]
    end
    else begin
      if (io_in_valid) begin
        fpuReq_uop_ctrl_funct6 <= io_in_bits_uop_ctrl_funct6;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_funct3 <= io_in_bits_uop_ctrl_funct3;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_vm <= io_in_bits_uop_ctrl_vm;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_vs1_imm <= io_in_bits_uop_ctrl_vs1_imm;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_widen <= io_in_bits_uop_ctrl_widen;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_widen2 <= io_in_bits_uop_ctrl_widen2;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_narrow <= io_in_bits_uop_ctrl_narrow;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_narrow_to_1 <= io_in_bits_uop_ctrl_narrow_to_1;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_ma <= io_in_bits_uop_info_ma;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_ta <= io_in_bits_uop_info_ta;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_vsew <= io_in_bits_uop_info_vsew;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_vlmul <= io_in_bits_uop_info_vlmul;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_vl <= io_in_bits_uop_info_vl;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_vstart <= io_in_bits_uop_info_vstart;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_vxrm <= io_in_bits_uop_info_vxrm;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_frm <= io_in_bits_uop_info_frm;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_uopIdx <= io_in_bits_uop_uopIdx;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_uopEnd <= io_in_bits_uop_uopEnd;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_vs1 <= io_in_bits_vs1;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_vs2 <= io_in_bits_vs2;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_rs1 <= io_in_bits_rs1;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_oldVd <= io_in_bits_oldVd;	// @[VSFPUWrapper.scala:21:26]
        fpuReq_mask <= io_in_bits_mask;	// @[VSFPUWrapper.scala:21:26]
      end
      fpuReqValidReg <= io_in_valid | ~(_vFPu_io_in_ready & fpuReqValidReg) & fpuReqValidReg;	// @[VSFPUWrapper.scala:19:20, :22:31, :24:20, :25:20, :27:{31,50}, :28:20]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        fpuReq_uop_ctrl_funct6 = _RANDOM_0[5:0];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_funct3 = _RANDOM_0[8:6];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_vm = _RANDOM_0[9];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_vs1_imm = _RANDOM_0[14:10];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_widen = _RANDOM_0[15];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_widen2 = _RANDOM_0[16];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_narrow = _RANDOM_0[17];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_ctrl_narrow_to_1 = _RANDOM_0[18];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_ma = _RANDOM_0[19];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_ta = _RANDOM_0[20];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_vsew = _RANDOM_0[23:21];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_vlmul = _RANDOM_0[26:24];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_vl = {_RANDOM_0[31:27], _RANDOM_1[2:0]};	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_vstart = _RANDOM_1[9:3];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_vxrm = _RANDOM_1[11:10];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_info_frm = _RANDOM_1[14:12];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_uopIdx = _RANDOM_1[17:15];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_uop_uopEnd = _RANDOM_1[18];	// @[VSFPUWrapper.scala:21:26]
        fpuReq_vs1 = {_RANDOM_1[31:28], _RANDOM_2, _RANDOM_3, _RANDOM_4, _RANDOM_5[27:0]};	// @[VSFPUWrapper.scala:21:26]
        fpuReq_vs2 = {_RANDOM_5[31:28], _RANDOM_6, _RANDOM_7, _RANDOM_8, _RANDOM_9[27:0]};	// @[VSFPUWrapper.scala:21:26]
        fpuReq_rs1 = {_RANDOM_9[31:28], _RANDOM_10, _RANDOM_11[27:0]};	// @[VSFPUWrapper.scala:21:26]
        fpuReq_oldVd = {_RANDOM_11[31:28], _RANDOM_12, _RANDOM_13, _RANDOM_14, _RANDOM_15[27:0]};	// @[VSFPUWrapper.scala:21:26]
        fpuReq_mask = {_RANDOM_15[31:28], _RANDOM_16, _RANDOM_17, _RANDOM_18, _RANDOM_19[27:0]};	// @[VSFPUWrapper.scala:21:26]
        fpuReqValidReg = _RANDOM_19[28];	// @[VSFPUWrapper.scala:21:26, :22:31]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  VFPUWrapper vFPu (	// @[VSFPUWrapper.scala:19:20]
    .clock                              (clock),
    .reset                              (reset),
    .io_in_valid                        (fpuReqValidReg),	// @[VSFPUWrapper.scala:22:31]
    .io_in_bits_uop_ctrl_funct6         (fpuReq_uop_ctrl_funct6),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_ctrl_funct3         (fpuReq_uop_ctrl_funct3),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_ctrl_vm             (fpuReq_uop_ctrl_vm),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_ctrl_vs1_imm        (fpuReq_uop_ctrl_vs1_imm),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_ctrl_widen          (fpuReq_uop_ctrl_widen),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_ctrl_widen2         (fpuReq_uop_ctrl_widen2),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_ctrl_narrow         (fpuReq_uop_ctrl_narrow),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_ctrl_narrow_to_1    (fpuReq_uop_ctrl_narrow_to_1),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_info_ma             (fpuReq_uop_info_ma),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_info_ta             (fpuReq_uop_info_ta),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_info_vsew           (fpuReq_uop_info_vsew),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_info_vlmul          (fpuReq_uop_info_vlmul),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_info_vl             (fpuReq_uop_info_vl),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_info_vstart         (fpuReq_uop_info_vstart),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_info_vxrm           (fpuReq_uop_info_vxrm),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_info_frm            (fpuReq_uop_info_frm),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_uopIdx              (fpuReq_uop_uopIdx),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_uopEnd              (fpuReq_uop_uopEnd),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_uop_sysUop_robIdx_flag  (1'h0),
    .io_in_bits_uop_sysUop_robIdx_value (8'h0),
    .io_in_bits_vs1                     (fpuReq_vs1),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_vs2                     (fpuReq_vs2),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_rs1                     (fpuReq_rs1),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_oldVd                   (fpuReq_oldVd),	// @[VSFPUWrapper.scala:21:26]
    .io_in_bits_mask                    (fpuReq_mask),	// @[VSFPUWrapper.scala:21:26]
    .io_in_ready                        (_vFPu_io_in_ready),
    .io_out_valid                       (io_out_valid),
    .io_out_bits_vd                     (io_out_bits_vd),
    .io_out_bits_fflags                 (io_out_bits_fflags)
  );
  assign io_in_ready = _vFPu_io_in_ready;	// @[VSFPUWrapper.scala:19:20]
endmodule

