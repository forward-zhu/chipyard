// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module MaskTailData(
  input  [7:0]  io_mask,
                io_tail,
                io_prestart,
  input         io_vstart_gte_vl,
  input  [63:0] io_oldVd,
  input         io_uop_ctrl_vm,
  input  [5:0]  io_uop_ctrl_funct6,
  input         io_uop_ctrl_narrow_to_1,
                io_uop_info_ma,
                io_uop_info_ta,
  output [63:0] io_maskKeep,
                io_maskOff,
  output [7:0]  io_maskKeep_cmp,
                io_maskOff_cmp
);

  wire       vmerge = io_uop_ctrl_funct6 == 6'h17;	// @[VFuUtils.scala:177:32]
  wire [1:0] maskTail_0 = io_prestart[0] | io_vstart_gte_vl ? 2'h2 : io_tail[0] ? {1'h1, io_uop_info_ta | io_uop_ctrl_narrow_to_1} : vmerge | io_mask[0] | io_uop_ctrl_vm ? 2'h0 : {1'h1, io_uop_info_ma};	// @[VFuUtils.scala:177:32, :179:{21,25,46}, :180:19, :181:{20,25}, :182:{19,25,38}, :183:40, :184:19, :185:{21,42}, :186:25, :203:28]
  wire [1:0] maskTail_1 = io_prestart[1] | io_vstart_gte_vl ? 2'h2 : io_tail[1] ? {1'h1, io_uop_info_ta | io_uop_ctrl_narrow_to_1} : vmerge | io_mask[1] | io_uop_ctrl_vm ? 2'h0 : {1'h1, io_uop_info_ma};	// @[VFuUtils.scala:177:32, :179:{21,25,46}, :180:19, :181:{20,25}, :182:{19,25,38}, :183:40, :184:19, :185:{21,42}, :186:25, :203:28]
  wire [1:0] maskTail_2 = io_prestart[2] | io_vstart_gte_vl ? 2'h2 : io_tail[2] ? {1'h1, io_uop_info_ta | io_uop_ctrl_narrow_to_1} : vmerge | io_mask[2] | io_uop_ctrl_vm ? 2'h0 : {1'h1, io_uop_info_ma};	// @[VFuUtils.scala:177:32, :179:{21,25,46}, :180:19, :181:{20,25}, :182:{19,25,38}, :183:40, :184:19, :185:{21,42}, :186:25, :203:28]
  wire [1:0] maskTail_3 = io_prestart[3] | io_vstart_gte_vl ? 2'h2 : io_tail[3] ? {1'h1, io_uop_info_ta | io_uop_ctrl_narrow_to_1} : vmerge | io_mask[3] | io_uop_ctrl_vm ? 2'h0 : {1'h1, io_uop_info_ma};	// @[VFuUtils.scala:177:32, :179:{21,25,46}, :180:19, :181:{20,25}, :182:{19,25,38}, :183:40, :184:19, :185:{21,42}, :186:25, :203:28]
  wire [1:0] maskTail_4 = io_prestart[4] | io_vstart_gte_vl ? 2'h2 : io_tail[4] ? {1'h1, io_uop_info_ta | io_uop_ctrl_narrow_to_1} : vmerge | io_mask[4] | io_uop_ctrl_vm ? 2'h0 : {1'h1, io_uop_info_ma};	// @[VFuUtils.scala:177:32, :179:{21,25,46}, :180:19, :181:{20,25}, :182:{19,25,38}, :183:40, :184:19, :185:{21,42}, :186:25, :203:28]
  wire [1:0] maskTail_5 = io_prestart[5] | io_vstart_gte_vl ? 2'h2 : io_tail[5] ? {1'h1, io_uop_info_ta | io_uop_ctrl_narrow_to_1} : vmerge | io_mask[5] | io_uop_ctrl_vm ? 2'h0 : {1'h1, io_uop_info_ma};	// @[VFuUtils.scala:177:32, :179:{21,25,46}, :180:19, :181:{20,25}, :182:{19,25,38}, :183:40, :184:19, :185:{21,42}, :186:25, :203:28]
  wire [1:0] maskTail_6 = io_prestart[6] | io_vstart_gte_vl ? 2'h2 : io_tail[6] ? {1'h1, io_uop_info_ta | io_uop_ctrl_narrow_to_1} : vmerge | io_mask[6] | io_uop_ctrl_vm ? 2'h0 : {1'h1, io_uop_info_ma};	// @[VFuUtils.scala:177:32, :179:{21,25,46}, :180:19, :181:{20,25}, :182:{19,25,38}, :183:40, :184:19, :185:{21,42}, :186:25, :203:28]
  wire [1:0] maskTail_7 = io_prestart[7] | io_vstart_gte_vl ? 2'h2 : io_tail[7] ? {1'h1, io_uop_info_ta | io_uop_ctrl_narrow_to_1} : vmerge | io_mask[7] | io_uop_ctrl_vm ? 2'h0 : {1'h1, io_uop_info_ma};	// @[VFuUtils.scala:177:32, :179:{21,25,46}, :180:19, :181:{20,25}, :182:{19,25,38}, :183:40, :184:19, :185:{21,42}, :186:25, :203:28]
  assign io_maskKeep = {maskTail_7[1] ? 8'h0 : 8'hFF, maskTail_6[1] ? 8'h0 : 8'hFF, maskTail_5[1] ? 8'h0 : 8'hFF, maskTail_4[1] ? 8'h0 : 8'hFF, maskTail_3[1] ? 8'h0 : 8'hFF, maskTail_2[1] ? 8'h0 : 8'hFF, maskTail_1[1] ? 8'h0 : 8'hFF, maskTail_0[1] ? 8'h0 : 8'hFF};	// @[Cat.scala:33:92, VFuUtils.scala:179:46, :180:19, :181:25, :194:{43,45,60}]
  assign io_maskOff = {maskTail_7[1] ? (maskTail_7[0] ? 8'hFF : io_oldVd[63:56]) : 8'h0, maskTail_6[1] ? (maskTail_6[0] ? 8'hFF : io_oldVd[55:48]) : 8'h0, maskTail_5[1] ? (maskTail_5[0] ? 8'hFF : io_oldVd[47:40]) : 8'h0, maskTail_4[1] ? (maskTail_4[0] ? 8'hFF : io_oldVd[39:32]) : 8'h0, maskTail_3[1] ? (maskTail_3[0] ? 8'hFF : io_oldVd[31:24]) : 8'h0, maskTail_2[1] ? (maskTail_2[0] ? 8'hFF : io_oldVd[23:16]) : 8'h0, maskTail_1[1] ? (maskTail_1[0] ? 8'hFF : io_oldVd[15:8]) : 8'h0, maskTail_0[1] ? (maskTail_0[0] ? 8'hFF : io_oldVd[7:0]) : 8'h0};	// @[Cat.scala:33:92, VFuUtils.scala:26:36, :179:46, :180:19, :181:25, :194:{45,60}, :196:{8,29,31}]
  assign io_maskKeep_cmp = {~(maskTail_7[1]), ~(maskTail_6[1]), ~(maskTail_5[1]), ~(maskTail_4[1]), ~(maskTail_3[1]), ~(maskTail_2[1]), ~(maskTail_1[1]), ~(maskTail_0[1])};	// @[Cat.scala:33:92, VFuUtils.scala:179:46, :180:19, :181:25, :194:45, :201:44]
  assign io_maskOff_cmp = {maskTail_7[1] & (maskTail_7[0] | io_oldVd[7]), maskTail_6[1] & (maskTail_6[0] | io_oldVd[6]), maskTail_5[1] & (maskTail_5[0] | io_oldVd[5]), maskTail_4[1] & (maskTail_4[0] | io_oldVd[4]), maskTail_3[1] & (maskTail_3[0] | io_oldVd[3]), maskTail_2[1] & (maskTail_2[0] | io_oldVd[2]), maskTail_1[1] & (maskTail_1[0] | io_oldVd[1]), maskTail_0[1] & (maskTail_0[0] | io_oldVd[0])};	// @[Cat.scala:33:92, VFuUtils.scala:179:46, :180:19, :181:25, :194:45, :196:31, :203:{8,28,48}]
endmodule

