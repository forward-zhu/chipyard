// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FPUpConverter(
  input  [31:0] io_in,
  output [63:0] io_result,
  output [4:0]  io_fflags
);

  wire [4:0]  _subnormal_shamt_clz_io_out;	// @[CLZ.scala:23:21]
  wire        decode_in_expIsZero = io_in[30:23] == 8'h0;	// @[package.scala:36:31, :64:18]
  wire        decode_in_isNaN = (&(io_in[30:23])) & (|(io_in[22:0]));	// @[package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire [53:0] _subnormal_sig_T = {31'h0, io_in[22:0]} << _subnormal_shamt_clz_io_out;	// @[CLZ.scala:23:21, FPToFP.scala:219:20, package.scala:65:18]
  wire        _GEN = (&(io_in[30:23])) | decode_in_expIsZero;	// @[Mux.scala:27:73, package.scala:36:31, :37:31, :64:18]
  CLZ_12 subnormal_shamt_clz (	// @[CLZ.scala:23:21]
    .io_in  (io_in[22:0]),	// @[package.scala:65:18]
    .io_out (_subnormal_shamt_clz_io_out)
  );
  assign io_result = {~decode_in_isNaN & io_in[31], {11{&(io_in[30:23])}} | (decode_in_expIsZero & (|(io_in[22:0])) ? 11'h380 - {6'h0, _subnormal_shamt_clz_io_out} : 11'h0) | (_GEN ? 11'h0 : {3'h0, io_in[30:23]} + 11'h380), ((&(io_in[30:23])) ? {|(io_in[22:0]), 51'h0} : 52'h0) | (decode_in_expIsZero ? {_subnormal_sig_T[21:0], 30'h0} : 52'h0) | (_GEN ? 52'h0 : {io_in[22:0], 29'h0})};	// @[CLZ.scala:23:21, Cat.scala:33:92, FPToFP.scala:215:47, :219:{20,39}, :220:50, :223:{5,22}, :232:9, Mux.scala:27:73, package.scala:36:31, :37:31, :38:31, :45:46, :48:40, :63:19, :64:18, :65:18]
  assign io_fflags = {decode_in_isNaN & ~(io_in[22]), 4'h0};	// @[Cat.scala:33:92, package.scala:48:40, :49:{37,40,49}]
endmodule

