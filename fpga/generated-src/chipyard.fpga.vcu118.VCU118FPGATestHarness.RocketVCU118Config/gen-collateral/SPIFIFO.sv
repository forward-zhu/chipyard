// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SPIFIFO(
  input        clock,
               reset,
  input  [1:0] io_ctrl_fmt_proto,
  input        io_ctrl_fmt_endian,
               io_ctrl_fmt_iodir,
  input  [3:0] io_ctrl_fmt_len,
  input  [1:0] io_ctrl_cs_mode,
  input  [3:0] io_ctrl_wm_tx,
               io_ctrl_wm_rx,
  input        io_link_tx_ready,
               io_link_rx_valid,
  input  [7:0] io_link_rx_bits,
  input        io_tx_valid,
  input  [7:0] io_tx_bits,
  input        io_rx_ready,
  output       io_link_tx_valid,
  output [7:0] io_link_tx_bits,
               io_link_cnt,
  output [1:0] io_link_fmt_proto,
  output       io_link_fmt_endian,
               io_link_fmt_iodir,
               io_link_cs_set,
               io_link_cs_clear,
               io_tx_ready,
               io_rx_valid,
  output [7:0] io_rx_bits,
  output       io_ip_txwm,
               io_ip_rxwm
);

  wire       _rxq_io_enq_ready;	// @[SPIFIFO.scala:22:19]
  wire [3:0] _rxq_io_count;	// @[SPIFIFO.scala:22:19]
  wire       _txq_io_deq_valid;	// @[SPIFIFO.scala:21:19]
  wire [3:0] _txq_io_count;	// @[SPIFIFO.scala:21:19]
  wire       fire_tx = io_link_tx_ready & _txq_io_deq_valid;	// @[Decoupled.scala:51:35, SPIFIFO.scala:21:19]
  reg        rxen;	// @[SPIFIFO.scala:29:17]
  wire       _T_1 = io_ctrl_fmt_proto == 2'h1;	// @[SPIConsts.scala:12:48]
  wire       _T_2 = io_ctrl_fmt_proto == 2'h2;	// @[SPIConsts.scala:12:48]
  wire [2:0] _cnt_quot_T_4 = _T_1 ? io_ctrl_fmt_len[3:1] : 3'h0;	// @[Mux.scala:27:73, SPIConsts.scala:12:48, SPIFIFO.scala:43:73]
  reg  [1:0] cs_mode;	// @[SPIFIFO.scala:48:24]
  always @(posedge clock) begin
    if (reset) begin
      rxen <= 1'h0;	// @[SPIFIFO.scala:29:17]
      cs_mode <= 2'h0;	// @[SPIConsts.scala:12:48, SPIFIFO.scala:48:24]
    end
    else begin
      if (fire_tx)	// @[Decoupled.scala:51:35]
        rxen <= ~io_ctrl_fmt_iodir;	// @[SPIFIFO.scala:29:17, :39:32]
      else	// @[Decoupled.scala:51:35]
        rxen <= ~io_link_rx_valid & rxen;	// @[SPIFIFO.scala:29:17, :35:18, :36:10]
      cs_mode <= io_ctrl_cs_mode;	// @[SPIFIFO.scala:48:24]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        rxen = _RANDOM_0[0];	// @[SPIFIFO.scala:29:17]
        cs_mode = _RANDOM_0[2:1];	// @[SPIFIFO.scala:29:17, :48:24]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Queue_91 txq (	// @[SPIFIFO.scala:21:19]
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (io_tx_valid),
    .io_enq_bits  (io_tx_bits),
    .io_deq_ready (io_link_tx_ready),
    .io_enq_ready (io_tx_ready),
    .io_deq_valid (_txq_io_deq_valid),
    .io_deq_bits  (io_link_tx_bits),
    .io_count     (_txq_io_count)
  );
  Queue_91 rxq (	// @[SPIFIFO.scala:22:19]
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (io_link_rx_valid & rxen),	// @[SPIFIFO.scala:29:17, :31:40]
    .io_enq_bits  (io_link_rx_bits),
    .io_deq_ready (io_rx_ready),
    .io_enq_ready (_rxq_io_enq_ready),
    .io_deq_valid (io_rx_valid),
    .io_deq_bits  (io_rx_bits),
    .io_count     (_rxq_io_count)
  );
  assign io_link_tx_valid = _txq_io_deq_valid;	// @[SPIFIFO.scala:21:19]
  assign io_link_cnt = {4'h0, ((io_ctrl_fmt_proto == 2'h0 ? io_ctrl_fmt_len : 4'h0) | {1'h0, _cnt_quot_T_4[2], _cnt_quot_T_4[1:0] | (_T_2 ? io_ctrl_fmt_len[3:2] : 2'h0)}) + {3'h0, _T_1 & io_ctrl_fmt_len[0] | _T_2 & (|(io_ctrl_fmt_len[1:0]))}};	// @[Mux.scala:27:73, SPIConsts.scala:12:48, SPIFIFO.scala:29:17, :43:73, :44:{83,92}, :46:{15,27}]
  assign io_link_fmt_proto = io_ctrl_fmt_proto;
  assign io_link_fmt_endian = io_ctrl_fmt_endian;
  assign io_link_fmt_iodir = io_ctrl_fmt_iodir;
  assign io_link_cs_set = ~(&cs_mode);	// @[SPIFIFO.scala:48:24, :50:30, :54:21]
  assign io_link_cs_clear = cs_mode != io_ctrl_cs_mode | fire_tx & ~(cs_mode == 2'h2 | (&cs_mode));	// @[Decoupled.scala:51:35, SPIConsts.scala:12:48, SPIFIFO.scala:48:24, :49:31, :50:30, :51:28, :52:{18,33}, :55:{33,45}]
  assign io_ip_txwm = _txq_io_count < io_ctrl_wm_tx;	// @[SPIFIFO.scala:21:19, :60:31]
  assign io_ip_rxwm = _rxq_io_count > io_ctrl_wm_rx;	// @[SPIFIFO.scala:22:19, :61:31]
endmodule

