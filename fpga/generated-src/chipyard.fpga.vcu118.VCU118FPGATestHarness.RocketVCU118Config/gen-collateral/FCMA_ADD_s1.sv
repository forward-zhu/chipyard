// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FCMA_ADD_s1(
  input  [55:0] io_a,
                io_b,
  input         io_b_inter_valid,
                io_b_inter_flags_isNaN,
                io_b_inter_flags_isInf,
                io_b_inter_flags_isInv,
                io_b_inter_flags_overflow,
  input  [2:0]  io_rm,
  output [2:0]  io_out_rm,
  output        io_out_far_path_out_sign,
                io_out_near_path_out_sign,
  output [7:0]  io_out_near_path_out_exp,
  output        io_out_special_case_valid,
                io_out_special_case_bits_iv,
                io_out_special_case_bits_nan,
                io_out_special_case_bits_inf_sign,
                io_out_small_add,
                io_out_far_path_mul_of,
  output [47:0] io_out_far_sig_a,
  output [51:0] io_out_far_sig_b,
  output [7:0]  io_out_far_exp_a_vec_0,
                io_out_far_exp_a_vec_1,
                io_out_far_exp_a_vec_2,
  output        io_out_near_path_sig_is_zero,
                io_out_near_path_lza_error,
                io_out_near_path_int_bit,
  output [48:0] io_out_near_path_sig_raw,
  output [5:0]  io_out_near_path_lzc,
  output        io_out_sel_far_path
);

  wire        _near_path_mods_1_io_out_result_sign;	// @[FADD.scala:264:27]
  wire [7:0]  _near_path_mods_1_io_out_result_exp;	// @[FADD.scala:264:27]
  wire        _near_path_mods_1_io_out_sig_is_zero;	// @[FADD.scala:264:27]
  wire        _near_path_mods_1_io_out_a_lt_b;	// @[FADD.scala:264:27]
  wire        _near_path_mods_1_io_out_lza_error;	// @[FADD.scala:264:27]
  wire        _near_path_mods_1_io_out_int_bit;	// @[FADD.scala:264:27]
  wire [48:0] _near_path_mods_1_io_out_sig_raw;	// @[FADD.scala:264:27]
  wire [5:0]  _near_path_mods_1_io_out_lzc;	// @[FADD.scala:264:27]
  wire        _near_path_mods_0_io_out_result_sign;	// @[FADD.scala:264:27]
  wire [7:0]  _near_path_mods_0_io_out_result_exp;	// @[FADD.scala:264:27]
  wire        _near_path_mods_0_io_out_sig_is_zero;	// @[FADD.scala:264:27]
  wire        _near_path_mods_0_io_out_a_lt_b;	// @[FADD.scala:264:27]
  wire        _near_path_mods_0_io_out_lza_error;	// @[FADD.scala:264:27]
  wire        _near_path_mods_0_io_out_int_bit;	// @[FADD.scala:264:27]
  wire [48:0] _near_path_mods_0_io_out_sig_raw;	// @[FADD.scala:264:27]
  wire [5:0]  _near_path_mods_0_io_out_lzc;	// @[FADD.scala:264:27]
  wire        decode_a_isInf = (&(io_a[54:47])) & ~(|(io_a[46:0]));	// @[package.scala:37:31, :38:31, :44:27, :46:40, :64:18, :65:18]
  wire        decode_a_isNaN = (&(io_a[54:47])) & (|(io_a[46:0]));	// @[package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire        decode_b_isNaN = (&(io_b[54:47])) & (|(io_b[46:0]));	// @[package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire [7:0]  raw_a_exp = io_a[54:47] | {7'h0, ~(|(io_a[54:47]))};	// @[package.scala:36:31, :64:18, :96:{27,29}]
  wire [47:0] raw_a_sig = {|(io_a[54:47]), io_a[46:0]};	// @[Cat.scala:33:92, package.scala:36:31, :64:18, :65:18]
  wire [7:0]  raw_b_exp = io_b[54:47] | {7'h0, ~(|(io_b[54:47]))};	// @[package.scala:36:31, :64:18, :96:{27,29}]
  wire [47:0] raw_b_sig = {|(io_b[54:47]), io_b[46:0]};	// @[Cat.scala:33:92, package.scala:36:31, :64:18, :65:18]
  wire        eff_sub = io_a[55] ^ io_b[55];	// @[FADD.scala:200:28, package.scala:63:19]
  wire        b_isInf = io_b_inter_valid ? io_b_inter_flags_isInf : (&(io_b[54:47])) & ~(|(io_b[46:0]));	// @[FADD.scala:209:20, package.scala:37:31, :38:31, :44:27, :46:40, :64:18, :65:18]
  wire        special_path_hasNaN = decode_a_isNaN | (io_b_inter_valid ? io_b_inter_flags_isNaN : decode_b_isNaN);	// @[FADD.scala:207:20, :211:44, package.scala:48:40]
  wire        special_path_inf_iv = decode_a_isInf & b_isInf & eff_sub;	// @[FADD.scala:200:28, :209:20, :214:55, package.scala:46:40]
  wire [8:0]  exp_diff_a_b = {1'h0, raw_a_exp} - {1'h0, raw_b_exp};	// @[FADD.scala:219:47, package.scala:41:27, :96:27]
  wire [7:0]  _ea_minus_eb_T = raw_b_exp - raw_a_exp;	// @[FADD.scala:220:47, package.scala:96:27]
  wire        need_swap = exp_diff_a_b[8] | io_b_inter_flags_overflow;	// @[FADD.scala:219:47, :222:{36,47}]
  wire        near_path_exp_neq = raw_a_exp[1:0] != raw_b_exp[1:0];	// @[FADD.scala:257:{36,43,56}, package.scala:96:27]
  wire        _near_path_out_T_2 = need_swap | ~near_path_exp_neq & _near_path_mods_0_io_out_a_lt_b;	// @[FADD.scala:222:47, :257:43, :264:27, :274:{15,19,38}]
  FarPath far_path_mods_0 (	// @[FADD.scala:240:26]
    .io_in_a_sign       (need_swap ? io_b[55] : io_a[55]),	// @[FADD.scala:222:47, :233:10, package.scala:63:19]
    .io_in_a_exp        (need_swap ? raw_b_exp : raw_a_exp),	// @[FADD.scala:222:47, :233:10, package.scala:96:27]
    .io_in_a_sig        (need_swap ? raw_b_sig : raw_a_sig),	// @[Cat.scala:33:92, FADD.scala:222:47, :233:10]
    .io_in_b_sig        (need_swap ? raw_a_sig : raw_b_sig),	// @[Cat.scala:33:92, FADD.scala:222:47, :234:10]
    .io_in_expDiff      (need_swap ? _ea_minus_eb_T : exp_diff_a_b[7:0]),	// @[FADD.scala:219:47, :220:47, :222:47, :235:10]
    .io_in_effSub       (eff_sub),	// @[FADD.scala:200:28]
    .io_out_result_sign (io_out_far_path_out_sign),
    .io_out_sig_a       (io_out_far_sig_a),
    .io_out_sig_b       (io_out_far_sig_b),
    .io_out_exp_a_vec_0 (io_out_far_exp_a_vec_0),
    .io_out_exp_a_vec_1 (io_out_far_exp_a_vec_1),
    .io_out_exp_a_vec_2 (io_out_far_exp_a_vec_2)
  );
  NearPath near_path_mods_0 (	// @[FADD.scala:264:27]
    .io_in_a_sign       (io_a[55]),	// @[package.scala:63:19]
    .io_in_a_exp        (raw_a_exp),	// @[package.scala:96:27]
    .io_in_a_sig        (raw_a_sig),	// @[Cat.scala:33:92]
    .io_in_b_sign       (io_b[55]),	// @[package.scala:63:19]
    .io_in_b_sig        (raw_b_sig),	// @[Cat.scala:33:92]
    .io_in_need_shift_b (near_path_exp_neq),	// @[FADD.scala:257:43]
    .io_out_result_sign (_near_path_mods_0_io_out_result_sign),
    .io_out_result_exp  (_near_path_mods_0_io_out_result_exp),
    .io_out_sig_is_zero (_near_path_mods_0_io_out_sig_is_zero),
    .io_out_a_lt_b      (_near_path_mods_0_io_out_a_lt_b),
    .io_out_lza_error   (_near_path_mods_0_io_out_lza_error),
    .io_out_int_bit     (_near_path_mods_0_io_out_int_bit),
    .io_out_sig_raw     (_near_path_mods_0_io_out_sig_raw),
    .io_out_lzc         (_near_path_mods_0_io_out_lzc)
  );
  NearPath near_path_mods_1 (	// @[FADD.scala:264:27]
    .io_in_a_sign       (io_b[55]),	// @[package.scala:63:19]
    .io_in_a_exp        (raw_b_exp),	// @[package.scala:96:27]
    .io_in_a_sig        (raw_b_sig),	// @[Cat.scala:33:92]
    .io_in_b_sign       (io_a[55]),	// @[package.scala:63:19]
    .io_in_b_sig        (raw_a_sig),	// @[Cat.scala:33:92]
    .io_in_need_shift_b (near_path_exp_neq),	// @[FADD.scala:257:43]
    .io_out_result_sign (_near_path_mods_1_io_out_result_sign),
    .io_out_result_exp  (_near_path_mods_1_io_out_result_exp),
    .io_out_sig_is_zero (_near_path_mods_1_io_out_sig_is_zero),
    .io_out_a_lt_b      (_near_path_mods_1_io_out_a_lt_b),
    .io_out_lza_error   (_near_path_mods_1_io_out_lza_error),
    .io_out_int_bit     (_near_path_mods_1_io_out_int_bit),
    .io_out_sig_raw     (_near_path_mods_1_io_out_sig_raw),
    .io_out_lzc         (_near_path_mods_1_io_out_lzc)
  );
  assign io_out_rm = io_rm;
  assign io_out_near_path_out_sign = _near_path_out_T_2 ? _near_path_mods_1_io_out_result_sign : _near_path_mods_0_io_out_result_sign;	// @[FADD.scala:264:27, :273:26, :274:15]
  assign io_out_near_path_out_exp = _near_path_out_T_2 ? _near_path_mods_1_io_out_result_exp : _near_path_mods_0_io_out_result_exp;	// @[FADD.scala:264:27, :273:26, :274:15]
  assign io_out_special_case_valid = special_path_hasNaN | decode_a_isInf | b_isInf;	// @[FADD.scala:209:20, :211:44, :216:49, package.scala:46:40]
  assign io_out_special_case_bits_iv = decode_a_isNaN & ~(io_a[46]) | (io_b_inter_valid ? io_b_inter_flags_isInv : decode_b_isNaN & ~(io_b[46])) | special_path_inf_iv;	// @[FADD.scala:208:21, :214:55, :217:46, package.scala:48:40, :49:{37,40,49}]
  assign io_out_special_case_bits_nan = special_path_hasNaN | special_path_inf_iv;	// @[FADD.scala:211:44, :214:55, :299:55]
  assign io_out_special_case_bits_inf_sign = decode_a_isInf ? io_a[55] : io_b[55];	// @[FADD.scala:300:43, package.scala:46:40, :63:19]
  assign io_out_small_add = ~(|(io_a[54:47])) & ~(|(io_b[54:47]));	// @[FADD.scala:202:38, package.scala:36:31, :41:27, :64:18]
  assign io_out_far_path_mul_of = io_b_inter_flags_overflow | (&(io_b[54:47])) & ~eff_sub;	// @[FADD.scala:200:28, :225:22, :284:{46,69}, package.scala:37:31, :64:18]
  assign io_out_near_path_sig_is_zero = _near_path_out_T_2 ? _near_path_mods_1_io_out_sig_is_zero : _near_path_mods_0_io_out_sig_is_zero;	// @[FADD.scala:264:27, :273:26, :274:15]
  assign io_out_near_path_lza_error = _near_path_out_T_2 ? _near_path_mods_1_io_out_lza_error : _near_path_mods_0_io_out_lza_error;	// @[FADD.scala:264:27, :273:26, :274:15]
  assign io_out_near_path_int_bit = _near_path_out_T_2 ? _near_path_mods_1_io_out_int_bit : _near_path_mods_0_io_out_int_bit;	// @[FADD.scala:264:27, :273:26, :274:15]
  assign io_out_near_path_sig_raw = _near_path_out_T_2 ? _near_path_mods_1_io_out_sig_raw : _near_path_mods_0_io_out_sig_raw;	// @[FADD.scala:264:27, :273:26, :274:15]
  assign io_out_near_path_lzc = _near_path_out_T_2 ? _near_path_mods_1_io_out_lzc : _near_path_mods_0_io_out_lzc;	// @[FADD.scala:264:27, :273:26, :274:15]
  assign io_out_sel_far_path = ~eff_sub | (|(need_swap ? _ea_minus_eb_T[7:1] : exp_diff_a_b[7:1])) | io_b_inter_flags_overflow;	// @[FADD.scala:200:28, :219:47, :220:47, :222:47, :224:{24,75}, :225:{22,46,52}]
endmodule

