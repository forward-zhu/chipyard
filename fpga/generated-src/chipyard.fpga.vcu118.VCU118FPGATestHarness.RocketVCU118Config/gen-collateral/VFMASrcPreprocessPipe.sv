// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VFMASrcPreprocessPipe(
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_vs1,
                io_in_bits_vs2,
                io_in_bits_old_vd,
  input  [7:0]  io_in_bits_prestart,
                io_in_bits_mask,
                io_in_bits_tail,
  input  [4:0]  io_in_bits_uop_ctrl_lsrc_0,
                io_in_bits_uop_ctrl_lsrc_1,
                io_in_bits_uop_ctrl_ldest,
  input         io_in_bits_uop_ctrl_vm,
  input  [5:0]  io_in_bits_uop_ctrl_funct6,
  input  [2:0]  io_in_bits_uop_ctrl_funct3,
  input         io_in_bits_uop_ctrl_widen,
                io_in_bits_uop_ctrl_widen2,
                io_in_bits_uop_ctrl_narrow,
                io_in_bits_uop_ctrl_narrow_to_1,
  input  [6:0]  io_in_bits_uop_info_vstart,
  input  [7:0]  io_in_bits_uop_info_vl,
  input  [1:0]  io_in_bits_uop_info_vxrm,
  input  [2:0]  io_in_bits_uop_info_frm,
                io_in_bits_uop_info_vlmul,
                io_in_bits_uop_info_vsew,
  input         io_in_bits_uop_info_ma,
                io_in_bits_uop_info_ta,
  input  [2:0]  io_in_bits_uop_info_destEew,
                io_in_bits_uop_expdIdx,
  input         io_in_bits_uop_expdEnd,
                io_in_bits_uop_sysUop_robIdx_flag,
  input  [7:0]  io_in_bits_uop_sysUop_robIdx_value,
  input  [63:0] io_in_bits_uop_maskKeep,
                io_in_bits_uop_maskOff,
  input  [1:0]  io_in_bits_uop_vfpCtrl_fmaCmd,
  input         io_in_bits_uop_vfpCtrl_negVs1,
                io_in_bits_uop_vfpCtrl_negVs2,
                io_in_bits_uop_vfpCtrl_negVd,
                io_in_bits_uop_vfpCtrl_switchVdVs2,
                io_in_bits_uop_typeTag,
                io_out_ready,
  output        io_in_ready,
                io_out_valid,
  output [63:0] io_out_bits_vs1,
                io_out_bits_vs2,
                io_out_bits_old_vd,
  output [7:0]  io_out_bits_prestart,
                io_out_bits_mask,
                io_out_bits_tail,
  output [4:0]  io_out_bits_uop_ctrl_lsrc_0,
                io_out_bits_uop_ctrl_lsrc_1,
                io_out_bits_uop_ctrl_ldest,
  output        io_out_bits_uop_ctrl_vm,
  output [5:0]  io_out_bits_uop_ctrl_funct6,
  output [2:0]  io_out_bits_uop_ctrl_funct3,
  output        io_out_bits_uop_ctrl_widen,
                io_out_bits_uop_ctrl_widen2,
                io_out_bits_uop_ctrl_narrow,
                io_out_bits_uop_ctrl_narrow_to_1,
  output [6:0]  io_out_bits_uop_info_vstart,
  output [7:0]  io_out_bits_uop_info_vl,
  output [1:0]  io_out_bits_uop_info_vxrm,
  output [2:0]  io_out_bits_uop_info_frm,
                io_out_bits_uop_info_vlmul,
                io_out_bits_uop_info_vsew,
  output        io_out_bits_uop_info_ma,
                io_out_bits_uop_info_ta,
  output [2:0]  io_out_bits_uop_info_destEew,
                io_out_bits_uop_expdIdx,
  output        io_out_bits_uop_expdEnd,
                io_out_bits_uop_sysUop_robIdx_flag,
  output [7:0]  io_out_bits_uop_sysUop_robIdx_value,
  output [63:0] io_out_bits_uop_maskKeep,
                io_out_bits_uop_maskOff,
  output [1:0]  io_out_bits_uop_vfpCtrl_fmaCmd,
  output        io_out_bits_uop_typeTag
);

  wire [63:0] _fcvt2_io_result;	// @[VFFMA.scala:97:21]
  wire [4:0]  _fcvt2_io_fflags;	// @[VFFMA.scala:97:21]
  wire [63:0] _fcvt1_io_result;	// @[VFFMA.scala:93:21]
  wire [4:0]  _fcvt1_io_fflags;	// @[VFFMA.scala:93:21]
  wire [63:0] _vs1StageMid_T_11 = {~(io_in_bits_vs1[63]), io_in_bits_vs1[62:32], ~(io_in_bits_vs1[31]), io_in_bits_vs1[30:0]};	// @[Cat.scala:33:92, VFFMA.scala:35:{9,11,23}, :40:{41,64}]
  wire [63:0] _vs1StageMid_T_15 = {~(io_in_bits_vs1[63]), io_in_bits_vs1[62:0]};	// @[Cat.scala:33:92, VFFMA.scala:35:{9,11,23}]
  wire [63:0] vs1StageFinal = io_in_bits_uop_vfpCtrl_negVs1 ? (io_in_bits_uop_typeTag ? _vs1StageMid_T_15 : _vs1StageMid_T_11) : io_in_bits_vs1;	// @[Cat.scala:33:92, VFFMA.scala:40:8, :54:24]
  wire [63:0] _vs2StageMid_T_11 = {~(io_in_bits_vs2[63]), io_in_bits_vs2[62:32], ~(io_in_bits_vs2[31]), io_in_bits_vs2[30:0]};	// @[Cat.scala:33:92, VFFMA.scala:35:{9,11,23}, :40:{41,64}]
  wire [63:0] _vs2StageMid_T_15 = {~(io_in_bits_vs2[63]), io_in_bits_vs2[62:0]};	// @[Cat.scala:33:92, VFFMA.scala:35:{9,11,23}]
  wire [63:0] vs2StageMid = io_in_bits_uop_vfpCtrl_negVs2 ? (io_in_bits_uop_typeTag ? _vs2StageMid_T_15 : _vs2StageMid_T_11) : io_in_bits_vs2;	// @[Cat.scala:33:92, VFFMA.scala:40:8, :55:24]
  reg         REG;	// @[VFFMA.scala:65:62]
  wire        _WIRE = ~REG | io_out_ready;	// @[VFFMA.scala:65:62, :73:{18,35}]
  reg  [7:0]  io_out_bits_r_prestart;	// @[Reg.scala:19:16]
  reg  [7:0]  io_out_bits_r_mask;	// @[Reg.scala:19:16]
  reg  [7:0]  io_out_bits_r_tail;	// @[Reg.scala:19:16]
  reg  [4:0]  io_out_bits_r_uop_ctrl_lsrc_0;	// @[Reg.scala:19:16]
  reg  [4:0]  io_out_bits_r_uop_ctrl_lsrc_1;	// @[Reg.scala:19:16]
  reg  [4:0]  io_out_bits_r_uop_ctrl_ldest;	// @[Reg.scala:19:16]
  reg         io_out_bits_r_uop_ctrl_vm;	// @[Reg.scala:19:16]
  reg  [5:0]  io_out_bits_r_uop_ctrl_funct6;	// @[Reg.scala:19:16]
  reg  [2:0]  io_out_bits_r_uop_ctrl_funct3;	// @[Reg.scala:19:16]
  reg         io_out_bits_r_uop_ctrl_widen;	// @[Reg.scala:19:16]
  reg         io_out_bits_r_uop_ctrl_widen2;	// @[Reg.scala:19:16]
  reg         io_out_bits_r_uop_ctrl_narrow;	// @[Reg.scala:19:16]
  reg         io_out_bits_r_uop_ctrl_narrow_to_1;	// @[Reg.scala:19:16]
  reg  [6:0]  io_out_bits_r_uop_info_vstart;	// @[Reg.scala:19:16]
  reg  [7:0]  io_out_bits_r_uop_info_vl;	// @[Reg.scala:19:16]
  reg  [1:0]  io_out_bits_r_uop_info_vxrm;	// @[Reg.scala:19:16]
  reg  [2:0]  io_out_bits_r_uop_info_frm;	// @[Reg.scala:19:16]
  reg  [2:0]  io_out_bits_r_uop_info_vlmul;	// @[Reg.scala:19:16]
  reg  [2:0]  io_out_bits_r_uop_info_vsew;	// @[Reg.scala:19:16]
  reg         io_out_bits_r_uop_info_ma;	// @[Reg.scala:19:16]
  reg         io_out_bits_r_uop_info_ta;	// @[Reg.scala:19:16]
  reg  [2:0]  io_out_bits_r_uop_info_destEew;	// @[Reg.scala:19:16]
  reg  [2:0]  io_out_bits_r_uop_expdIdx;	// @[Reg.scala:19:16]
  reg         io_out_bits_r_uop_expdEnd;	// @[Reg.scala:19:16]
  reg         io_out_bits_r_uop_sysUop_robIdx_flag;	// @[Reg.scala:19:16]
  reg  [7:0]  io_out_bits_r_uop_sysUop_robIdx_value;	// @[Reg.scala:19:16]
  reg  [63:0] io_out_bits_r_uop_maskKeep;	// @[Reg.scala:19:16]
  reg  [63:0] io_out_bits_r_uop_maskOff;	// @[Reg.scala:19:16]
  reg  [1:0]  io_out_bits_r_uop_vfpCtrl_fmaCmd;	// @[Reg.scala:19:16]
  reg  [63:0] io_out_bits_vs1_r;	// @[Reg.scala:19:16]
  reg  [63:0] io_out_bits_vs2_r;	// @[Reg.scala:19:16]
  reg  [63:0] io_out_bits_old_vd_r;	// @[Reg.scala:19:16]
  reg         io_out_bits_uop_typeTag_r;	// @[Reg.scala:19:16]
  wire [63:0] _vdStageMid_T_16 = {~(io_in_bits_old_vd[63]), io_in_bits_old_vd[62:0]};	// @[Cat.scala:33:92, VFFMA.scala:35:{9,11,23}]
  wire [63:0] _vdStageMid_T_28 = {~(io_in_bits_old_vd[63]), io_in_bits_old_vd[62:32], ~(io_in_bits_old_vd[31]), io_in_bits_old_vd[30:0]};	// @[Cat.scala:33:92, VFFMA.scala:35:{9,11,23}, :40:{41,64}]
  wire [63:0] _vdStageMid_T_32 = {~(io_in_bits_old_vd[63]), io_in_bits_old_vd[62:0]};	// @[Cat.scala:33:92, VFFMA.scala:35:{9,11,23}]
  wire        _io_out_bits_uop_typeTag_T = io_in_bits_uop_ctrl_widen | io_in_bits_uop_ctrl_widen2;	// @[VFFMA.scala:125:24]
  wire        _transfer_T = io_in_valid & _WIRE;	// @[VFFMA.scala:70:49, :73:35]
  always @(posedge clock) begin
    if (reset)
      REG <= 1'h0;	// @[VFFMA.scala:65:62]
    else if (_transfer_T)	// @[VFFMA.scala:70:49]
      REG <= io_in_valid;	// @[VFFMA.scala:65:62]
    else	// @[VFFMA.scala:70:49]
      REG <= ~io_out_ready & REG;	// @[VFFMA.scala:65:62, :80:42, :81:19]
    if (_transfer_T) begin	// @[VFFMA.scala:70:49]
      io_out_bits_r_prestart <= io_in_bits_prestart;	// @[Reg.scala:19:16]
      io_out_bits_r_mask <= io_in_bits_mask;	// @[Reg.scala:19:16]
      io_out_bits_r_tail <= io_in_bits_tail;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_ctrl_lsrc_0 <= io_in_bits_uop_ctrl_lsrc_0;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_ctrl_lsrc_1 <= io_in_bits_uop_ctrl_lsrc_1;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_ctrl_ldest <= io_in_bits_uop_ctrl_ldest;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_ctrl_vm <= io_in_bits_uop_ctrl_vm;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_ctrl_funct6 <= io_in_bits_uop_ctrl_funct6;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_ctrl_funct3 <= io_in_bits_uop_ctrl_funct3;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_ctrl_widen <= io_in_bits_uop_ctrl_widen;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_ctrl_widen2 <= io_in_bits_uop_ctrl_widen2;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_ctrl_narrow <= io_in_bits_uop_ctrl_narrow;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_ctrl_narrow_to_1 <= io_in_bits_uop_ctrl_narrow_to_1;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_info_vstart <= io_in_bits_uop_info_vstart;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_info_vl <= io_in_bits_uop_info_vl;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_info_vxrm <= io_in_bits_uop_info_vxrm;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_info_frm <= io_in_bits_uop_info_frm;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_info_vlmul <= io_in_bits_uop_info_vlmul;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_info_vsew <= io_in_bits_uop_info_vsew;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_info_ma <= io_in_bits_uop_info_ma;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_info_ta <= io_in_bits_uop_info_ta;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_info_destEew <= io_in_bits_uop_info_destEew;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_expdIdx <= io_in_bits_uop_expdIdx;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_expdEnd <= io_in_bits_uop_expdEnd;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_sysUop_robIdx_flag <= io_in_bits_uop_sysUop_robIdx_flag;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_sysUop_robIdx_value <= io_in_bits_uop_sysUop_robIdx_value;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_maskKeep <= io_in_bits_uop_maskKeep;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_maskOff <= io_in_bits_uop_maskOff;	// @[Reg.scala:19:16]
      io_out_bits_r_uop_vfpCtrl_fmaCmd <= io_in_bits_uop_vfpCtrl_fmaCmd;	// @[Reg.scala:19:16]
      if (_io_out_bits_uop_typeTag_T) begin	// @[VFFMA.scala:125:24]
        if ((&(_fcvt1_io_result[62:52])) & (|(_fcvt1_io_result[51:0])) & _fcvt1_io_fflags[4])	// @[VFFMA.scala:93:21, :118:{40,58}, package.scala:37:31, :38:31, :64:18, :65:18]
          io_out_bits_vs1_r <= {_fcvt1_io_result[63:52], ~(_fcvt1_io_result[51:0])};	// @[Cat.scala:33:92, Reg.scala:19:16, VFFMA.scala:93:21, :118:{82,92}, package.scala:65:18]
        else	// @[VFFMA.scala:118:40]
          io_out_bits_vs1_r <= _fcvt1_io_result;	// @[Reg.scala:19:16, VFFMA.scala:93:21]
      end
      else if (io_in_bits_uop_vfpCtrl_negVs1) begin
        if (io_in_bits_uop_typeTag)
          io_out_bits_vs1_r <= _vs1StageMid_T_15;	// @[Cat.scala:33:92, Reg.scala:19:16]
        else
          io_out_bits_vs1_r <= _vs1StageMid_T_11;	// @[Cat.scala:33:92, Reg.scala:19:16]
      end
      else
        io_out_bits_vs1_r <= io_in_bits_vs1;	// @[Reg.scala:19:16]
      if (io_in_bits_uop_ctrl_widen) begin
        if ((&(_fcvt2_io_result[62:52])) & (|(_fcvt2_io_result[51:0])) & _fcvt2_io_fflags[4])	// @[VFFMA.scala:97:21, :121:{40,58}, package.scala:37:31, :38:31, :64:18, :65:18]
          io_out_bits_vs2_r <= {_fcvt2_io_result[63:52], ~(_fcvt2_io_result[51:0])};	// @[Cat.scala:33:92, Reg.scala:19:16, VFFMA.scala:97:21, :121:{82,92}, package.scala:65:18]
        else	// @[VFFMA.scala:121:40]
          io_out_bits_vs2_r <= _fcvt2_io_result;	// @[Reg.scala:19:16, VFFMA.scala:97:21]
      end
      else if (io_in_bits_uop_vfpCtrl_switchVdVs2) begin
        if (io_in_bits_uop_vfpCtrl_negVd) begin
          if (io_in_bits_uop_ctrl_widen)
            io_out_bits_vs2_r <= _vdStageMid_T_16;	// @[Cat.scala:33:92, Reg.scala:19:16]
          else if (io_in_bits_uop_typeTag)
            io_out_bits_vs2_r <= _vdStageMid_T_32;	// @[Cat.scala:33:92, Reg.scala:19:16]
          else
            io_out_bits_vs2_r <= _vdStageMid_T_28;	// @[Cat.scala:33:92, Reg.scala:19:16]
        end
        else
          io_out_bits_vs2_r <= io_in_bits_old_vd;	// @[Reg.scala:19:16]
      end
      else if (io_in_bits_uop_vfpCtrl_negVs2) begin
        if (io_in_bits_uop_typeTag)
          io_out_bits_vs2_r <= _vs2StageMid_T_15;	// @[Cat.scala:33:92, Reg.scala:19:16]
        else
          io_out_bits_vs2_r <= _vs2StageMid_T_11;	// @[Cat.scala:33:92, Reg.scala:19:16]
      end
      else
        io_out_bits_vs2_r <= io_in_bits_vs2;	// @[Reg.scala:19:16]
      if (io_in_bits_uop_vfpCtrl_switchVdVs2) begin
        if (io_in_bits_uop_vfpCtrl_negVs2) begin
          if (io_in_bits_uop_typeTag)
            io_out_bits_old_vd_r <= _vs2StageMid_T_15;	// @[Cat.scala:33:92, Reg.scala:19:16]
          else
            io_out_bits_old_vd_r <= _vs2StageMid_T_11;	// @[Cat.scala:33:92, Reg.scala:19:16]
        end
        else
          io_out_bits_old_vd_r <= io_in_bits_vs2;	// @[Reg.scala:19:16]
      end
      else if (io_in_bits_uop_vfpCtrl_negVd) begin
        if (io_in_bits_uop_ctrl_widen)
          io_out_bits_old_vd_r <= _vdStageMid_T_16;	// @[Cat.scala:33:92, Reg.scala:19:16]
        else if (io_in_bits_uop_typeTag)
          io_out_bits_old_vd_r <= _vdStageMid_T_32;	// @[Cat.scala:33:92, Reg.scala:19:16]
        else
          io_out_bits_old_vd_r <= _vdStageMid_T_28;	// @[Cat.scala:33:92, Reg.scala:19:16]
      end
      else
        io_out_bits_old_vd_r <= io_in_bits_old_vd;	// @[Reg.scala:19:16]
      io_out_bits_uop_typeTag_r <= _io_out_bits_uop_typeTag_T | io_in_bits_uop_typeTag;	// @[Reg.scala:19:16, VFFMA.scala:125:24, :135:8]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    logic [31:0] _RANDOM_22;
    logic [31:0] _RANDOM_23;
    logic [31:0] _RANDOM_24;
    logic [31:0] _RANDOM_25;
    logic [31:0] _RANDOM_26;
    logic [31:0] _RANDOM_27;
    logic [31:0] _RANDOM_28;
    logic [31:0] _RANDOM_29;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        REG = _RANDOM_0[1];	// @[VFFMA.scala:65:62]
        io_out_bits_r_prestart = _RANDOM_15[16:9];	// @[Reg.scala:19:16]
        io_out_bits_r_mask = _RANDOM_15[24:17];	// @[Reg.scala:19:16]
        io_out_bits_r_tail = {_RANDOM_15[31:25], _RANDOM_16[0]};	// @[Reg.scala:19:16]
        io_out_bits_r_uop_ctrl_lsrc_0 = _RANDOM_16[5:1];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_ctrl_lsrc_1 = _RANDOM_16[10:6];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_ctrl_ldest = _RANDOM_16[15:11];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_ctrl_vm = _RANDOM_16[16];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_ctrl_funct6 = _RANDOM_16[22:17];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_ctrl_funct3 = _RANDOM_16[25:23];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_ctrl_widen = _RANDOM_16[26];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_ctrl_widen2 = _RANDOM_16[27];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_ctrl_narrow = _RANDOM_16[28];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_ctrl_narrow_to_1 = _RANDOM_16[29];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_info_vstart = {_RANDOM_16[31:30], _RANDOM_17[4:0]};	// @[Reg.scala:19:16]
        io_out_bits_r_uop_info_vl = _RANDOM_17[12:5];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_info_vxrm = _RANDOM_17[14:13];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_info_frm = _RANDOM_17[17:15];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_info_vlmul = _RANDOM_17[20:18];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_info_vsew = _RANDOM_17[23:21];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_info_ma = _RANDOM_17[24];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_info_ta = _RANDOM_17[25];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_info_destEew = _RANDOM_17[28:26];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_expdIdx = _RANDOM_17[31:29];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_expdEnd = _RANDOM_18[0];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_sysUop_robIdx_flag = _RANDOM_18[2];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_sysUop_robIdx_value = _RANDOM_18[10:3];	// @[Reg.scala:19:16]
        io_out_bits_r_uop_maskKeep = {_RANDOM_18[31:11], _RANDOM_19, _RANDOM_20[10:0]};	// @[Reg.scala:19:16]
        io_out_bits_r_uop_maskOff = {_RANDOM_20[31:11], _RANDOM_21, _RANDOM_22[10:0]};	// @[Reg.scala:19:16]
        io_out_bits_r_uop_vfpCtrl_fmaCmd = _RANDOM_22[12:11];	// @[Reg.scala:19:16]
        io_out_bits_vs1_r = {_RANDOM_23[31:8], _RANDOM_24, _RANDOM_25[7:0]};	// @[Reg.scala:19:16]
        io_out_bits_vs2_r = {_RANDOM_25[31:8], _RANDOM_26, _RANDOM_27[7:0]};	// @[Reg.scala:19:16]
        io_out_bits_old_vd_r = {_RANDOM_27[31:8], _RANDOM_28, _RANDOM_29[7:0]};	// @[Reg.scala:19:16]
        io_out_bits_uop_typeTag_r = _RANDOM_29[8];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  FPToFP_1 fcvt1 (	// @[VFFMA.scala:93:21]
    .io_in     (io_in_bits_uop_expdIdx[0] ? vs1StageFinal[63:32] : vs1StageFinal[31:0]),	// @[VFFMA.scala:54:24, :102:21, :103:16, :104:21, :105:21]
    .io_result (_fcvt1_io_result),
    .io_fflags (_fcvt1_io_fflags)
  );
  FPToFP_1 fcvt2 (	// @[VFFMA.scala:97:21]
    .io_in     (io_in_bits_uop_expdIdx[0] ? vs2StageMid[63:32] : vs2StageMid[31:0]),	// @[VFFMA.scala:55:24, :103:16, :107:21, :109:21, :110:21]
    .io_result (_fcvt2_io_result),
    .io_fflags (_fcvt2_io_fflags)
  );
  assign io_in_ready = _WIRE;	// @[VFFMA.scala:73:35]
  assign io_out_valid = REG;	// @[VFFMA.scala:65:62]
  assign io_out_bits_vs1 = io_out_bits_vs1_r;	// @[Reg.scala:19:16]
  assign io_out_bits_vs2 = io_out_bits_vs2_r;	// @[Reg.scala:19:16]
  assign io_out_bits_old_vd = io_out_bits_old_vd_r;	// @[Reg.scala:19:16]
  assign io_out_bits_prestart = io_out_bits_r_prestart;	// @[Reg.scala:19:16]
  assign io_out_bits_mask = io_out_bits_r_mask;	// @[Reg.scala:19:16]
  assign io_out_bits_tail = io_out_bits_r_tail;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_lsrc_0 = io_out_bits_r_uop_ctrl_lsrc_0;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_lsrc_1 = io_out_bits_r_uop_ctrl_lsrc_1;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_ldest = io_out_bits_r_uop_ctrl_ldest;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_vm = io_out_bits_r_uop_ctrl_vm;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_funct6 = io_out_bits_r_uop_ctrl_funct6;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_funct3 = io_out_bits_r_uop_ctrl_funct3;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_widen = io_out_bits_r_uop_ctrl_widen;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_widen2 = io_out_bits_r_uop_ctrl_widen2;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_narrow = io_out_bits_r_uop_ctrl_narrow;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_narrow_to_1 = io_out_bits_r_uop_ctrl_narrow_to_1;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_info_vstart = io_out_bits_r_uop_info_vstart;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_info_vl = io_out_bits_r_uop_info_vl;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_info_vxrm = io_out_bits_r_uop_info_vxrm;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_info_frm = io_out_bits_r_uop_info_frm;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_info_vlmul = io_out_bits_r_uop_info_vlmul;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_info_vsew = io_out_bits_r_uop_info_vsew;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_info_ma = io_out_bits_r_uop_info_ma;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_info_ta = io_out_bits_r_uop_info_ta;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_info_destEew = io_out_bits_r_uop_info_destEew;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_expdIdx = io_out_bits_r_uop_expdIdx;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_expdEnd = io_out_bits_r_uop_expdEnd;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_sysUop_robIdx_flag = io_out_bits_r_uop_sysUop_robIdx_flag;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_sysUop_robIdx_value = io_out_bits_r_uop_sysUop_robIdx_value;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_maskKeep = io_out_bits_r_uop_maskKeep;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_maskOff = io_out_bits_r_uop_maskOff;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_fmaCmd = io_out_bits_r_uop_vfpCtrl_fmaCmd;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_typeTag = io_out_bits_uop_typeTag_r;	// @[Reg.scala:19:16]
endmodule

