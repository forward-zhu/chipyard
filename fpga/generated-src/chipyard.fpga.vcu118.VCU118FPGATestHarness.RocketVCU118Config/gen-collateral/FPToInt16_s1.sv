// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FPToInt16_s1(
  input  [31:0] io_a,
  input  [2:0]  io_rm,
  input  [1:0]  io_op,
  output        io_to_s2_raw_a_sign,
  output [7:0]  io_to_s2_raw_a_exp,
  output [23:0] io_to_s2_raw_a_sig,
  output [2:0]  io_to_s2_rm,
  output [1:0]  io_to_s2_op,
  output        io_to_s2_sel_lpath,
                io_to_s2_exp_of,
                io_to_s2_iv_sel_max,
  output [7:0]  io_to_s2_rpath_shamt
);

  wire [7:0] raw_a_exp = io_a[30:23] | {7'h0, ~(|(io_a[30:23]))};	// @[package.scala:36:31, :64:18, :96:{27,29}]
  assign io_to_s2_raw_a_sign = io_a[31];	// @[package.scala:63:19]
  assign io_to_s2_raw_a_exp = raw_a_exp;	// @[package.scala:96:27]
  assign io_to_s2_raw_a_sig = {|(io_a[30:23]), io_a[22:0]};	// @[Cat.scala:33:92, package.scala:36:31, :64:18, :65:18]
  assign io_to_s2_rm = io_rm;
  assign io_to_s2_op = io_op;
  assign io_to_s2_sel_lpath = raw_a_exp > 8'h95;	// @[FPToInt16.scala:93:29, package.scala:96:27]
  assign io_to_s2_exp_of = raw_a_exp > {2'h0, io_op[1] ? 6'h3F : 6'hF} + 8'h7F;	// @[FPToInt16.scala:41:26, :48:{36,42}, :49:26, package.scala:96:27]
  assign io_to_s2_iv_sel_max = (&(io_a[30:23])) & (|(io_a[22:0])) | ~(io_a[31]);	// @[FPToInt16.scala:55:{41,44}, package.scala:37:31, :38:31, :48:40, :63:19, :64:18, :65:18]
  assign io_to_s2_rpath_shamt = 8'h8E - raw_a_exp;	// @[FPToInt16.scala:86:59, package.scala:96:27]
endmodule

