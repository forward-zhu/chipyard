// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SVDecodeUnit(
  input         clock,
                reset,
                io_in_valid,
  input  [31:0] io_in_bits_inst,
  input  [63:0] io_in_bits_frs1,
                io_in_bits_rs1,
                io_in_bits_rs2,
  input  [7:0]  io_in_bits_vInfo_vl,
  input  [6:0]  io_in_bits_vInfo_vstart,
  input         io_in_bits_vInfo_vma,
                io_in_bits_vInfo_vta,
  input  [2:0]  io_in_bits_vInfo_vsew,
                io_in_bits_vInfo_vlmul,
  input  [1:0]  io_in_bits_vInfo_vxrm,
  input  [2:0]  io_in_bits_vInfo_frm,
  input         io_out_ready,
                io_vLSUXcpt_exception_vld,
                io_vLSUXcpt_update_vl,
  output        io_in_ready,
                io_out_valid,
  output [4:0]  io_out_bits_vCtrl_lsrc_0,
                io_out_bits_vCtrl_lsrc_1,
                io_out_bits_vCtrl_ldest,
  output        io_out_bits_vCtrl_vm,
  output [5:0]  io_out_bits_vCtrl_funct6,
  output [2:0]  io_out_bits_vCtrl_funct3,
  output        io_out_bits_vCtrl_illegal,
                io_out_bits_vCtrl_lsrcVal_0,
                io_out_bits_vCtrl_lsrcVal_1,
                io_out_bits_vCtrl_ldestVal,
                io_out_bits_vCtrl_rdVal,
                io_out_bits_vCtrl_load,
                io_out_bits_vCtrl_store,
                io_out_bits_vCtrl_alu,
                io_out_bits_vCtrl_mul,
                io_out_bits_vCtrl_fp,
                io_out_bits_vCtrl_div,
                io_out_bits_vCtrl_redu,
                io_out_bits_vCtrl_mask,
                io_out_bits_vCtrl_perm,
                io_out_bits_vCtrl_widen,
                io_out_bits_vCtrl_widen2,
                io_out_bits_vCtrl_narrow,
                io_out_bits_vCtrl_narrow_to_1,
  output [63:0] io_out_bits_scalar_opnd_1,
                io_out_bits_scalar_opnd_2,
                io_out_bits_float_opnd_1,
  output [7:0]  io_out_bits_vInfo_vl,
  output [6:0]  io_out_bits_vInfo_vstart,
  output        io_out_bits_vInfo_vma,
                io_out_bits_vInfo_vta,
  output [2:0]  io_out_bits_vInfo_vsew,
                io_out_bits_vInfo_vlmul,
  output [1:0]  io_out_bits_vInfo_vxrm,
  output [2:0]  io_out_bits_vInfo_frm,
                io_out_bits_eewEmulInfo_veewVs2,
                io_out_bits_eewEmulInfo_veewVd,
  output [3:0]  io_out_bits_eewEmulInfo_emulVs1,
                io_out_bits_eewEmulInfo_emulVs2,
                io_out_bits_eewEmulInfo_emulVd,
  output        io_out_bits_floatRed
);

  wire        _vIllegalInstrn_io_ill_valid;	// @[VDecodeWrapper.scala:96:30]
  wire [2:0]  _infoCalc_io_infoAll_veewVs1;	// @[VDecodeWrapper.scala:84:24]
  wire [2:0]  _infoCalc_io_infoAll_veewVs2;	// @[VDecodeWrapper.scala:84:24]
  wire [2:0]  _infoCalc_io_infoAll_veewVd;	// @[VDecodeWrapper.scala:84:24]
  wire [2:0]  _infoCalc_io_infoAll_vemulVs1;	// @[VDecodeWrapper.scala:84:24]
  wire [2:0]  _infoCalc_io_infoAll_vemulVs2;	// @[VDecodeWrapper.scala:84:24]
  wire [2:0]  _infoCalc_io_infoAll_vemulVd;	// @[VDecodeWrapper.scala:84:24]
  wire [3:0]  _infoCalc_io_infoAll_emulVs1;	// @[VDecodeWrapper.scala:84:24]
  wire [3:0]  _infoCalc_io_infoAll_emulVs2;	// @[VDecodeWrapper.scala:84:24]
  wire [3:0]  _infoCalc_io_infoAll_emulVd;	// @[VDecodeWrapper.scala:84:24]
  wire        _infoCalc_io_extraInfo_for_VIllegal_ldst;	// @[VDecodeWrapper.scala:84:24]
  wire        _infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_mask;	// @[VDecodeWrapper.scala:84:24]
  wire        _infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_indexed;	// @[VDecodeWrapper.scala:84:24]
  wire        _infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_segment;	// @[VDecodeWrapper.scala:84:24]
  wire        _infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_wholeReg;	// @[VDecodeWrapper.scala:84:24]
  wire [3:0]  _infoCalc_io_extraInfo_for_VIllegal_vemul_ldst;	// @[VDecodeWrapper.scala:84:24]
  wire        _infoCalc_io_extraInfo_for_VIllegal_ext2;	// @[VDecodeWrapper.scala:84:24]
  wire        _infoCalc_io_extraInfo_for_VIllegal_ext4;	// @[VDecodeWrapper.scala:84:24]
  wire        _infoCalc_io_extraInfo_for_VIllegal_ext8;	// @[VDecodeWrapper.scala:84:24]
  wire        _infoCalc_io_extraInfo_for_VIllegal_wholeRegMv;	// @[VDecodeWrapper.scala:84:24]
  wire [3:0]  _infoCalc_io_extraInfo_for_VIllegal_nreg;	// @[VDecodeWrapper.scala:84:24]
  wire [4:0]  _decode_io_out_lsrc_0;	// @[VDecodeWrapper.scala:62:22]
  wire [4:0]  _decode_io_out_lsrc_1;	// @[VDecodeWrapper.scala:62:22]
  wire [4:0]  _decode_io_out_ldest;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_vm;	// @[VDecodeWrapper.scala:62:22]
  wire [5:0]  _decode_io_out_funct6;	// @[VDecodeWrapper.scala:62:22]
  wire [2:0]  _decode_io_out_funct3;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_illegal;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_lsrcVal_0;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_lsrcVal_1;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_lsrcVal_2;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_ldestVal;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_rdVal;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_load;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_store;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_arith;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_alu;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_mul;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_fp;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_div;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_redu;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_mask;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_perm;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_widen;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_widen2;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_narrow;	// @[VDecodeWrapper.scala:62:22]
  wire        _decode_io_out_narrow_to_1;	// @[VDecodeWrapper.scala:62:22]
  reg  [31:0] bufferReg_inst;	// @[VDecodeWrapper.scala:36:26]
  reg  [63:0] bufferReg_frs1;	// @[VDecodeWrapper.scala:36:26]
  reg  [63:0] bufferReg_rs1;	// @[VDecodeWrapper.scala:36:26]
  reg  [63:0] bufferReg_rs2;	// @[VDecodeWrapper.scala:36:26]
  reg  [7:0]  bufferReg_vInfo_vl;	// @[VDecodeWrapper.scala:36:26]
  reg  [6:0]  bufferReg_vInfo_vstart;	// @[VDecodeWrapper.scala:36:26]
  reg         bufferReg_vInfo_vma;	// @[VDecodeWrapper.scala:36:26]
  reg         bufferReg_vInfo_vta;	// @[VDecodeWrapper.scala:36:26]
  reg  [2:0]  bufferReg_vInfo_vsew;	// @[VDecodeWrapper.scala:36:26]
  reg  [2:0]  bufferReg_vInfo_vlmul;	// @[VDecodeWrapper.scala:36:26]
  reg  [1:0]  bufferReg_vInfo_vxrm;	// @[VDecodeWrapper.scala:36:26]
  reg  [2:0]  bufferReg_vInfo_frm;	// @[VDecodeWrapper.scala:36:26]
  reg         bufferValidReg;	// @[VDecodeWrapper.scala:37:31]
  reg         validReg;	// @[VDecodeWrapper.scala:38:25]
  wire [2:0]  bitsIn_vInfo_vsew = bufferValidReg ? bufferReg_vInfo_vsew : io_in_bits_vInfo_vsew;	// @[VDecodeWrapper.scala:36:26, :37:31, :59:17]
  wire [2:0]  bitsIn_vInfo_vlmul = bufferValidReg ? bufferReg_vInfo_vlmul : io_in_bits_vInfo_vlmul;	// @[VDecodeWrapper.scala:36:26, :37:31, :59:17]
  wire        decodeInValid = bufferValidReg ? bufferValidReg : io_in_valid;	// @[VDecodeWrapper.scala:37:31, :60:18]
  reg  [4:0]  bitsReg_vCtrl_lsrc_0;	// @[VDecodeWrapper.scala:128:24]
  reg  [4:0]  bitsReg_vCtrl_lsrc_1;	// @[VDecodeWrapper.scala:128:24]
  reg  [4:0]  bitsReg_vCtrl_ldest;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_vm;	// @[VDecodeWrapper.scala:128:24]
  reg  [5:0]  bitsReg_vCtrl_funct6;	// @[VDecodeWrapper.scala:128:24]
  reg  [2:0]  bitsReg_vCtrl_funct3;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_illegal;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_lsrcVal_0;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_lsrcVal_1;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_ldestVal;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_rdVal;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_load;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_store;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_alu;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_mul;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_fp;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_div;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_redu;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_mask;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_perm;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_widen;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_widen2;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_narrow;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vCtrl_narrow_to_1;	// @[VDecodeWrapper.scala:128:24]
  reg  [63:0] bitsReg_scalar_opnd_1;	// @[VDecodeWrapper.scala:128:24]
  reg  [63:0] bitsReg_scalar_opnd_2;	// @[VDecodeWrapper.scala:128:24]
  reg  [63:0] bitsReg_float_opnd_1;	// @[VDecodeWrapper.scala:128:24]
  reg  [7:0]  bitsReg_vInfo_vl;	// @[VDecodeWrapper.scala:128:24]
  reg  [6:0]  bitsReg_vInfo_vstart;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vInfo_vma;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_vInfo_vta;	// @[VDecodeWrapper.scala:128:24]
  reg  [2:0]  bitsReg_vInfo_vsew;	// @[VDecodeWrapper.scala:128:24]
  reg  [2:0]  bitsReg_vInfo_vlmul;	// @[VDecodeWrapper.scala:128:24]
  reg  [1:0]  bitsReg_vInfo_vxrm;	// @[VDecodeWrapper.scala:128:24]
  reg  [2:0]  bitsReg_vInfo_frm;	// @[VDecodeWrapper.scala:128:24]
  reg  [2:0]  bitsReg_eewEmulInfo_veewVs2;	// @[VDecodeWrapper.scala:128:24]
  reg  [2:0]  bitsReg_eewEmulInfo_veewVd;	// @[VDecodeWrapper.scala:128:24]
  reg  [3:0]  bitsReg_eewEmulInfo_emulVs1;	// @[VDecodeWrapper.scala:128:24]
  reg  [3:0]  bitsReg_eewEmulInfo_emulVs2;	// @[VDecodeWrapper.scala:128:24]
  reg  [3:0]  bitsReg_eewEmulInfo_emulVd;	// @[VDecodeWrapper.scala:128:24]
  reg         bitsReg_floatRed;	// @[VDecodeWrapper.scala:128:24]
  reg         REG;	// @[VDecodeWrapper.scala:143:15]
  reg         io_out_bits_vCtrl_illegal_REG;	// @[VDecodeWrapper.scala:150:43]
  wire        _io_out_bits_vCtrl_illegal_output = io_out_bits_vCtrl_illegal_REG ? _vIllegalInstrn_io_ill_valid : bitsReg_vCtrl_illegal;	// @[VDecodeWrapper.scala:96:30, :128:24, :150:{35,43}]
  wire        bitsIn_floatRed = _decode_io_out_redu & _decode_io_out_funct3 == 3'h1;	// @[VDecodeWrapper.scala:62:22, :65:{52,76}]
  wire        _T_12 = io_vLSUXcpt_exception_vld | io_vLSUXcpt_update_vl;	// @[VDecodeWrapper.scala:41:34]
  wire        _T_7 = ~bufferValidReg & ~(~validReg | io_out_ready) & io_in_valid;	// @[VDecodeWrapper.scala:37:31, :38:25, :46:{8,27,29,39,56}]
  wire        fire = decodeInValid & (~validReg | io_out_ready);	// @[VDecodeWrapper.scala:38:25, :46:29, :60:18, :138:{28,41}]
  always @(posedge clock) begin
    if (reset) begin
      bufferReg_inst <= 32'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_frs1 <= 64'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_rs1 <= 64'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_rs2 <= 64'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_vInfo_vl <= 8'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_vInfo_vstart <= 7'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_vInfo_vma <= 1'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_vInfo_vta <= 1'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_vInfo_vsew <= 3'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_vInfo_vlmul <= 3'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_vInfo_vxrm <= 2'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferReg_vInfo_frm <= 3'h0;	// @[VDecodeWrapper.scala:36:{26,39}]
      bufferValidReg <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :37:31]
      validReg <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :38:25]
      bitsReg_vCtrl_lsrc_0 <= 5'h0;	// @[VDecodeWrapper.scala:128:{24,37}]
      bitsReg_vCtrl_lsrc_1 <= 5'h0;	// @[VDecodeWrapper.scala:128:{24,37}]
      bitsReg_vCtrl_ldest <= 5'h0;	// @[VDecodeWrapper.scala:128:{24,37}]
      bitsReg_vCtrl_vm <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_funct6 <= 6'h0;	// @[VDecodeWrapper.scala:128:{24,37}]
      bitsReg_vCtrl_funct3 <= 3'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_illegal <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_lsrcVal_0 <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_lsrcVal_1 <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_ldestVal <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_rdVal <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_load <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_store <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_alu <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_mul <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_fp <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_div <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_redu <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_mask <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_perm <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_widen <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_widen2 <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_narrow <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vCtrl_narrow_to_1 <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_scalar_opnd_1 <= 64'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_scalar_opnd_2 <= 64'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_float_opnd_1 <= 64'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vInfo_vl <= 8'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vInfo_vstart <= 7'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vInfo_vma <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vInfo_vta <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vInfo_vsew <= 3'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vInfo_vlmul <= 3'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vInfo_vxrm <= 2'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_vInfo_frm <= 3'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_eewEmulInfo_veewVs2 <= 3'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_eewEmulInfo_veewVd <= 3'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
      bitsReg_eewEmulInfo_emulVs1 <= 4'h0;	// @[VDecodeWrapper.scala:111:45, :128:24]
      bitsReg_eewEmulInfo_emulVs2 <= 4'h0;	// @[VDecodeWrapper.scala:111:45, :128:24]
      bitsReg_eewEmulInfo_emulVd <= 4'h0;	// @[VDecodeWrapper.scala:111:45, :128:24]
      bitsReg_floatRed <= 1'h0;	// @[VDecodeWrapper.scala:36:39, :128:24]
    end
    else begin
      if (_T_7) begin	// @[VDecodeWrapper.scala:46:56]
        bufferReg_inst <= io_in_bits_inst;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_frs1 <= io_in_bits_frs1;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_rs1 <= io_in_bits_rs1;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_rs2 <= io_in_bits_rs2;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vl <= io_in_bits_vInfo_vl;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vstart <= io_in_bits_vInfo_vstart;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vma <= io_in_bits_vInfo_vma;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vta <= io_in_bits_vInfo_vta;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vsew <= io_in_bits_vInfo_vsew;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vlmul <= io_in_bits_vInfo_vlmul;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vxrm <= io_in_bits_vInfo_vxrm;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_frm <= io_in_bits_vInfo_frm;	// @[VDecodeWrapper.scala:36:26]
      end
      bufferValidReg <= ~(~validReg | io_out_ready) & (_T_7 ? io_in_valid : ~(_T_12 | _io_out_bits_vCtrl_illegal_output) & bufferValidReg);	// @[VDecodeWrapper.scala:37:31, :38:25, :41:{34,59,88}, :42:20, :46:{29,56,71}, :48:20, :52:{18,34}, :53:22, :150:35]
      validReg <= ~(_T_12 | _io_out_bits_vCtrl_illegal_output) & (~validReg | io_out_ready ? decodeInValid : validReg);	// @[VDecodeWrapper.scala:38:25, :41:34, :46:29, :60:18, :130:{18,34}, :131:16, :134:{59,88}, :135:14, :150:35]
      if (fire) begin	// @[VDecodeWrapper.scala:138:28]
        bitsReg_vCtrl_lsrc_0 <= _decode_io_out_lsrc_0;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_lsrc_1 <= _decode_io_out_lsrc_1;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_ldest <= _decode_io_out_ldest;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_vm <= _decode_io_out_vm;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_funct6 <= _decode_io_out_funct6;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_funct3 <= _decode_io_out_funct3;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_lsrcVal_0 <= _decode_io_out_lsrcVal_0;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_lsrcVal_1 <= _decode_io_out_lsrcVal_1;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_ldestVal <= _decode_io_out_ldestVal;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_rdVal <= _decode_io_out_rdVal;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_load <= _decode_io_out_load;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_store <= _decode_io_out_store;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_alu <= _decode_io_out_alu;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_mul <= _decode_io_out_mul;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_fp <= bitsIn_floatRed | _decode_io_out_fp;	// @[VDecodeWrapper.scala:62:22, :65:52, :68:20, :70:18, :73:15, :128:24]
        bitsReg_vCtrl_div <= _decode_io_out_div;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_redu <= ~bitsIn_floatRed & _decode_io_out_redu;	// @[VDecodeWrapper.scala:62:22, :65:52, :68:20, :71:20, :73:15, :128:24]
        bitsReg_vCtrl_mask <= _decode_io_out_mask;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_perm <= _decode_io_out_perm;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_widen <= _decode_io_out_widen;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_widen2 <= _decode_io_out_widen2;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_narrow <= _decode_io_out_narrow;	// @[VDecodeWrapper.scala:62:22, :128:24]
        bitsReg_vCtrl_narrow_to_1 <= _decode_io_out_narrow_to_1;	// @[VDecodeWrapper.scala:62:22, :128:24]
        if (bufferValidReg) begin	// @[VDecodeWrapper.scala:37:31]
          bitsReg_scalar_opnd_1 <= bufferReg_rs1;	// @[VDecodeWrapper.scala:36:26, :128:24]
          bitsReg_scalar_opnd_2 <= bufferReg_rs2;	// @[VDecodeWrapper.scala:36:26, :128:24]
          bitsReg_float_opnd_1 <= bufferReg_frs1;	// @[VDecodeWrapper.scala:36:26, :128:24]
          bitsReg_vInfo_vl <= bufferReg_vInfo_vl;	// @[VDecodeWrapper.scala:36:26, :128:24]
          bitsReg_vInfo_vstart <= bufferReg_vInfo_vstart;	// @[VDecodeWrapper.scala:36:26, :128:24]
          bitsReg_vInfo_vma <= bufferReg_vInfo_vma;	// @[VDecodeWrapper.scala:36:26, :128:24]
          bitsReg_vInfo_vta <= bufferReg_vInfo_vta;	// @[VDecodeWrapper.scala:36:26, :128:24]
          bitsReg_vInfo_vsew <= bufferReg_vInfo_vsew;	// @[VDecodeWrapper.scala:36:26, :128:24]
          bitsReg_vInfo_vlmul <= bufferReg_vInfo_vlmul;	// @[VDecodeWrapper.scala:36:26, :128:24]
          bitsReg_vInfo_vxrm <= bufferReg_vInfo_vxrm;	// @[VDecodeWrapper.scala:36:26, :128:24]
          bitsReg_vInfo_frm <= bufferReg_vInfo_frm;	// @[VDecodeWrapper.scala:36:26, :128:24]
        end
        else begin	// @[VDecodeWrapper.scala:37:31]
          bitsReg_scalar_opnd_1 <= io_in_bits_rs1;	// @[VDecodeWrapper.scala:128:24]
          bitsReg_scalar_opnd_2 <= io_in_bits_rs2;	// @[VDecodeWrapper.scala:128:24]
          bitsReg_float_opnd_1 <= io_in_bits_frs1;	// @[VDecodeWrapper.scala:128:24]
          bitsReg_vInfo_vl <= io_in_bits_vInfo_vl;	// @[VDecodeWrapper.scala:128:24]
          bitsReg_vInfo_vstart <= io_in_bits_vInfo_vstart;	// @[VDecodeWrapper.scala:128:24]
          bitsReg_vInfo_vma <= io_in_bits_vInfo_vma;	// @[VDecodeWrapper.scala:128:24]
          bitsReg_vInfo_vta <= io_in_bits_vInfo_vta;	// @[VDecodeWrapper.scala:128:24]
          bitsReg_vInfo_vsew <= io_in_bits_vInfo_vsew;	// @[VDecodeWrapper.scala:128:24]
          bitsReg_vInfo_vlmul <= io_in_bits_vInfo_vlmul;	// @[VDecodeWrapper.scala:128:24]
          bitsReg_vInfo_vxrm <= io_in_bits_vInfo_vxrm;	// @[VDecodeWrapper.scala:128:24]
          bitsReg_vInfo_frm <= io_in_bits_vInfo_frm;	// @[VDecodeWrapper.scala:128:24]
        end
        bitsReg_eewEmulInfo_veewVs2 <= _infoCalc_io_infoAll_veewVs2;	// @[VDecodeWrapper.scala:84:24, :128:24]
        bitsReg_eewEmulInfo_veewVd <= _infoCalc_io_infoAll_veewVd;	// @[VDecodeWrapper.scala:84:24, :128:24]
        bitsReg_eewEmulInfo_emulVs1 <= _infoCalc_io_infoAll_emulVs1;	// @[VDecodeWrapper.scala:84:24, :128:24]
        bitsReg_eewEmulInfo_emulVs2 <= _infoCalc_io_infoAll_emulVs2;	// @[VDecodeWrapper.scala:84:24, :128:24]
        bitsReg_eewEmulInfo_emulVd <= _infoCalc_io_infoAll_emulVd;	// @[VDecodeWrapper.scala:84:24, :128:24]
        bitsReg_floatRed <= bitsIn_floatRed;	// @[VDecodeWrapper.scala:65:52, :128:24]
      end
      if (REG)	// @[VDecodeWrapper.scala:143:15]
        bitsReg_vCtrl_illegal <= _vIllegalInstrn_io_ill_valid;	// @[VDecodeWrapper.scala:96:30, :128:24]
      else	// @[VDecodeWrapper.scala:143:15]
        bitsReg_vCtrl_illegal <= ~fire & bitsReg_vCtrl_illegal;	// @[VDecodeWrapper.scala:128:24, :138:28, :139:14, :140:15]
    end
    REG <= fire;	// @[VDecodeWrapper.scala:138:28, :143:15]
    io_out_bits_vCtrl_illegal_REG <= fire;	// @[VDecodeWrapper.scala:138:28, :150:43]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        bufferReg_inst = _RANDOM_0;	// @[VDecodeWrapper.scala:36:26]
        bufferReg_frs1 = {_RANDOM_1, _RANDOM_2};	// @[VDecodeWrapper.scala:36:26]
        bufferReg_rs1 = {_RANDOM_3, _RANDOM_4};	// @[VDecodeWrapper.scala:36:26]
        bufferReg_rs2 = {_RANDOM_5, _RANDOM_6};	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vl = _RANDOM_7[7:0];	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vstart = _RANDOM_7[14:8];	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vma = _RANDOM_7[15];	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vta = _RANDOM_7[16];	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vsew = _RANDOM_7[19:17];	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vlmul = _RANDOM_7[22:20];	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_vxrm = _RANDOM_7[24:23];	// @[VDecodeWrapper.scala:36:26]
        bufferReg_vInfo_frm = _RANDOM_7[27:25];	// @[VDecodeWrapper.scala:36:26]
        bufferValidReg = _RANDOM_7[28];	// @[VDecodeWrapper.scala:36:26, :37:31]
        validReg = _RANDOM_7[29];	// @[VDecodeWrapper.scala:36:26, :38:25]
        bitsReg_vCtrl_lsrc_0 = {_RANDOM_7[31:30], _RANDOM_8[2:0]};	// @[VDecodeWrapper.scala:36:26, :128:24]
        bitsReg_vCtrl_lsrc_1 = _RANDOM_8[7:3];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_ldest = _RANDOM_8[12:8];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_vm = _RANDOM_8[13];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_funct6 = _RANDOM_8[19:14];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_funct3 = _RANDOM_8[22:20];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_illegal = _RANDOM_8[23];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_lsrcVal_0 = _RANDOM_8[24];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_lsrcVal_1 = _RANDOM_8[25];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_ldestVal = _RANDOM_8[27];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_rdVal = _RANDOM_8[28];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_load = _RANDOM_8[29];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_store = _RANDOM_8[30];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_alu = _RANDOM_9[1];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_mul = _RANDOM_9[2];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_fp = _RANDOM_9[3];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_div = _RANDOM_9[4];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_redu = _RANDOM_9[6];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_mask = _RANDOM_9[7];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_perm = _RANDOM_9[8];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_widen = _RANDOM_9[9];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_widen2 = _RANDOM_9[10];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_narrow = _RANDOM_9[11];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vCtrl_narrow_to_1 = _RANDOM_9[12];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_scalar_opnd_1 = {_RANDOM_9[31:13], _RANDOM_10, _RANDOM_11[12:0]};	// @[VDecodeWrapper.scala:128:24]
        bitsReg_scalar_opnd_2 = {_RANDOM_11[31:13], _RANDOM_12, _RANDOM_13[12:0]};	// @[VDecodeWrapper.scala:128:24]
        bitsReg_float_opnd_1 = {_RANDOM_13[31:13], _RANDOM_14, _RANDOM_15[12:0]};	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vInfo_vl = _RANDOM_15[20:13];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vInfo_vstart = _RANDOM_15[27:21];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vInfo_vma = _RANDOM_15[28];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vInfo_vta = _RANDOM_15[29];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vInfo_vsew = {_RANDOM_15[31:30], _RANDOM_16[0]};	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vInfo_vlmul = _RANDOM_16[3:1];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vInfo_vxrm = _RANDOM_16[5:4];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_vInfo_frm = _RANDOM_16[8:6];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_eewEmulInfo_veewVs2 = _RANDOM_16[14:12];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_eewEmulInfo_veewVd = _RANDOM_16[17:15];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_eewEmulInfo_emulVs1 = _RANDOM_16[30:27];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_eewEmulInfo_emulVs2 = {_RANDOM_16[31], _RANDOM_17[2:0]};	// @[VDecodeWrapper.scala:128:24]
        bitsReg_eewEmulInfo_emulVd = _RANDOM_17[6:3];	// @[VDecodeWrapper.scala:128:24]
        bitsReg_floatRed = _RANDOM_17[8];	// @[VDecodeWrapper.scala:128:24]
        REG = _RANDOM_17[9];	// @[VDecodeWrapper.scala:128:24, :143:15]
        io_out_bits_vCtrl_illegal_REG = _RANDOM_17[10];	// @[VDecodeWrapper.scala:128:24, :150:43]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  VDecode decode (	// @[VDecodeWrapper.scala:62:22]
    .io_in              (bufferValidReg ? bufferReg_inst : io_in_bits_inst),	// @[VDecodeWrapper.scala:36:26, :37:31, :59:17]
    .io_out_lsrc_0      (_decode_io_out_lsrc_0),
    .io_out_lsrc_1      (_decode_io_out_lsrc_1),
    .io_out_ldest       (_decode_io_out_ldest),
    .io_out_vm          (_decode_io_out_vm),
    .io_out_funct6      (_decode_io_out_funct6),
    .io_out_funct3      (_decode_io_out_funct3),
    .io_out_illegal     (_decode_io_out_illegal),
    .io_out_lsrcVal_0   (_decode_io_out_lsrcVal_0),
    .io_out_lsrcVal_1   (_decode_io_out_lsrcVal_1),
    .io_out_lsrcVal_2   (_decode_io_out_lsrcVal_2),
    .io_out_ldestVal    (_decode_io_out_ldestVal),
    .io_out_rdVal       (_decode_io_out_rdVal),
    .io_out_load        (_decode_io_out_load),
    .io_out_store       (_decode_io_out_store),
    .io_out_arith       (_decode_io_out_arith),
    .io_out_alu         (_decode_io_out_alu),
    .io_out_mul         (_decode_io_out_mul),
    .io_out_fp          (_decode_io_out_fp),
    .io_out_div         (_decode_io_out_div),
    .io_out_redu        (_decode_io_out_redu),
    .io_out_mask        (_decode_io_out_mask),
    .io_out_perm        (_decode_io_out_perm),
    .io_out_widen       (_decode_io_out_widen),
    .io_out_widen2      (_decode_io_out_widen2),
    .io_out_narrow      (_decode_io_out_narrow),
    .io_out_narrow_to_1 (_decode_io_out_narrow_to_1)
  );
  VInfoCalc infoCalc (	// @[VDecodeWrapper.scala:84:24]
    .io_ctrl_lsrc_0                              (_decode_io_out_lsrc_0),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_lsrc_1                              (_decode_io_out_lsrc_1),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_funct6                              (_decode_io_out_funct6),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_funct3                              (_decode_io_out_funct3),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_load                                (_decode_io_out_load),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_store                               (_decode_io_out_store),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_alu                                 (_decode_io_out_alu),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_redu                                (_decode_io_out_redu),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_mask                                (_decode_io_out_mask),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_perm                                (_decode_io_out_perm),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_widen                               (_decode_io_out_widen),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_widen2                              (_decode_io_out_widen2),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_narrow                              (_decode_io_out_narrow),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_narrow_to_1                         (_decode_io_out_narrow_to_1),	// @[VDecodeWrapper.scala:62:22]
    .io_csr_vlmul                                (bitsIn_vInfo_vlmul),	// @[VDecodeWrapper.scala:59:17]
    .io_csr_vsew                                 (bitsIn_vInfo_vsew),	// @[VDecodeWrapper.scala:59:17]
    .io_infoAll_veewVs1                          (_infoCalc_io_infoAll_veewVs1),
    .io_infoAll_veewVs2                          (_infoCalc_io_infoAll_veewVs2),
    .io_infoAll_veewVd                           (_infoCalc_io_infoAll_veewVd),
    .io_infoAll_vemulVs1                         (_infoCalc_io_infoAll_vemulVs1),
    .io_infoAll_vemulVs2                         (_infoCalc_io_infoAll_vemulVs2),
    .io_infoAll_vemulVd                          (_infoCalc_io_infoAll_vemulVd),
    .io_infoAll_emulVs1                          (_infoCalc_io_infoAll_emulVs1),
    .io_infoAll_emulVs2                          (_infoCalc_io_infoAll_emulVs2),
    .io_infoAll_emulVd                           (_infoCalc_io_infoAll_emulVd),
    .io_extraInfo_for_VIllegal_ldst              (_infoCalc_io_extraInfo_for_VIllegal_ldst),
    .io_extraInfo_for_VIllegal_ldstCtrl_mask     (_infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_mask),
    .io_extraInfo_for_VIllegal_ldstCtrl_indexed  (_infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_indexed),
    .io_extraInfo_for_VIllegal_ldstCtrl_segment  (_infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_segment),
    .io_extraInfo_for_VIllegal_ldstCtrl_wholeReg (_infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_wholeReg),
    .io_extraInfo_for_VIllegal_vemul_ldst        (_infoCalc_io_extraInfo_for_VIllegal_vemul_ldst),
    .io_extraInfo_for_VIllegal_ext2              (_infoCalc_io_extraInfo_for_VIllegal_ext2),
    .io_extraInfo_for_VIllegal_ext4              (_infoCalc_io_extraInfo_for_VIllegal_ext4),
    .io_extraInfo_for_VIllegal_ext8              (_infoCalc_io_extraInfo_for_VIllegal_ext8),
    .io_extraInfo_for_VIllegal_wholeRegMv        (_infoCalc_io_extraInfo_for_VIllegal_wholeRegMv),
    .io_extraInfo_for_VIllegal_nreg              (_infoCalc_io_extraInfo_for_VIllegal_nreg)
  );
  VIllegalInstrn vIllegalInstrn (	// @[VDecodeWrapper.scala:96:30]
    .clock                                       (clock),
    .io_ctrl_lsrc_0                              (_decode_io_out_lsrc_0),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_lsrc_1                              (_decode_io_out_lsrc_1),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_ldest                               (_decode_io_out_ldest),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_vm                                  (_decode_io_out_vm),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_funct6                              (_decode_io_out_funct6),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_funct3                              (_decode_io_out_funct3),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_illegal                             (_decode_io_out_illegal),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_lsrcVal_0                           (_decode_io_out_lsrcVal_0),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_lsrcVal_1                           (_decode_io_out_lsrcVal_1),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_lsrcVal_2                           (_decode_io_out_lsrcVal_2),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_ldestVal                            (_decode_io_out_ldestVal),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_rdVal                               (_decode_io_out_rdVal),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_load                                (_decode_io_out_load),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_store                               (_decode_io_out_store),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_arith                               (_decode_io_out_arith),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_alu                                 (_decode_io_out_alu),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_fp                                  (_decode_io_out_fp),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_redu                                (_decode_io_out_redu),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_mask                                (_decode_io_out_mask),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_perm                                (_decode_io_out_perm),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_widen                               (_decode_io_out_widen),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_widen2                              (_decode_io_out_widen2),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_narrow                              (_decode_io_out_narrow),	// @[VDecodeWrapper.scala:62:22]
    .io_ctrl_narrow_to_1                         (_decode_io_out_narrow_to_1),	// @[VDecodeWrapper.scala:62:22]
    .io_csr_vstart                               ({1'h0, bufferValidReg ? bufferReg_vInfo_vstart : io_in_bits_vInfo_vstart}),	// @[VDecodeWrapper.scala:36:{26,39}, :37:31, :59:17, :89:26]
    .io_csr_frm                                  (bufferValidReg ? bufferReg_vInfo_frm : io_in_bits_vInfo_frm),	// @[VDecodeWrapper.scala:36:26, :37:31, :59:17]
    .io_csr_vlmul                                (bitsIn_vInfo_vlmul),	// @[VDecodeWrapper.scala:59:17]
    .io_csr_vsew                                 (bitsIn_vInfo_vsew),	// @[VDecodeWrapper.scala:59:17]
    .io_csr_vill                                 (_decode_io_out_illegal),	// @[VDecodeWrapper.scala:62:22]
    .io_infoAll_veewVs1                          (_infoCalc_io_infoAll_veewVs1),	// @[VDecodeWrapper.scala:84:24]
    .io_infoAll_veewVs2                          (_infoCalc_io_infoAll_veewVs2),	// @[VDecodeWrapper.scala:84:24]
    .io_infoAll_veewVd                           (_infoCalc_io_infoAll_veewVd),	// @[VDecodeWrapper.scala:84:24]
    .io_infoAll_vemulVs1                         (_infoCalc_io_infoAll_vemulVs1),	// @[VDecodeWrapper.scala:84:24]
    .io_infoAll_vemulVs2                         (_infoCalc_io_infoAll_vemulVs2),	// @[VDecodeWrapper.scala:84:24]
    .io_infoAll_vemulVd                          (_infoCalc_io_infoAll_vemulVd),	// @[VDecodeWrapper.scala:84:24]
    .io_infoAll_emulVs1                          (_infoCalc_io_infoAll_emulVs1),	// @[VDecodeWrapper.scala:84:24]
    .io_infoAll_emulVs2                          (_infoCalc_io_infoAll_emulVs2),	// @[VDecodeWrapper.scala:84:24]
    .io_infoAll_emulVd                           (_infoCalc_io_infoAll_emulVd),	// @[VDecodeWrapper.scala:84:24]
    .io_validIn                                  (decodeInValid),	// @[VDecodeWrapper.scala:60:18]
    .io_extraInfo_for_VIllegal_ldst              (_infoCalc_io_extraInfo_for_VIllegal_ldst),	// @[VDecodeWrapper.scala:84:24]
    .io_extraInfo_for_VIllegal_ldstCtrl_mask     (_infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_mask),	// @[VDecodeWrapper.scala:84:24]
    .io_extraInfo_for_VIllegal_ldstCtrl_indexed  (_infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_indexed),	// @[VDecodeWrapper.scala:84:24]
    .io_extraInfo_for_VIllegal_ldstCtrl_segment  (_infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_segment),	// @[VDecodeWrapper.scala:84:24]
    .io_extraInfo_for_VIllegal_ldstCtrl_wholeReg (_infoCalc_io_extraInfo_for_VIllegal_ldstCtrl_wholeReg),	// @[VDecodeWrapper.scala:84:24]
    .io_extraInfo_for_VIllegal_vemul_ldst        (_infoCalc_io_extraInfo_for_VIllegal_vemul_ldst),	// @[VDecodeWrapper.scala:84:24]
    .io_extraInfo_for_VIllegal_ext2              (_infoCalc_io_extraInfo_for_VIllegal_ext2),	// @[VDecodeWrapper.scala:84:24]
    .io_extraInfo_for_VIllegal_ext4              (_infoCalc_io_extraInfo_for_VIllegal_ext4),	// @[VDecodeWrapper.scala:84:24]
    .io_extraInfo_for_VIllegal_ext8              (_infoCalc_io_extraInfo_for_VIllegal_ext8),	// @[VDecodeWrapper.scala:84:24]
    .io_extraInfo_for_VIllegal_wholeRegMv        (_infoCalc_io_extraInfo_for_VIllegal_wholeRegMv),	// @[VDecodeWrapper.scala:84:24]
    .io_extraInfo_for_VIllegal_nreg              (_infoCalc_io_extraInfo_for_VIllegal_nreg),	// @[VDecodeWrapper.scala:84:24]
    .io_ill_valid                                (_vIllegalInstrn_io_ill_valid)
  );
  assign io_in_ready = ~bufferValidReg;	// @[VDecodeWrapper.scala:37:31, :46:8]
  assign io_out_valid = validReg;	// @[VDecodeWrapper.scala:38:25]
  assign io_out_bits_vCtrl_lsrc_0 = bitsReg_vCtrl_lsrc_0;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_lsrc_1 = bitsReg_vCtrl_lsrc_1;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_ldest = bitsReg_vCtrl_ldest;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_vm = bitsReg_vCtrl_vm;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_funct6 = bitsReg_vCtrl_funct6;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_funct3 = bitsReg_vCtrl_funct3;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_illegal = _io_out_bits_vCtrl_illegal_output;	// @[VDecodeWrapper.scala:150:35]
  assign io_out_bits_vCtrl_lsrcVal_0 = bitsReg_vCtrl_lsrcVal_0;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_lsrcVal_1 = bitsReg_vCtrl_lsrcVal_1;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_ldestVal = bitsReg_vCtrl_ldestVal;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_rdVal = bitsReg_vCtrl_rdVal;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_load = bitsReg_vCtrl_load;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_store = bitsReg_vCtrl_store;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_alu = bitsReg_vCtrl_alu;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_mul = bitsReg_vCtrl_mul;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_fp = bitsReg_vCtrl_fp;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_div = bitsReg_vCtrl_div;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_redu = bitsReg_vCtrl_redu;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_mask = bitsReg_vCtrl_mask;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_perm = bitsReg_vCtrl_perm;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_widen = bitsReg_vCtrl_widen;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_widen2 = bitsReg_vCtrl_widen2;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_narrow = bitsReg_vCtrl_narrow;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vCtrl_narrow_to_1 = bitsReg_vCtrl_narrow_to_1;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_scalar_opnd_1 = bitsReg_scalar_opnd_1;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_scalar_opnd_2 = bitsReg_scalar_opnd_2;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_float_opnd_1 = bitsReg_float_opnd_1;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vInfo_vl = bitsReg_vInfo_vl;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vInfo_vstart = bitsReg_vInfo_vstart;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vInfo_vma = bitsReg_vInfo_vma;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vInfo_vta = bitsReg_vInfo_vta;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vInfo_vsew = bitsReg_vInfo_vsew;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vInfo_vlmul = bitsReg_vInfo_vlmul;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vInfo_vxrm = bitsReg_vInfo_vxrm;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_vInfo_frm = bitsReg_vInfo_frm;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_eewEmulInfo_veewVs2 = bitsReg_eewEmulInfo_veewVs2;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_eewEmulInfo_veewVd = bitsReg_eewEmulInfo_veewVd;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_eewEmulInfo_emulVs1 = bitsReg_eewEmulInfo_emulVs1;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_eewEmulInfo_emulVs2 = bitsReg_eewEmulInfo_emulVs2;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_eewEmulInfo_emulVd = bitsReg_eewEmulInfo_emulVd;	// @[VDecodeWrapper.scala:128:24]
  assign io_out_bits_floatRed = bitsReg_floatRed;	// @[VDecodeWrapper.scala:128:24]
endmodule

