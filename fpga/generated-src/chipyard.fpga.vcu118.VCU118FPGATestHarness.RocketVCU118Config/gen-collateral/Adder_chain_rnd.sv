// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module Adder_chain_rnd(
  input  [7:0] io_din_0,
               io_din_1,
               io_din_2,
               io_din_3,
               io_din_4,
               io_din_5,
               io_din_6,
               io_din_7,
  input        io_rndInc_0,
               io_rndInc_1,
               io_rndInc_2,
               io_rndInc_3,
               io_rndInc_4,
               io_rndInc_5,
               io_rndInc_6,
               io_rndInc_7,
               io_isNClip,
  input  [3:0] io_sew_oneHot,
  output [7:0] io_dout_0,
               io_dout_1,
               io_dout_2,
               io_dout_3,
               io_dout_4,
               io_dout_5,
               io_dout_6,
               io_dout_7,
  output       io_cout_0,
               io_cout_1,
               io_cout_2,
               io_cout_3,
               io_cout_4,
               io_cout_5,
               io_cout_6,
               io_all_1s_1,
               io_all_1s_2,
               io_all_1s_3,
               io_all_1s_4,
               io_all_1s_5,
               io_all_1s_6,
               io_all_1s_7,
               io_all_0s_1,
               io_all_0s_2,
               io_all_0s_3,
               io_all_0s_4,
               io_all_0s_5,
               io_all_0s_6,
               io_all_0s_7
);

  wire       cin_7;	// @[VFixPoint64b.scala:196:22]
  wire       cin_6;	// @[VFixPoint64b.scala:194:22]
  wire       cin_5;	// @[VFixPoint64b.scala:196:22]
  wire       cin_4;	// @[VFixPoint64b.scala:192:22]
  wire       cin_3;	// @[VFixPoint64b.scala:196:22]
  wire       cin_2;	// @[VFixPoint64b.scala:194:22]
  wire       cin_1;	// @[VFixPoint64b.scala:196:22]
  wire       _io_cout_0_output = (&io_din_0) & io_rndInc_0;	// @[VFixPoint64b.scala:168:22, :169:23]
  wire       _io_cout_1_output = (&io_din_1) & cin_1;	// @[VFixPoint64b.scala:168:22, :169:23, :196:22]
  assign cin_1 = ~io_isNClip & io_sew_oneHot[0] ? io_rndInc_1 : _io_cout_0_output;	// @[VFixPoint64b.scala:169:23, :188:27, :196:22]
  wire       _io_cout_2_output = (&io_din_2) & cin_2;	// @[VFixPoint64b.scala:168:22, :169:23, :194:22]
  wire [1:0] _GEN = io_isNClip ? io_sew_oneHot[2:1] : io_sew_oneHot[3:2];	// @[VFixPoint64b.scala:188:{27,60}]
  assign cin_2 = (|_GEN) ? _io_cout_1_output : io_rndInc_2;	// @[VFixPoint64b.scala:169:23, :188:27, :194:{22,35}]
  wire       _io_cout_3_output = (&io_din_3) & cin_3;	// @[VFixPoint64b.scala:168:22, :169:23, :196:22]
  assign cin_3 = ~io_isNClip & io_sew_oneHot[0] ? io_rndInc_3 : _io_cout_2_output;	// @[VFixPoint64b.scala:169:23, :188:27, :196:22]
  wire       _io_cout_4_output = (&io_din_4) & cin_4;	// @[VFixPoint64b.scala:168:22, :169:23, :192:22]
  assign cin_4 = (io_isNClip ? io_sew_oneHot[2] : io_sew_oneHot[3]) ? _io_cout_3_output : io_rndInc_4;	// @[VFixPoint64b.scala:169:23, :188:{27,60}, :192:22]
  wire       _io_cout_5_output = (&io_din_5) & cin_5;	// @[VFixPoint64b.scala:168:22, :169:23, :196:22]
  assign cin_5 = ~io_isNClip & io_sew_oneHot[0] ? io_rndInc_5 : _io_cout_4_output;	// @[VFixPoint64b.scala:169:23, :188:27, :196:22]
  wire       _io_cout_6_output = (&io_din_6) & cin_6;	// @[VFixPoint64b.scala:168:22, :169:23, :194:22]
  assign cin_6 = (|_GEN) ? _io_cout_5_output : io_rndInc_6;	// @[VFixPoint64b.scala:169:23, :188:27, :194:{22,35}]
  assign cin_7 = ~io_isNClip & io_sew_oneHot[0] ? io_rndInc_7 : _io_cout_6_output;	// @[VFixPoint64b.scala:169:23, :188:27, :196:22]
  assign io_dout_0 = io_din_0 + {7'h0, io_rndInc_0};	// @[VFixPoint64b.scala:167:28]
  assign io_dout_1 = io_din_1 + {7'h0, cin_1};	// @[VFixPoint64b.scala:167:28, :196:22]
  assign io_dout_2 = io_din_2 + {7'h0, cin_2};	// @[VFixPoint64b.scala:167:28, :194:22]
  assign io_dout_3 = io_din_3 + {7'h0, cin_3};	// @[VFixPoint64b.scala:167:28, :196:22]
  assign io_dout_4 = io_din_4 + {7'h0, cin_4};	// @[VFixPoint64b.scala:167:28, :192:22]
  assign io_dout_5 = io_din_5 + {7'h0, cin_5};	// @[VFixPoint64b.scala:167:28, :196:22]
  assign io_dout_6 = io_din_6 + {7'h0, cin_6};	// @[VFixPoint64b.scala:167:28, :194:22]
  assign io_dout_7 = io_din_7 + {7'h0, cin_7};	// @[VFixPoint64b.scala:167:28, :196:22]
  assign io_cout_0 = _io_cout_0_output;	// @[VFixPoint64b.scala:169:23]
  assign io_cout_1 = _io_cout_1_output;	// @[VFixPoint64b.scala:169:23]
  assign io_cout_2 = _io_cout_2_output;	// @[VFixPoint64b.scala:169:23]
  assign io_cout_3 = _io_cout_3_output;	// @[VFixPoint64b.scala:169:23]
  assign io_cout_4 = _io_cout_4_output;	// @[VFixPoint64b.scala:169:23]
  assign io_cout_5 = _io_cout_5_output;	// @[VFixPoint64b.scala:169:23]
  assign io_cout_6 = _io_cout_6_output;	// @[VFixPoint64b.scala:169:23]
  assign io_all_1s_1 = &io_din_1;	// @[VFixPoint64b.scala:168:22]
  assign io_all_1s_2 = &io_din_2;	// @[VFixPoint64b.scala:168:22]
  assign io_all_1s_3 = &io_din_3;	// @[VFixPoint64b.scala:168:22]
  assign io_all_1s_4 = &io_din_4;	// @[VFixPoint64b.scala:168:22]
  assign io_all_1s_5 = &io_din_5;	// @[VFixPoint64b.scala:168:22]
  assign io_all_1s_6 = &io_din_6;	// @[VFixPoint64b.scala:168:22]
  assign io_all_1s_7 = &io_din_7;	// @[VFixPoint64b.scala:168:22]
  assign io_all_0s_1 = io_din_1 == 8'h0;	// @[VFixPoint64b.scala:167:28, :201:33]
  assign io_all_0s_2 = io_din_2 == 8'h0;	// @[VFixPoint64b.scala:167:28, :201:33]
  assign io_all_0s_3 = io_din_3 == 8'h0;	// @[VFixPoint64b.scala:167:28, :201:33]
  assign io_all_0s_4 = io_din_4 == 8'h0;	// @[VFixPoint64b.scala:167:28, :201:33]
  assign io_all_0s_5 = io_din_5 == 8'h0;	// @[VFixPoint64b.scala:167:28, :201:33]
  assign io_all_0s_6 = io_din_6 == 8'h0;	// @[VFixPoint64b.scala:167:28, :201:33]
  assign io_all_0s_7 = io_din_7 == 8'h0;	// @[VFixPoint64b.scala:167:28, :201:33]
endmodule

