// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VInfoCalc(
  input  [4:0] io_ctrl_lsrc_0,
               io_ctrl_lsrc_1,
  input  [5:0] io_ctrl_funct6,
  input  [2:0] io_ctrl_funct3,
  input        io_ctrl_load,
               io_ctrl_store,
               io_ctrl_alu,
               io_ctrl_redu,
               io_ctrl_mask,
               io_ctrl_perm,
               io_ctrl_widen,
               io_ctrl_widen2,
               io_ctrl_narrow,
               io_ctrl_narrow_to_1,
  input  [2:0] io_csr_vlmul,
               io_csr_vsew,
  output [2:0] io_infoAll_veewVs1,
               io_infoAll_veewVs2,
               io_infoAll_veewVd,
               io_infoAll_vemulVs1,
               io_infoAll_vemulVs2,
               io_infoAll_vemulVd,
  output [3:0] io_infoAll_emulVs1,
               io_infoAll_emulVs2,
               io_infoAll_emulVd,
  output       io_extraInfo_for_VIllegal_ldst,
               io_extraInfo_for_VIllegal_ldstCtrl_mask,
               io_extraInfo_for_VIllegal_ldstCtrl_indexed,
               io_extraInfo_for_VIllegal_ldstCtrl_segment,
               io_extraInfo_for_VIllegal_ldstCtrl_wholeReg,
  output [3:0] io_extraInfo_for_VIllegal_vemul_ldst,
  output       io_extraInfo_for_VIllegal_ext2,
               io_extraInfo_for_VIllegal_ext4,
               io_extraInfo_for_VIllegal_ext8,
               io_extraInfo_for_VIllegal_wholeRegMv,
  output [3:0] io_extraInfo_for_VIllegal_nreg
);

  wire       ldstCtrl_wholeReg;	// @[VLsuBundle.scala:74:43]
  wire       ldst = io_ctrl_load | io_ctrl_store;	// @[VInfoCalc.scala:60:24]
  wire       ldstCtrl_unitStride = io_ctrl_funct6[1:0] == 2'h0;	// @[Mux.scala:27:73, VLsuBundle.scala:65:21, :68:28]
  wire       ldstCtrl_mask = io_ctrl_lsrc_1 == 5'hB & ldstCtrl_unitStride;	// @[VLsuBundle.scala:68:28, :69:{24,39}]
  assign ldstCtrl_wholeReg = io_ctrl_lsrc_1 == 5'h8 & ldstCtrl_unitStride;	// @[VLsuBundle.scala:68:28, :74:{28,43}]
  wire [3:0] nfield = {1'h0, io_ctrl_funct6[5:3]} + 4'h1;	// @[VInfoCalc.scala:62:34, VLsuBundle.scala:64:20, :68:28]
  wire [2:0] veew_ldst = {1'h0, io_ctrl_funct3[1:0]};	// @[Cat.scala:33:92, VInfoCalc.scala:64:43, VLsuBundle.scala:68:28]
  wire [3:0] vemul_ldst = {io_csr_vlmul[2], io_csr_vlmul} + {2'h0, io_ctrl_funct3[1:0]} - {1'h0, io_csr_vsew};	// @[Mux.scala:27:73, VInfoCalc.scala:64:43, :65:35, :67:30, VLsuBundle.scala:68:28]
  wire       ext = io_ctrl_funct6 == 6'h12 & io_ctrl_funct3 == 3'h2;	// @[VInfoCalc.scala:71:{25,41,56}]
  wire       ext2 = ext & (&(io_ctrl_lsrc_0[2:1]));	// @[VInfoCalc.scala:71:41, :72:{18,33,39}]
  wire       ext4 = ext & io_ctrl_lsrc_0[2:1] == 2'h2;	// @[VInfoCalc.scala:71:41, :72:33, :73:{18,39}, VLsuBundle.scala:70:25]
  wire       ext8 = ext & io_ctrl_lsrc_0[2:1] == 2'h1;	// @[VInfoCalc.scala:71:41, :72:33, :74:{18,39}]
  wire       wholeRegMv = io_ctrl_funct6 == 6'h27 & io_ctrl_funct3 == 3'h3;	// @[VInfoCalc.scala:76:{32,48,63}, :81:17]
  wire [3:0] nreg = {1'h0, io_ctrl_lsrc_0[2:0]} + 4'h1;	// @[VInfoCalc.scala:62:34, :77:{26,33}, VLsuBundle.scala:68:28]
  wire       perm_vmv_vfmv = io_ctrl_alu & io_ctrl_funct3[0] != io_ctrl_funct3[1] & io_ctrl_funct6 == 6'h10;	// @[Bundle.scala:104:{19,23,33}, VInfoCalc.scala:86:{45,60}]
  wire       mask_onlyOneReg = io_ctrl_mask & ~(io_ctrl_funct6[3:2] == 2'h1 & io_ctrl_lsrc_0[4]);	// @[VInfoCalc.scala:74:39, :87:{35,38,51,58,70,85}]
  wire       gather16 = io_ctrl_funct6 == 6'hE & io_ctrl_funct3 == 3'h0;	// @[VInfoCalc.scala:88:{30,46,61}, :96:13]
  wire [2:0] _GEN = wholeRegMv ? (nreg == 4'h8 ? 3'h3 : nreg[3:1]) : io_csr_vlmul;	// @[VInfoCalc.scala:76:48, :77:33, :81:17, :83:{15,21,40}, :99:27, :100:13, :102:13, VLsuBundle.scala:74:28]
  wire [2:0] vemulVd = ldst ? (ldstCtrl_wholeReg ? (nfield == 4'h8 ? 3'h3 : nfield[3:1]) : ldstCtrl_mask ? 3'h0 : io_ctrl_funct6[0] ? io_csr_vlmul : vemul_ldst[2:0]) : io_ctrl_narrow_to_1 | mask_onlyOneReg | perm_vmv_vfmv | io_ctrl_redu ? 3'h0 : io_ctrl_widen | io_ctrl_widen2 ? io_csr_vlmul + 3'h1 : _GEN;	// @[VInfoCalc.scala:60:24, :62:34, :67:30, :81:{17,25,46}, :86:45, :87:35, :92:15, :93:{13,19,51}, :94:19, :95:{68,82}, :96:13, :97:{26,42}, :98:{13,22}, :99:27, :100:13, :102:13, :110:26, VLsuBundle.scala:65:21, :69:39, :71:24, :74:{28,43}]
  wire       _T_17 = io_ctrl_funct6 == 6'h17;	// @[VInfoCalc.scala:107:65]
  wire [2:0] vemulVs1 = io_ctrl_mask & io_ctrl_funct6[3] | io_ctrl_perm & _T_17 ? 3'h0 : gather16 ? 3'h1 - io_csr_vsew + io_csr_vlmul : io_csr_vlmul;	// @[VInfoCalc.scala:88:46, :96:13, :107:{19,33,37,50,65,82}, :108:14, :109:24, :110:{14,26,33}, :112:14]
  wire       _T_20 = ldst & io_ctrl_funct6[0];	// @[VInfoCalc.scala:60:24, :116:14, VLsuBundle.scala:65:21, :71:24]
  wire [2:0] vemulVs2 = _T_20 ? vemul_ldst[2:0] : io_ctrl_widen2 | io_ctrl_narrow ? io_csr_vlmul + 3'h1 : ext ? io_csr_vlmul - {1'h0, {ext4, ext2} | {2{ext8}}} : io_ctrl_mask | mask_onlyOneReg | perm_vmv_vfmv ? 3'h0 : _GEN;	// @[Mux.scala:27:73, VInfoCalc.scala:67:30, :71:41, :72:18, :73:18, :74:18, :86:45, :87:35, :96:13, :99:27, :100:13, :102:13, :110:26, :116:{14,35}, :117:{14,27}, :118:{27,43}, :119:{14,23}, :120:20, :121:{14,23}, :122:{44,62}, :123:14, :124:27, VLsuBundle.scala:68:28]
  assign io_infoAll_veewVs1 = io_ctrl_mask & io_ctrl_funct6[3] | io_ctrl_perm & _T_17 ? 3'h7 : gather16 ? 3'h1 : io_csr_vsew;	// @[VInfoCalc.scala:88:46, :107:{33,65}, :110:26, :139:12, :148:{19,37,50,82}, :149:13, :150:25, :151:13, :153:13]
  assign io_infoAll_veewVs2 = _T_20 ? veew_ldst : io_ctrl_widen2 | io_ctrl_narrow ? io_csr_vsew + 3'h1 : io_ctrl_mask ? 3'h7 : ext2 ? io_csr_vsew - 3'h1 : ext4 ? io_csr_vsew - 3'h2 : ext8 ? 3'h0 : io_csr_vsew;	// @[Cat.scala:33:92, VInfoCalc.scala:72:18, :73:18, :74:18, :96:13, :110:26, :116:14, :139:12, :157:35, :158:13, :159:{27,43}, :160:{13,21}, :161:26, :162:13, :163:21, :164:{13,21}, :165:21, :166:{13,21}, :167:21, :168:13, :170:13]
  assign io_infoAll_veewVd = ldst ? (ldstCtrl_wholeReg & io_ctrl_store | ldstCtrl_mask ? 3'h0 : io_ctrl_funct6[0] ? io_csr_vsew : veew_ldst) : io_ctrl_narrow_to_1 | mask_onlyOneReg ? 3'h7 : io_ctrl_widen | io_ctrl_widen2 ? io_csr_vsew + 3'h1 : io_csr_vsew;	// @[Cat.scala:33:92, VInfoCalc.scala:60:24, :87:35, :96:13, :110:26, :135:15, :136:{12,18,37,51}, :137:18, :138:{32,52}, :139:12, :140:{26,42}, :141:{12,20}, :143:12, VLsuBundle.scala:65:21, :69:39, :71:24, :74:43]
  assign io_infoAll_vemulVs1 = vemulVs1;	// @[VInfoCalc.scala:107:82, :108:14, :109:24]
  assign io_infoAll_vemulVs2 = vemulVs2;	// @[VInfoCalc.scala:116:35, :117:14, :118:43]
  assign io_infoAll_vemulVd = vemulVd;	// @[VInfoCalc.scala:92:15, :93:13, :95:82]
  assign io_infoAll_emulVs1 = {~(vemulVs1[2]) & vemulVs1[1] & vemulVs1[0], ~(vemulVs1[2]) & vemulVs1[1] & ~(vemulVs1[0]), ~(vemulVs1[2]) & ~(vemulVs1[1]) & vemulVs1[0], ~(vemulVs1[1]) & ~(vemulVs1[0]) | vemulVs1[2]};	// @[Cat.scala:33:92, VInfoCalc.scala:107:82, :108:14, :109:24, VecUtil.scala:26:{14,20,24,27,33,37,45}, :27:{14,27,37}, :28:{14,36,39}, :29:{14,36}]
  assign io_infoAll_emulVs2 = {~(vemulVs2[2]) & vemulVs2[1] & vemulVs2[0], ~(vemulVs2[2]) & vemulVs2[1] & ~(vemulVs2[0]), ~(vemulVs2[2]) & ~(vemulVs2[1]) & vemulVs2[0], ~(vemulVs2[1]) & ~(vemulVs2[0]) | vemulVs2[2]};	// @[Cat.scala:33:92, VInfoCalc.scala:116:35, :117:14, :118:43, VecUtil.scala:26:{14,20,24,27,33,37,45}, :27:{14,27,37}, :28:{14,36,39}, :29:{14,36}]
  assign io_infoAll_emulVd = {~(vemulVd[2]) & vemulVd[1] & vemulVd[0], ~(vemulVd[2]) & vemulVd[1] & ~(vemulVd[0]), ~(vemulVd[2]) & ~(vemulVd[1]) & vemulVd[0], ~(vemulVd[1]) & ~(vemulVd[0]) | vemulVd[2]};	// @[Cat.scala:33:92, VInfoCalc.scala:92:15, :93:13, :95:82, VecUtil.scala:26:{14,20,24,27,33,37,45}, :27:{14,27,37}, :28:{14,36,39}, :29:{14,36}]
  assign io_extraInfo_for_VIllegal_ldst = ldst;	// @[VInfoCalc.scala:60:24]
  assign io_extraInfo_for_VIllegal_ldstCtrl_mask = ldstCtrl_mask;	// @[VLsuBundle.scala:69:39]
  assign io_extraInfo_for_VIllegal_ldstCtrl_indexed = io_ctrl_funct6[0];	// @[VLsuBundle.scala:65:21, :71:24]
  assign io_extraInfo_for_VIllegal_ldstCtrl_segment = (|(io_ctrl_funct6[5:3])) & ~ldstCtrl_wholeReg;	// @[VLsuBundle.scala:64:20, :73:{24,32,35}, :74:43]
  assign io_extraInfo_for_VIllegal_ldstCtrl_wholeReg = ldstCtrl_wholeReg;	// @[VLsuBundle.scala:74:43]
  assign io_extraInfo_for_VIllegal_vemul_ldst = vemul_ldst;	// @[VInfoCalc.scala:67:30]
  assign io_extraInfo_for_VIllegal_ext2 = ext2;	// @[VInfoCalc.scala:72:18]
  assign io_extraInfo_for_VIllegal_ext4 = ext4;	// @[VInfoCalc.scala:73:18]
  assign io_extraInfo_for_VIllegal_ext8 = ext8;	// @[VInfoCalc.scala:74:18]
  assign io_extraInfo_for_VIllegal_wholeRegMv = wholeRegMv;	// @[VInfoCalc.scala:76:48]
  assign io_extraInfo_for_VIllegal_nreg = nreg;	// @[VInfoCalc.scala:77:33]
endmodule

