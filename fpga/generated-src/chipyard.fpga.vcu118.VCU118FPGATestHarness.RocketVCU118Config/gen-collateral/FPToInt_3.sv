// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FPToInt_3(
  input  [63:0] io_a,
  input  [2:0]  io_rm,
  input  [1:0]  io_op,
  output [63:0] io_result,
  output [4:0]  io_fflags
);

  wire        _s1_io_to_s2_raw_a_sign;	// @[FPToInt.scala:188:18]
  wire [10:0] _s1_io_to_s2_raw_a_exp;	// @[FPToInt.scala:188:18]
  wire [52:0] _s1_io_to_s2_raw_a_sig;	// @[FPToInt.scala:188:18]
  wire [2:0]  _s1_io_to_s2_rm;	// @[FPToInt.scala:188:18]
  wire [1:0]  _s1_io_to_s2_op;	// @[FPToInt.scala:188:18]
  wire        _s1_io_to_s2_sel_lpath;	// @[FPToInt.scala:188:18]
  wire        _s1_io_to_s2_exp_of;	// @[FPToInt.scala:188:18]
  wire        _s1_io_to_s2_iv_sel_max;	// @[FPToInt.scala:188:18]
  wire        _s1_io_to_s2_lpath_iv;	// @[FPToInt.scala:188:18]
  wire        _s1_io_to_s2_lpath_of;	// @[FPToInt.scala:188:18]
  wire [3:0]  _s1_io_to_s2_lpath_shamt;	// @[FPToInt.scala:188:18]
  wire [10:0] _s1_io_to_s2_rpath_shamt;	// @[FPToInt.scala:188:18]
  FPToInt_s1_2 s1 (	// @[FPToInt.scala:188:18]
    .io_a                 (io_a),
    .io_rm                (io_rm),
    .io_op                (io_op),
    .io_to_s2_raw_a_sign  (_s1_io_to_s2_raw_a_sign),
    .io_to_s2_raw_a_exp   (_s1_io_to_s2_raw_a_exp),
    .io_to_s2_raw_a_sig   (_s1_io_to_s2_raw_a_sig),
    .io_to_s2_rm          (_s1_io_to_s2_rm),
    .io_to_s2_op          (_s1_io_to_s2_op),
    .io_to_s2_sel_lpath   (_s1_io_to_s2_sel_lpath),
    .io_to_s2_exp_of      (_s1_io_to_s2_exp_of),
    .io_to_s2_iv_sel_max  (_s1_io_to_s2_iv_sel_max),
    .io_to_s2_lpath_iv    (_s1_io_to_s2_lpath_iv),
    .io_to_s2_lpath_of    (_s1_io_to_s2_lpath_of),
    .io_to_s2_lpath_shamt (_s1_io_to_s2_lpath_shamt),
    .io_to_s2_rpath_shamt (_s1_io_to_s2_rpath_shamt)
  );
  FPToInt_s2_2 s2 (	// @[FPToInt.scala:189:18]
    .io_s1_raw_a_sign  (_s1_io_to_s2_raw_a_sign),	// @[FPToInt.scala:188:18]
    .io_s1_raw_a_exp   (_s1_io_to_s2_raw_a_exp),	// @[FPToInt.scala:188:18]
    .io_s1_raw_a_sig   (_s1_io_to_s2_raw_a_sig),	// @[FPToInt.scala:188:18]
    .io_s1_rm          (_s1_io_to_s2_rm),	// @[FPToInt.scala:188:18]
    .io_s1_op          (_s1_io_to_s2_op),	// @[FPToInt.scala:188:18]
    .io_s1_sel_lpath   (_s1_io_to_s2_sel_lpath),	// @[FPToInt.scala:188:18]
    .io_s1_exp_of      (_s1_io_to_s2_exp_of),	// @[FPToInt.scala:188:18]
    .io_s1_iv_sel_max  (_s1_io_to_s2_iv_sel_max),	// @[FPToInt.scala:188:18]
    .io_s1_lpath_iv    (_s1_io_to_s2_lpath_iv),	// @[FPToInt.scala:188:18]
    .io_s1_lpath_of    (_s1_io_to_s2_lpath_of),	// @[FPToInt.scala:188:18]
    .io_s1_lpath_shamt (_s1_io_to_s2_lpath_shamt),	// @[FPToInt.scala:188:18]
    .io_s1_rpath_shamt (_s1_io_to_s2_rpath_shamt),	// @[FPToInt.scala:188:18]
    .io_result         (io_result),
    .io_fflags         (io_fflags)
  );
endmodule

