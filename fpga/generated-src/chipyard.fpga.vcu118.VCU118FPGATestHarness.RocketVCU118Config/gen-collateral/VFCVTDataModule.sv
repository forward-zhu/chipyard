// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VFCVTDataModule(
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_vs2,
  input  [7:0]  io_in_bits_prestart,
                io_in_bits_mask,
                io_in_bits_tail,
  input  [4:0]  io_in_bits_uop_ctrl_lsrc_0,
                io_in_bits_uop_ctrl_lsrc_1,
                io_in_bits_uop_ctrl_ldest,
  input         io_in_bits_uop_ctrl_vm,
  input  [5:0]  io_in_bits_uop_ctrl_funct6,
  input  [2:0]  io_in_bits_uop_ctrl_funct3,
  input         io_in_bits_uop_ctrl_widen,
                io_in_bits_uop_ctrl_widen2,
                io_in_bits_uop_ctrl_narrow,
                io_in_bits_uop_ctrl_narrow_to_1,
  input  [6:0]  io_in_bits_uop_info_vstart,
  input  [7:0]  io_in_bits_uop_info_vl,
  input  [1:0]  io_in_bits_uop_info_vxrm,
  input  [2:0]  io_in_bits_uop_info_frm,
                io_in_bits_uop_info_vlmul,
                io_in_bits_uop_info_vsew,
  input         io_in_bits_uop_info_ma,
                io_in_bits_uop_info_ta,
  input  [2:0]  io_in_bits_uop_info_destEew,
                io_in_bits_uop_expdIdx,
  input         io_in_bits_uop_expdEnd,
                io_in_bits_uop_sysUop_robIdx_flag,
  input  [7:0]  io_in_bits_uop_sysUop_robIdx_value,
  input  [63:0] io_in_bits_uop_maskKeep,
                io_in_bits_uop_maskOff,
  input         io_in_bits_uop_vfpCtrl_cvtSigned,
  input  [2:0]  io_in_bits_uop_vfpCtrl_cvtCmd,
  input  [1:0]  io_in_bits_uop_vfpCtrl_cvtRm,
  input         io_in_bits_uop_typeTag,
                io_out_ready,
  output        io_in_ready,
                io_out_valid,
  output [63:0] io_out_bits_vd,
  output [4:0]  io_out_bits_fflags,
                io_out_bits_uop_ctrl_lsrc_0,
                io_out_bits_uop_ctrl_lsrc_1,
                io_out_bits_uop_ctrl_ldest,
  output        io_out_bits_uop_ctrl_vm,
  output [5:0]  io_out_bits_uop_ctrl_funct6,
  output [2:0]  io_out_bits_uop_ctrl_funct3,
  output        io_out_bits_uop_ctrl_widen,
                io_out_bits_uop_ctrl_widen2,
                io_out_bits_uop_ctrl_narrow,
                io_out_bits_uop_ctrl_narrow_to_1,
  output [6:0]  io_out_bits_uop_info_vstart,
  output [7:0]  io_out_bits_uop_info_vl,
  output [1:0]  io_out_bits_uop_info_vxrm,
  output [2:0]  io_out_bits_uop_info_frm,
                io_out_bits_uop_info_vlmul,
                io_out_bits_uop_info_vsew,
  output        io_out_bits_uop_info_ma,
                io_out_bits_uop_info_ta,
  output [2:0]  io_out_bits_uop_info_destEew,
                io_out_bits_uop_expdIdx,
  output        io_out_bits_uop_expdEnd,
                io_out_bits_uop_sysUop_robIdx_flag,
  output [7:0]  io_out_bits_uop_sysUop_robIdx_value,
  output [63:0] io_out_bits_uop_maskKeep,
                io_out_bits_uop_maskOff
);

  wire        _WIRE_1;	// @[VFPUSubModule.scala:70:35]
  wire [63:0] _i2d_io_result;	// @[VFCVT.scala:149:19]
  wire [4:0]  _i2d_io_fflags;	// @[VFCVT.scala:149:19]
  wire [31:0] _i2sX2_io_result;	// @[VFCVT.scala:147:21]
  wire [4:0]  _i2sX2_io_fflags;	// @[VFCVT.scala:147:21]
  wire [31:0] _i2sX1_io_result;	// @[VFCVT.scala:146:21]
  wire [4:0]  _i2sX1_io_fflags;	// @[VFCVT.scala:146:21]
  wire [63:0] _s2iX2_16_io_result;	// @[VFCVT.scala:114:24]
  wire [4:0]  _s2iX2_16_io_fflags;	// @[VFCVT.scala:114:24]
  wire [63:0] _s2iX1_16_io_result;	// @[VFCVT.scala:113:24]
  wire [4:0]  _s2iX1_16_io_fflags;	// @[VFCVT.scala:113:24]
  wire [63:0] _d2i_io_result;	// @[VFCVT.scala:96:19]
  wire [4:0]  _d2i_io_fflags;	// @[VFCVT.scala:96:19]
  wire [63:0] _s2iX2_io_result;	// @[VFCVT.scala:94:21]
  wire [4:0]  _s2iX2_io_fflags;	// @[VFCVT.scala:94:21]
  wire [63:0] _s2iX1_io_result;	// @[VFCVT.scala:93:21]
  wire [4:0]  _s2iX1_io_fflags;	// @[VFCVT.scala:93:21]
  wire [31:0] _d2s_io_result;	// @[VFCVT.scala:78:19]
  wire [4:0]  _d2s_io_fflags;	// @[VFCVT.scala:78:19]
  wire [63:0] _s2d_io_result;	// @[VFCVT.scala:68:19]
  wire [4:0]  _s2d_io_fflags;	// @[VFCVT.scala:68:19]
  reg         REG;	// @[VFPUSubModule.scala:59:60]
  reg         REG_1;	// @[VFPUSubModule.scala:59:60]
  reg  [4:0]  uop_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  uop_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  uop_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  reg         uop_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  reg  [5:0]  uop_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  reg         uop_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  reg         uop_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  reg         uop_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  reg         uop_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  reg  [6:0]  uop_info_vstart;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]  uop_info_vl;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]  uop_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_info_frm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_info_vsew;	// @[VFPUSubModule.scala:63:57]
  reg         uop_info_ma;	// @[VFPUSubModule.scala:63:57]
  reg         uop_info_ta;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_info_destEew;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_expdIdx;	// @[VFPUSubModule.scala:63:57]
  reg         uop_expdEnd;	// @[VFPUSubModule.scala:63:57]
  reg         uop_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]  uop_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0] uop_maskKeep;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0] uop_maskOff;	// @[VFPUSubModule.scala:63:57]
  reg         uop_vfpCtrl_cvtSigned;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_vfpCtrl_cvtCmd;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]  uop_vfpCtrl_cvtRm;	// @[VFPUSubModule.scala:63:57]
  reg         uop_typeTag;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  uopReg_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  uopReg_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  uopReg_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  reg         uopReg_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  reg  [5:0]  uopReg_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uopReg_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  reg         uopReg_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  reg         uopReg_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  reg         uopReg_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  reg         uopReg_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  reg  [6:0]  uopReg_info_vstart;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]  uopReg_info_vl;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]  uopReg_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uopReg_info_frm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uopReg_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uopReg_info_vsew;	// @[VFPUSubModule.scala:63:57]
  reg         uopReg_info_ma;	// @[VFPUSubModule.scala:63:57]
  reg         uopReg_info_ta;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uopReg_info_destEew;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uopReg_expdIdx;	// @[VFPUSubModule.scala:63:57]
  reg         uopReg_expdEnd;	// @[VFPUSubModule.scala:63:57]
  reg         uopReg_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]  uopReg_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0] uopReg_maskKeep;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0] uopReg_maskOff;	// @[VFPUSubModule.scala:63:57]
  wire        _WIRE = ~REG | _WIRE_1;	// @[VFPUSubModule.scala:59:60, :70:{18,35}]
  assign _WIRE_1 = ~REG_1 | io_out_ready;	// @[VFPUSubModule.scala:59:60, :70:{18,35}]
  reg  [63:0] src;	// @[Reg.scala:19:16]
  reg         eleActives_0;	// @[Reg.scala:19:16]
  reg         eleActives_1;	// @[Reg.scala:19:16]
  reg         eleActives16_0_0;	// @[Reg.scala:19:16]
  reg         eleActives16_0_1;	// @[Reg.scala:19:16]
  reg         eleActives16_1_0;	// @[Reg.scala:19:16]
  reg         eleActives16_1_1;	// @[Reg.scala:19:16]
  wire        _xu162f_T_4 = uop_info_vsew == 3'h1;	// @[VFCVT.scala:90:77, :101:21, VFPUSubModule.scala:63:57]
  wire [2:0]  _s2iX2_16_io_rm_T = uop_vfpCtrl_cvtRm[1] ? 3'h1 : uop_info_frm;	// @[VFCVT.scala:61:25, :101:21, VFPUSubModule.scala:63:57]
  wire [1:0]  _s2iX2_16_io_op_T = {uop_ctrl_widen, uop_vfpCtrl_cvtSigned};	// @[Cat.scala:33:92, VFPUSubModule.scala:63:57]
  wire        x162f = uop_vfpCtrl_cvtSigned & uop_vfpCtrl_cvtCmd[2] & uop_ctrl_widen & _xu162f_T_4;	// @[VFCVT.scala:90:77, :151:{44,66}, VFPUSubModule.scala:63:57]
  wire        _i2fFlagOut_T_2 = x162f | ~uop_vfpCtrl_cvtSigned & uop_vfpCtrl_cvtCmd[2] & uop_ctrl_widen & _xu162f_T_4;	// @[VFCVT.scala:90:77, :91:18, :151:{44,66}, :152:68, :164:29, VFPUSubModule.scala:63:57]
  reg  [31:0] narrowBuf_0;	// @[VFCVT.scala:189:22]
  reg  [31:0] narrowBuf_1;	// @[VFCVT.scala:189:22]
  reg  [4:0]  narrowFlagBuf;	// @[VFCVT.scala:190:26]
  reg  [63:0] nonNarrowOutReg;	// @[Reg.scala:19:16]
  reg  [4:0]  nonNarrowFlagOutReg;	// @[Reg.scala:19:16]
  wire [4:0]  s2ifflags_0 = _s2iX1_io_fflags & {5{eleActives_0}};	// @[Bitwise.scala:77:12, Reg.scala:19:16, VFCVT.scala:93:21, :132:74]
  wire [4:0]  s2ifflags_1 = _s2iX2_io_fflags & {5{eleActives_1}};	// @[Bitwise.scala:77:12, Reg.scala:19:16, VFCVT.scala:94:21, :132:74]
  wire        _d2sNarrowFlag_T_1 = uop_expdIdx[0] ? eleActives_1 : eleActives_0;	// @[Reg.scala:19:16, VFCVT.scala:72:31, :86:30, VFPUSubModule.scala:63:57]
  wire        _eleActives16_1_T_16 = io_in_valid & _WIRE;	// @[VFPUSubModule.scala:70:35, :88:49]
  wire        _nonNarrowFlagOutReg_T_4 = REG & _WIRE_1;	// @[VFPUSubModule.scala:59:60, :70:35, :88:49]
  wire        _d2ifflags_T = uop_vfpCtrl_cvtSigned & uop_vfpCtrl_cvtCmd[1] & uop_ctrl_narrow & _xu162f_T_4 | ~uop_vfpCtrl_cvtSigned & uop_vfpCtrl_cvtCmd[1] & uop_ctrl_narrow & _xu162f_T_4;	// @[VFCVT.scala:90:{46,69,77}, :91:{18,71}, :131:34, VFPUSubModule.scala:63:57]
  wire [31:0] _GEN = {_s2iX2_16_io_result[15:0], _s2iX1_16_io_result[15:0]};	// @[Cat.scala:33:92, VFCVT.scala:113:24, :114:24, :131:{80,107}]
  wire [4:0]  _d2ifflags_T_1 = _s2iX1_16_io_fflags & (uop_expdIdx[0] ? {5{eleActives16_1_0}} : {5{eleActives16_0_0}}) | _s2iX2_16_io_fflags & (uop_expdIdx[0] ? {5{eleActives16_1_1}} : {5{eleActives16_0_1}});	// @[Bitwise.scala:77:12, Reg.scala:19:16, VFCVT.scala:72:31, :113:24, :114:24, :133:{82,87}, :134:65, VFPUSubModule.scala:63:57]
  wire [4:0]  _d2ifflags_T_8 = _d2i_io_fflags & (uop_expdIdx[0] ? {5{eleActives_1}} : {5{eleActives_0}});	// @[Bitwise.scala:77:12, Reg.scala:19:16, VFCVT.scala:72:31, :96:19, :134:{85,90}, VFPUSubModule.scala:63:57]
  wire        _T_28 = _nonNarrowFlagOutReg_T_4 & uop_ctrl_narrow;	// @[VFCVT.scala:206:21, VFPUSubModule.scala:63:57, :88:49]
  always @(posedge clock) begin
    if (reset) begin
      REG <= 1'h0;	// @[VFPUSubModule.scala:59:60]
      REG_1 <= 1'h0;	// @[VFPUSubModule.scala:59:60]
    end
    else begin
      if (_eleActives16_1_T_16)	// @[VFPUSubModule.scala:88:49]
        REG <= io_in_valid;	// @[VFPUSubModule.scala:59:60]
      else	// @[VFPUSubModule.scala:88:49]
        REG <= ~_WIRE_1 & REG;	// @[VFPUSubModule.scala:59:60, :70:35, :77:41, :78:19]
      if (_nonNarrowFlagOutReg_T_4)	// @[VFPUSubModule.scala:88:49]
        REG_1 <= REG;	// @[VFPUSubModule.scala:59:60]
      else	// @[VFPUSubModule.scala:88:49]
        REG_1 <= ~io_out_ready & REG_1;	// @[VFPUSubModule.scala:59:60, :77:41, :78:19]
    end
    if (_eleActives16_1_T_16) begin	// @[VFPUSubModule.scala:88:49]
      uop_ctrl_lsrc_0 <= io_in_bits_uop_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_lsrc_1 <= io_in_bits_uop_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_ldest <= io_in_bits_uop_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_vm <= io_in_bits_uop_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_funct6 <= io_in_bits_uop_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_funct3 <= io_in_bits_uop_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_widen <= io_in_bits_uop_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_widen2 <= io_in_bits_uop_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_narrow <= io_in_bits_uop_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_narrow_to_1 <= io_in_bits_uop_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
      uop_info_vstart <= io_in_bits_uop_info_vstart;	// @[VFPUSubModule.scala:63:57]
      uop_info_vl <= io_in_bits_uop_info_vl;	// @[VFPUSubModule.scala:63:57]
      uop_info_vxrm <= io_in_bits_uop_info_vxrm;	// @[VFPUSubModule.scala:63:57]
      uop_info_frm <= io_in_bits_uop_info_frm;	// @[VFPUSubModule.scala:63:57]
      uop_info_vlmul <= io_in_bits_uop_info_vlmul;	// @[VFPUSubModule.scala:63:57]
      uop_info_vsew <= io_in_bits_uop_info_vsew;	// @[VFPUSubModule.scala:63:57]
      uop_info_ma <= io_in_bits_uop_info_ma;	// @[VFPUSubModule.scala:63:57]
      uop_info_ta <= io_in_bits_uop_info_ta;	// @[VFPUSubModule.scala:63:57]
      uop_info_destEew <= io_in_bits_uop_info_destEew;	// @[VFPUSubModule.scala:63:57]
      uop_expdIdx <= io_in_bits_uop_expdIdx;	// @[VFPUSubModule.scala:63:57]
      uop_expdEnd <= io_in_bits_uop_expdEnd;	// @[VFPUSubModule.scala:63:57]
      uop_sysUop_robIdx_flag <= io_in_bits_uop_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
      uop_sysUop_robIdx_value <= io_in_bits_uop_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
      uop_maskKeep <= io_in_bits_uop_maskKeep;	// @[VFPUSubModule.scala:63:57]
      uop_maskOff <= io_in_bits_uop_maskOff;	// @[VFPUSubModule.scala:63:57]
      uop_vfpCtrl_cvtSigned <= io_in_bits_uop_vfpCtrl_cvtSigned;	// @[VFPUSubModule.scala:63:57]
      uop_vfpCtrl_cvtCmd <= io_in_bits_uop_vfpCtrl_cvtCmd;	// @[VFPUSubModule.scala:63:57]
      uop_vfpCtrl_cvtRm <= io_in_bits_uop_vfpCtrl_cvtRm;	// @[VFPUSubModule.scala:63:57]
      uop_typeTag <= io_in_bits_uop_typeTag;	// @[VFPUSubModule.scala:63:57]
      src <= io_in_bits_vs2;	// @[Reg.scala:19:16]
      eleActives_0 <= ~(io_in_bits_prestart[0]) & ~(io_in_bits_tail[0]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[0]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      eleActives_1 <= ~(io_in_bits_prestart[4]) & ~(io_in_bits_tail[4]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[4]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      eleActives16_0_0 <= ~(io_in_bits_prestart[0]) & ~(io_in_bits_tail[0]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[0]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      eleActives16_0_1 <= ~(io_in_bits_prestart[2]) & ~(io_in_bits_tail[2]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[2]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      eleActives16_1_0 <= ~(io_in_bits_prestart[4]) & ~(io_in_bits_tail[4]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[4]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      eleActives16_1_1 <= ~(io_in_bits_prestart[6]) & ~(io_in_bits_tail[6]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[6]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
    end
    if (_nonNarrowFlagOutReg_T_4) begin	// @[VFPUSubModule.scala:88:49]
      uopReg_ctrl_lsrc_0 <= uop_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
      uopReg_ctrl_lsrc_1 <= uop_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
      uopReg_ctrl_ldest <= uop_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
      uopReg_ctrl_vm <= uop_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
      uopReg_ctrl_funct6 <= uop_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
      uopReg_ctrl_funct3 <= uop_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
      uopReg_ctrl_widen <= uop_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
      uopReg_ctrl_widen2 <= uop_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
      uopReg_ctrl_narrow <= uop_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
      uopReg_ctrl_narrow_to_1 <= uop_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
      uopReg_info_vstart <= uop_info_vstart;	// @[VFPUSubModule.scala:63:57]
      uopReg_info_vl <= uop_info_vl;	// @[VFPUSubModule.scala:63:57]
      uopReg_info_vxrm <= uop_info_vxrm;	// @[VFPUSubModule.scala:63:57]
      uopReg_info_frm <= uop_info_frm;	// @[VFPUSubModule.scala:63:57]
      uopReg_info_vlmul <= uop_info_vlmul;	// @[VFPUSubModule.scala:63:57]
      uopReg_info_vsew <= uop_info_vsew;	// @[VFPUSubModule.scala:63:57]
      uopReg_info_ma <= uop_info_ma;	// @[VFPUSubModule.scala:63:57]
      uopReg_info_ta <= uop_info_ta;	// @[VFPUSubModule.scala:63:57]
      uopReg_info_destEew <= uop_info_destEew;	// @[VFPUSubModule.scala:63:57]
      uopReg_expdIdx <= uop_expdIdx;	// @[VFPUSubModule.scala:63:57]
      uopReg_expdEnd <= uop_expdEnd;	// @[VFPUSubModule.scala:63:57]
      uopReg_sysUop_robIdx_flag <= uop_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
      uopReg_sysUop_robIdx_value <= uop_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
      uopReg_maskKeep <= uop_maskKeep;	// @[VFPUSubModule.scala:63:57]
      uopReg_maskOff <= uop_maskOff;	// @[VFPUSubModule.scala:63:57]
      if (uop_vfpCtrl_cvtCmd[0]) begin	// @[VFCVT.scala:47:29, VFPUSubModule.scala:63:57]
        nonNarrowOutReg <= _s2d_io_result;	// @[Reg.scala:19:16, VFCVT.scala:68:19]
        nonNarrowFlagOutReg <= _s2d_io_fflags & (uop_expdIdx[0] ? {5{eleActives_1}} : {5{eleActives_0}});	// @[Bitwise.scala:77:12, Reg.scala:19:16, VFCVT.scala:68:19, :72:31, :75:{34,39}, VFPUSubModule.scala:63:57]
      end
      else if (uop_vfpCtrl_cvtCmd[2]) begin	// @[VFCVT.scala:151:44, VFPUSubModule.scala:63:57]
        if (~uop_typeTag & ~uop_ctrl_widen | _i2fFlagOut_T_2)	// @[VFCVT.scala:59:34, :164:29, :179:18, :182:{34,54}, VFPUSubModule.scala:63:57]
          nonNarrowOutReg <= {_i2sX2_io_result, _i2sX1_io_result};	// @[Cat.scala:33:92, Reg.scala:19:16, VFCVT.scala:146:21, :147:21]
        else	// @[VFCVT.scala:182:54]
          nonNarrowOutReg <= _i2d_io_result;	// @[Reg.scala:19:16, VFCVT.scala:149:19]
        if (~uop_typeTag & ~uop_ctrl_widen | _i2fFlagOut_T_2)	// @[VFCVT.scala:59:34, :164:29, :179:18, :186:{38,58}, VFPUSubModule.scala:63:57]
          nonNarrowFlagOutReg <= _i2sX1_io_fflags & {5{eleActives_0}} | _i2sX2_io_fflags & {5{eleActives_1}};	// @[Bitwise.scala:77:12, Reg.scala:19:16, VFCVT.scala:146:21, :147:21, :183:74, :186:99]
        else	// @[VFCVT.scala:186:58]
          nonNarrowFlagOutReg <= _i2d_io_fflags & (uop_expdIdx[0] ? {5{eleActives_1}} : {5{eleActives_0}});	// @[Bitwise.scala:77:12, Reg.scala:19:16, VFCVT.scala:72:31, :149:19, :184:{33,38}, VFPUSubModule.scala:63:57]
      end
      else if (uop_typeTag) begin	// @[VFPUSubModule.scala:63:57]
        nonNarrowOutReg <= _d2i_io_result;	// @[Reg.scala:19:16, VFCVT.scala:96:19]
        if (_d2ifflags_T)	// @[VFCVT.scala:131:34]
          nonNarrowFlagOutReg <= _d2ifflags_T_1;	// @[Reg.scala:19:16, VFCVT.scala:134:65]
        else	// @[VFCVT.scala:131:34]
          nonNarrowFlagOutReg <= _d2ifflags_T_8;	// @[Reg.scala:19:16, VFCVT.scala:134:85]
      end
      else if (uop_ctrl_widen) begin	// @[VFPUSubModule.scala:63:57]
        if (uop_expdIdx[0]) begin	// @[VFCVT.scala:72:31, VFPUSubModule.scala:63:57]
          nonNarrowOutReg <= _s2iX2_io_result;	// @[Reg.scala:19:16, VFCVT.scala:94:21]
          nonNarrowFlagOutReg <= s2ifflags_1;	// @[Reg.scala:19:16, VFCVT.scala:132:74]
        end
        else begin	// @[VFCVT.scala:72:31]
          nonNarrowOutReg <= _s2iX1_io_result;	// @[Reg.scala:19:16, VFCVT.scala:93:21]
          nonNarrowFlagOutReg <= s2ifflags_0;	// @[Reg.scala:19:16, VFCVT.scala:132:74]
        end
      end
      else begin	// @[VFPUSubModule.scala:63:57]
        nonNarrowOutReg <= {_s2iX2_io_result[31:0], _s2iX1_io_result[31:0]};	// @[Cat.scala:33:92, Reg.scala:19:16, VFCVT.scala:93:21, :94:21, :128:{29,55}]
        nonNarrowFlagOutReg <= s2ifflags_0 | s2ifflags_1;	// @[Reg.scala:19:16, VFCVT.scala:132:74, :138:24]
      end
    end
    if (~_T_28 | uop_expdIdx[0]) begin	// @[VFCVT.scala:72:31, :189:22, :206:{21,41}, :208:26, VFPUSubModule.scala:63:57]
    end
    else if (uop_vfpCtrl_cvtCmd[0])	// @[VFCVT.scala:47:29, VFPUSubModule.scala:63:57]
      narrowBuf_0 <= _d2s_io_result;	// @[VFCVT.scala:78:19, :189:22]
    else if (uop_vfpCtrl_cvtCmd[1]) begin	// @[VFCVT.scala:90:46, VFPUSubModule.scala:63:57]
      if (_d2ifflags_T)	// @[VFCVT.scala:131:34]
        narrowBuf_0 <= _GEN;	// @[Cat.scala:33:92, VFCVT.scala:189:22]
      else	// @[VFCVT.scala:131:34]
        narrowBuf_0 <= _d2i_io_result[31:0];	// @[VFCVT.scala:96:19, :131:135, :189:22]
    end
    else if (uop_vfpCtrl_cvtCmd[2])	// @[VFCVT.scala:151:44, VFPUSubModule.scala:63:57]
      narrowBuf_0 <= _i2sX1_io_result;	// @[VFCVT.scala:146:21, :189:22]
    else	// @[VFCVT.scala:151:44]
      narrowBuf_0 <= _d2s_io_result;	// @[VFCVT.scala:78:19, :189:22]
    if (_T_28 & uop_expdIdx[0]) begin	// @[VFCVT.scala:72:31, :189:22, :206:{21,41}, :208:26, :209:20, VFPUSubModule.scala:63:57]
      if (uop_vfpCtrl_cvtCmd[0])	// @[VFCVT.scala:47:29, VFPUSubModule.scala:63:57]
        narrowBuf_1 <= _d2s_io_result;	// @[VFCVT.scala:78:19, :189:22]
      else if (uop_vfpCtrl_cvtCmd[1]) begin	// @[VFCVT.scala:90:46, VFPUSubModule.scala:63:57]
        if (_d2ifflags_T)	// @[VFCVT.scala:131:34]
          narrowBuf_1 <= _GEN;	// @[Cat.scala:33:92, VFCVT.scala:189:22]
        else	// @[VFCVT.scala:131:34]
          narrowBuf_1 <= _d2i_io_result[31:0];	// @[VFCVT.scala:96:19, :131:135, :189:22]
      end
      else if (uop_vfpCtrl_cvtCmd[2])	// @[VFCVT.scala:151:44, VFPUSubModule.scala:63:57]
        narrowBuf_1 <= _i2sX1_io_result;	// @[VFCVT.scala:146:21, :189:22]
      else	// @[VFCVT.scala:151:44]
        narrowBuf_1 <= _d2s_io_result;	// @[VFCVT.scala:78:19, :189:22]
    end
    if (_T_28) begin	// @[VFCVT.scala:206:21]
      if (uop_vfpCtrl_cvtCmd[0]) begin	// @[VFCVT.scala:47:29, VFPUSubModule.scala:63:57]
        if (_d2sNarrowFlag_T_1)	// @[VFCVT.scala:86:30]
          narrowFlagBuf <= _d2s_io_fflags;	// @[VFCVT.scala:78:19, :190:26]
        else	// @[VFCVT.scala:86:30]
          narrowFlagBuf <= 5'h0;	// @[Bitwise.scala:77:12, VFCVT.scala:190:26]
      end
      else if (uop_vfpCtrl_cvtCmd[1]) begin	// @[VFCVT.scala:90:46, VFPUSubModule.scala:63:57]
        if (_d2ifflags_T)	// @[VFCVT.scala:131:34]
          narrowFlagBuf <= _d2ifflags_T_1;	// @[VFCVT.scala:134:65, :190:26]
        else	// @[VFCVT.scala:131:34]
          narrowFlagBuf <= _d2ifflags_T_8;	// @[VFCVT.scala:134:85, :190:26]
      end
      else if (uop_vfpCtrl_cvtCmd[2])	// @[VFCVT.scala:151:44, VFPUSubModule.scala:63:57]
        narrowFlagBuf <= _i2sX1_io_fflags & (uop_expdIdx[0] ? {5{eleActives_1}} : {5{eleActives_0}});	// @[Bitwise.scala:77:12, Reg.scala:19:16, VFCVT.scala:72:31, :146:21, :185:{39,44}, :190:26, VFPUSubModule.scala:63:57]
      else if (_d2sNarrowFlag_T_1)	// @[VFCVT.scala:86:30]
        narrowFlagBuf <= _d2s_io_fflags;	// @[VFCVT.scala:78:19, :190:26]
      else	// @[VFCVT.scala:86:30]
        narrowFlagBuf <= 5'h0;	// @[Bitwise.scala:77:12, VFCVT.scala:190:26]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        REG = _RANDOM_0[0];	// @[VFPUSubModule.scala:59:60]
        REG_1 = _RANDOM_0[1];	// @[VFPUSubModule.scala:59:60]
        uop_ctrl_lsrc_0 = _RANDOM_0[6:2];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_lsrc_1 = _RANDOM_0[11:7];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_ldest = _RANDOM_0[16:12];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_vm = _RANDOM_0[17];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_funct6 = _RANDOM_0[23:18];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_funct3 = _RANDOM_0[26:24];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_widen = _RANDOM_0[27];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_widen2 = _RANDOM_0[28];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_narrow = _RANDOM_0[29];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_narrow_to_1 = _RANDOM_0[30];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_info_vstart = {_RANDOM_0[31], _RANDOM_1[5:0]};	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_info_vl = _RANDOM_1[13:6];	// @[VFPUSubModule.scala:63:57]
        uop_info_vxrm = _RANDOM_1[15:14];	// @[VFPUSubModule.scala:63:57]
        uop_info_frm = _RANDOM_1[18:16];	// @[VFPUSubModule.scala:63:57]
        uop_info_vlmul = _RANDOM_1[21:19];	// @[VFPUSubModule.scala:63:57]
        uop_info_vsew = _RANDOM_1[24:22];	// @[VFPUSubModule.scala:63:57]
        uop_info_ma = _RANDOM_1[25];	// @[VFPUSubModule.scala:63:57]
        uop_info_ta = _RANDOM_1[26];	// @[VFPUSubModule.scala:63:57]
        uop_info_destEew = _RANDOM_1[29:27];	// @[VFPUSubModule.scala:63:57]
        uop_expdIdx = {_RANDOM_1[31:30], _RANDOM_2[0]};	// @[VFPUSubModule.scala:63:57]
        uop_expdEnd = _RANDOM_2[1];	// @[VFPUSubModule.scala:63:57]
        uop_sysUop_robIdx_flag = _RANDOM_2[3];	// @[VFPUSubModule.scala:63:57]
        uop_sysUop_robIdx_value = _RANDOM_2[11:4];	// @[VFPUSubModule.scala:63:57]
        uop_maskKeep = {_RANDOM_2[31:12], _RANDOM_3, _RANDOM_4[11:0]};	// @[VFPUSubModule.scala:63:57]
        uop_maskOff = {_RANDOM_4[31:12], _RANDOM_5, _RANDOM_6[11:0]};	// @[VFPUSubModule.scala:63:57]
        uop_vfpCtrl_cvtSigned = _RANDOM_6[19];	// @[VFPUSubModule.scala:63:57]
        uop_vfpCtrl_cvtCmd = _RANDOM_6[22:20];	// @[VFPUSubModule.scala:63:57]
        uop_vfpCtrl_cvtRm = _RANDOM_6[24:23];	// @[VFPUSubModule.scala:63:57]
        uop_typeTag = _RANDOM_7[7];	// @[VFPUSubModule.scala:63:57]
        uopReg_ctrl_lsrc_0 = _RANDOM_7[13:9];	// @[VFPUSubModule.scala:63:57]
        uopReg_ctrl_lsrc_1 = _RANDOM_7[18:14];	// @[VFPUSubModule.scala:63:57]
        uopReg_ctrl_ldest = _RANDOM_7[23:19];	// @[VFPUSubModule.scala:63:57]
        uopReg_ctrl_vm = _RANDOM_7[24];	// @[VFPUSubModule.scala:63:57]
        uopReg_ctrl_funct6 = _RANDOM_7[30:25];	// @[VFPUSubModule.scala:63:57]
        uopReg_ctrl_funct3 = {_RANDOM_7[31], _RANDOM_8[1:0]};	// @[VFPUSubModule.scala:63:57]
        uopReg_ctrl_widen = _RANDOM_8[2];	// @[VFPUSubModule.scala:63:57]
        uopReg_ctrl_widen2 = _RANDOM_8[3];	// @[VFPUSubModule.scala:63:57]
        uopReg_ctrl_narrow = _RANDOM_8[4];	// @[VFPUSubModule.scala:63:57]
        uopReg_ctrl_narrow_to_1 = _RANDOM_8[5];	// @[VFPUSubModule.scala:63:57]
        uopReg_info_vstart = _RANDOM_8[12:6];	// @[VFPUSubModule.scala:63:57]
        uopReg_info_vl = _RANDOM_8[20:13];	// @[VFPUSubModule.scala:63:57]
        uopReg_info_vxrm = _RANDOM_8[22:21];	// @[VFPUSubModule.scala:63:57]
        uopReg_info_frm = _RANDOM_8[25:23];	// @[VFPUSubModule.scala:63:57]
        uopReg_info_vlmul = _RANDOM_8[28:26];	// @[VFPUSubModule.scala:63:57]
        uopReg_info_vsew = _RANDOM_8[31:29];	// @[VFPUSubModule.scala:63:57]
        uopReg_info_ma = _RANDOM_9[0];	// @[VFPUSubModule.scala:63:57]
        uopReg_info_ta = _RANDOM_9[1];	// @[VFPUSubModule.scala:63:57]
        uopReg_info_destEew = _RANDOM_9[4:2];	// @[VFPUSubModule.scala:63:57]
        uopReg_expdIdx = _RANDOM_9[7:5];	// @[VFPUSubModule.scala:63:57]
        uopReg_expdEnd = _RANDOM_9[8];	// @[VFPUSubModule.scala:63:57]
        uopReg_sysUop_robIdx_flag = _RANDOM_9[10];	// @[VFPUSubModule.scala:63:57]
        uopReg_sysUop_robIdx_value = _RANDOM_9[18:11];	// @[VFPUSubModule.scala:63:57]
        uopReg_maskKeep = {_RANDOM_9[31:19], _RANDOM_10, _RANDOM_11[18:0]};	// @[VFPUSubModule.scala:63:57]
        uopReg_maskOff = {_RANDOM_11[31:19], _RANDOM_12, _RANDOM_13[18:0]};	// @[VFPUSubModule.scala:63:57]
        src = {_RANDOM_14[31:16], _RANDOM_15, _RANDOM_16[15:0]};	// @[Reg.scala:19:16]
        eleActives_0 = _RANDOM_16[16];	// @[Reg.scala:19:16]
        eleActives_1 = _RANDOM_16[17];	// @[Reg.scala:19:16]
        eleActives16_0_0 = _RANDOM_16[18];	// @[Reg.scala:19:16]
        eleActives16_0_1 = _RANDOM_16[19];	// @[Reg.scala:19:16]
        eleActives16_1_0 = _RANDOM_16[20];	// @[Reg.scala:19:16]
        eleActives16_1_1 = _RANDOM_16[21];	// @[Reg.scala:19:16]
        narrowBuf_0 = {_RANDOM_16[31:22], _RANDOM_17[21:0]};	// @[Reg.scala:19:16, VFCVT.scala:189:22]
        narrowBuf_1 = {_RANDOM_17[31:22], _RANDOM_18[21:0]};	// @[VFCVT.scala:189:22]
        narrowFlagBuf = _RANDOM_18[26:22];	// @[VFCVT.scala:189:22, :190:26]
        nonNarrowOutReg = {_RANDOM_18[31:27], _RANDOM_19, _RANDOM_20[26:0]};	// @[Reg.scala:19:16, VFCVT.scala:189:22]
        nonNarrowFlagOutReg = _RANDOM_20[31:27];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  FPToFP_1 s2d (	// @[VFCVT.scala:68:19]
    .io_in     (uop_expdIdx[0] ? src[63:32] : src[31:0]),	// @[Reg.scala:19:16, VFCVT.scala:72:{19,31,44,58}, VFPUSubModule.scala:63:57]
    .io_result (_s2d_io_result),
    .io_fflags (_s2d_io_fflags)
  );
  FPToFP_4 d2s (	// @[VFCVT.scala:78:19]
    .io_in     (src),	// @[Reg.scala:19:16]
    .io_rm     (uop_vfpCtrl_cvtRm[0] ? 3'h5 : uop_info_frm),	// @[VFCVT.scala:60:25, :84:19, VFPUSubModule.scala:63:57]
    .io_result (_d2s_io_result),
    .io_fflags (_d2s_io_fflags)
  );
  FPToInt_1 s2iX1 (	// @[VFCVT.scala:93:21]
    .io_a      (src[31:0]),	// @[Reg.scala:19:16, VFCVT.scala:72:58]
    .io_rm     (_s2iX2_16_io_rm_T),	// @[VFCVT.scala:101:21]
    .io_op     (_s2iX2_16_io_op_T),	// @[Cat.scala:33:92]
    .io_result (_s2iX1_io_result),
    .io_fflags (_s2iX1_io_fflags)
  );
  FPToInt_1 s2iX2 (	// @[VFCVT.scala:94:21]
    .io_a      (src[63:32]),	// @[Reg.scala:19:16, VFCVT.scala:72:44]
    .io_rm     (_s2iX2_16_io_rm_T),	// @[VFCVT.scala:101:21]
    .io_op     (_s2iX2_16_io_op_T),	// @[Cat.scala:33:92]
    .io_result (_s2iX2_io_result),
    .io_fflags (_s2iX2_io_fflags)
  );
  FPToInt_3 d2i (	// @[VFCVT.scala:96:19]
    .io_a      (src),	// @[Reg.scala:19:16]
    .io_rm     (_s2iX2_16_io_rm_T),	// @[VFCVT.scala:101:21]
    .io_op     ({~uop_ctrl_narrow, uop_vfpCtrl_cvtSigned}),	// @[Cat.scala:33:92, VFCVT.scala:109:5, VFPUSubModule.scala:63:57]
    .io_result (_d2i_io_result),
    .io_fflags (_d2i_io_fflags)
  );
  FPToInt16 s2iX1_16 (	// @[VFCVT.scala:113:24]
    .io_a      (src[31:0]),	// @[Reg.scala:19:16, VFCVT.scala:72:58]
    .io_rm     (_s2iX2_16_io_rm_T),	// @[VFCVT.scala:101:21]
    .io_op     (_s2iX2_16_io_op_T),	// @[Cat.scala:33:92]
    .io_result (_s2iX1_16_io_result),
    .io_fflags (_s2iX1_16_io_fflags)
  );
  FPToInt16 s2iX2_16 (	// @[VFCVT.scala:114:24]
    .io_a      (src[63:32]),	// @[Reg.scala:19:16, VFCVT.scala:72:44]
    .io_rm     (_s2iX2_16_io_rm_T),	// @[VFCVT.scala:101:21]
    .io_op     (_s2iX2_16_io_op_T),	// @[Cat.scala:33:92]
    .io_result (_s2iX2_16_io_result),
    .io_fflags (_s2iX2_16_io_fflags)
  );
  IntToFP_1 i2sX1 (	// @[VFCVT.scala:146:21]
    .io_int    (_i2fFlagOut_T_2 ? (uop_expdIdx[0] ? {{48{x162f & src[47]}}, src[47:32]} : {{48{x162f & src[15]}}, src[15:0]}) : uop_ctrl_narrow ? src : {32'h0, src[31:0]}),	// @[Bitwise.scala:77:12, Cat.scala:33:92, Reg.scala:19:16, VFCVT.scala:72:{31,58}, :151:66, :156:24, :157:{17,36,47,68}, :160:{17,36,47,68}, :164:{22,29,56}, VFPUSubModule.scala:63:57]
    .io_sign   (uop_vfpCtrl_cvtSigned),	// @[VFPUSubModule.scala:63:57]
    .io_long   (uop_ctrl_narrow),	// @[VFPUSubModule.scala:63:57]
    .io_rm     (uop_info_frm),	// @[VFPUSubModule.scala:63:57]
    .io_result (_i2sX1_io_result),
    .io_fflags (_i2sX1_io_fflags)
  );
  IntToFP_1 i2sX2 (	// @[VFCVT.scala:147:21]
    .io_int    (_i2fFlagOut_T_2 ? (uop_expdIdx[0] ? {{48{x162f & src[63]}}, src[63:48]} : {{48{x162f & src[31]}}, src[31:16]}) : {32'h0, src[63:32]}),	// @[Bitwise.scala:77:12, Cat.scala:33:92, Reg.scala:19:16, VFCVT.scala:72:{31,44}, :151:66, :156:24, :158:{17,36,47,68}, :161:{17,36,47,68}, :164:29, :165:22, VFPUSubModule.scala:63:57]
    .io_sign   (uop_vfpCtrl_cvtSigned),	// @[VFPUSubModule.scala:63:57]
    .io_long   (uop_ctrl_narrow),	// @[VFPUSubModule.scala:63:57]
    .io_rm     (uop_info_frm),	// @[VFPUSubModule.scala:63:57]
    .io_result (_i2sX2_io_result),
    .io_fflags (_i2sX2_io_fflags)
  );
  IntToFP_3 i2d (	// @[VFCVT.scala:149:19]
    .io_int    (uop_ctrl_widen & uop_expdIdx[0] ? {32'h0, src[63:32]} : uop_ctrl_widen & ~(uop_expdIdx[0]) ? {32'h0, src[31:0]} : src),	// @[Cat.scala:33:92, Reg.scala:19:16, VFCVT.scala:72:{31,44,58}, :171:20, :172:20, :174:{8,24,27}, VFPUSubModule.scala:63:57]
    .io_sign   (uop_vfpCtrl_cvtSigned),	// @[VFPUSubModule.scala:63:57]
    .io_long   (~uop_ctrl_widen),	// @[VFCVT.scala:179:18, VFPUSubModule.scala:63:57]
    .io_rm     (uop_info_frm),	// @[VFPUSubModule.scala:63:57]
    .io_result (_i2d_io_result),
    .io_fflags (_i2d_io_fflags)
  );
  assign io_in_ready = _WIRE;	// @[VFPUSubModule.scala:70:35]
  assign io_out_valid = REG_1;	// @[VFPUSubModule.scala:59:60]
  assign io_out_bits_vd = uopReg_ctrl_narrow ? {narrowBuf_1, narrowBuf_0} : nonNarrowOutReg;	// @[Cat.scala:33:92, Reg.scala:19:16, VFCVT.scala:189:22, :229:24, VFPUSubModule.scala:63:57]
  assign io_out_bits_fflags = uopReg_ctrl_narrow ? narrowFlagBuf : nonNarrowFlagOutReg;	// @[Reg.scala:19:16, VFCVT.scala:190:26, :230:28, VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_lsrc_0 = uopReg_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_lsrc_1 = uopReg_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_ldest = uopReg_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_vm = uopReg_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_funct6 = uopReg_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_funct3 = uopReg_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_widen = uopReg_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_widen2 = uopReg_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_narrow = uopReg_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_narrow_to_1 = uopReg_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vstart = uopReg_info_vstart;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vl = uopReg_info_vl;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vxrm = uopReg_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_frm = uopReg_info_frm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vlmul = uopReg_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vsew = uopReg_info_vsew;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_ma = uopReg_info_ma;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_ta = uopReg_info_ta;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_destEew = uopReg_info_destEew;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_expdIdx = uopReg_expdIdx;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_expdEnd = uopReg_expdEnd;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_sysUop_robIdx_flag = uopReg_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_sysUop_robIdx_value = uopReg_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_maskKeep = uopReg_maskKeep;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_maskOff = uopReg_maskOff;	// @[VFPUSubModule.scala:63:57]
endmodule

