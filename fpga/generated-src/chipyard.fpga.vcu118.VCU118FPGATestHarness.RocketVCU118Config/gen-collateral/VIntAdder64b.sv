// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VIntAdder64b(
  input  [5:0]  io_funct6,
  input         io_vm,
                io_ma,
  input  [3:0]  io_sew_oneHot,
                io_eewVd_oneHot,
  input  [2:0]  io_uopIdx,
  input  [63:0] io_vs1,
                io_vs2,
  input  [7:0]  io_oldVd,
                io_vmask,
  input         io_isSub,
                io_widen,
                io_widen2,
                io_narrow_to_1,
  output [63:0] io_vd,
  output [7:0]  io_cmpOut,
  output        io_toFixP_cout_0,
                io_toFixP_cout_1,
                io_toFixP_cout_2,
                io_toFixP_cout_3,
                io_toFixP_cout_4,
                io_toFixP_cout_5,
                io_toFixP_cout_6,
                io_toFixP_cout_7,
  output [7:0]  io_toFixP_vd_0,
                io_toFixP_vd_1,
                io_toFixP_vd_2,
                io_toFixP_vd_3,
                io_toFixP_vd_4,
                io_toFixP_vd_5,
                io_toFixP_vd_6,
                io_toFixP_vd_7,
  output        io_toFixP_vs2H_0,
                io_toFixP_vs2H_1,
                io_toFixP_vs2H_2,
                io_toFixP_vs2H_3,
                io_toFixP_vs2H_4,
                io_toFixP_vs2H_5,
                io_toFixP_vs2H_6,
                io_toFixP_vs2H_7,
                io_toFixP_vs1H_0,
                io_toFixP_vs1H_1,
                io_toFixP_vs1H_2,
                io_toFixP_vs1H_3,
                io_toFixP_vs1H_4,
                io_toFixP_vs1H_5,
                io_toFixP_vs1H_6,
                io_toFixP_vs1H_7
);

  wire        cin_7;	// @[VIntAdder64b.scala:108:20]
  wire        cin_6;	// @[VIntAdder64b.scala:106:20]
  wire        cin_5;	// @[VIntAdder64b.scala:108:20]
  wire        cin_4;	// @[VIntAdder64b.scala:104:20]
  wire        cin_3;	// @[VIntAdder64b.scala:108:20]
  wire        cin_2;	// @[VIntAdder64b.scala:106:20]
  wire        cin_1;	// @[VIntAdder64b.scala:108:20]
  wire        carryIn_0;	// @[VIntAdder64b.scala:96:22]
  wire        rsub = io_funct6 == 6'h3;	// @[VIntAdder64b.scala:57:21]
  wire        sub = io_isSub | rsub;	// @[VIntAdder64b.scala:57:21, :58:22]
  wire        addWithCarry = io_funct6[5:2] == 4'h4;	// @[VIntAdder64b.scala:60:{28,34}]
  wire [31:0] vs2_32b = io_uopIdx[0] ? io_vs2[63:32] : io_vs2[31:0];	// @[VIntAdder64b.scala:64:{20,27,35,48}]
  wire [31:0] vs1_32b = io_uopIdx[0] ? io_vs1[63:32] : io_vs1[31:0];	// @[VIntAdder64b.scala:64:27, :67:{20,35,48}]
  wire [63:0] vs1_adjust = (io_widen | io_widen2 ? (io_sew_oneHot[0] ? {{8{vs1_32b[31] & io_funct6[0]}}, vs1_32b[31:24], {8{vs1_32b[23] & io_funct6[0]}}, vs1_32b[23:16], {8{vs1_32b[15] & io_funct6[0]}}, vs1_32b[15:8], {8{vs1_32b[7] & io_funct6[0]}}, vs1_32b[7:0]} : 64'h0) | (io_sew_oneHot[1] ? {{16{vs1_32b[31] & io_funct6[0]}}, vs1_32b[31:16], {16{vs1_32b[15] & io_funct6[0]}}, vs1_32b[15:0]} : 64'h0) | (io_sew_oneHot[2] ? {{32{vs1_32b[31] & io_funct6[0]}}, vs1_32b} : 64'h0) : io_vs1) ^ {64{io_isSub}};	// @[Bitwise.scala:77:12, Cat.scala:33:92, Mux.scala:27:73, :29:36, VFuUtils.scala:26:36, :34:{34,46}, VIntAdder64b.scala:59:22, :65:34, :67:20, :71:{23,33,62}]
  wire [63:0] vs2_adjust = io_widen ? (io_sew_oneHot[0] ? {{8{vs2_32b[31] & io_funct6[0]}}, vs2_32b[31:24], {8{vs2_32b[23] & io_funct6[0]}}, vs2_32b[23:16], {8{vs2_32b[15] & io_funct6[0]}}, vs2_32b[15:8], {8{vs2_32b[7] & io_funct6[0]}}, vs2_32b[7:0]} : 64'h0) | (io_sew_oneHot[1] ? {{16{vs2_32b[31] & io_funct6[0]}}, vs2_32b[31:16], {16{vs2_32b[15] & io_funct6[0]}}, vs2_32b[15:0]} : 64'h0) | (io_sew_oneHot[2] ? {{32{vs2_32b[31] & io_funct6[0]}}, vs2_32b} : 64'h0) : io_vs2 ^ {64{rsub}};	// @[Bitwise.scala:77:12, Cat.scala:33:92, Mux.scala:27:73, :29:36, VFuUtils.scala:26:36, :34:{34,46}, VIntAdder64b.scala:57:21, :59:22, :64:20, :65:34, :72:{23,48}]
  wire [7:0]  vmask_adjust = io_sew_oneHot[1] ? {1'h0, io_vmask[3], 1'h0, io_vmask[2], 1'h0, io_vmask[1], 1'h0, io_vmask[0]} : io_sew_oneHot[2] ? {3'h0, io_vmask[1], 3'h0, io_vmask[0]} : io_vmask;	// @[Cat.scala:33:92, Mux.scala:27:73, :101:16, VFuBundles.scala:59:20, :60:20, VIntAdder64b.scala:89:{35,54,73,92}]
  wire [9:0]  _GEN = {1'h0, vs1_adjust[7:0], carryIn_0} + {1'h0, vs2_adjust[7:0], carryIn_0};	// @[Mux.scala:27:73, VIntAdder64b.scala:71:62, :72:23, :78:48, :94:{43,67}, :96:22]
  assign carryIn_0 = addWithCarry & ~io_vm & vmask_adjust[0] ^ sub;	// @[Mux.scala:101:16, VIntAdder64b.scala:58:22, :60:34, :96:{22,40,65}]
  wire [3:0]  eewCin_7_oneHot = io_narrow_to_1 ? io_sew_oneHot : io_eewVd_oneHot;	// @[VIntAdder64b.scala:99:25]
  wire [9:0]  _GEN_0 = {1'h0, vs1_adjust[15:8], cin_1} + {1'h0, vs2_adjust[15:8], cin_1};	// @[Mux.scala:27:73, VIntAdder64b.scala:71:62, :72:23, :78:48, :94:{43,67}, :108:20]
  assign cin_1 = eewCin_7_oneHot[0] ? addWithCarry & ~io_vm & vmask_adjust[1] ^ sub : _GEN[9];	// @[Mux.scala:101:16, VFuBundles.scala:58:19, VIntAdder64b.scala:58:22, :60:34, :78:48, :80:28, :96:{22,40,65}, :99:25, :108:20]
  wire [9:0]  _GEN_1 = {1'h0, vs1_adjust[23:16], cin_2} + {1'h0, vs2_adjust[23:16], cin_2};	// @[Mux.scala:27:73, VIntAdder64b.scala:71:62, :72:23, :78:48, :94:{43,67}, :106:20]
  assign cin_2 = eewCin_7_oneHot[3] | eewCin_7_oneHot[2] ? _GEN_0[9] : addWithCarry & ~io_vm & vmask_adjust[2] ^ sub;	// @[Mux.scala:101:16, VFuBundles.scala:60:20, :61:20, VIntAdder64b.scala:58:22, :60:34, :78:48, :80:28, :96:{22,40,65}, :99:25, :106:{20,33}]
  wire [9:0]  _GEN_2 = {1'h0, vs1_adjust[31:24], cin_3} + {1'h0, vs2_adjust[31:24], cin_3};	// @[Mux.scala:27:73, VIntAdder64b.scala:71:62, :72:23, :78:48, :94:{43,67}, :108:20]
  assign cin_3 = eewCin_7_oneHot[0] ? addWithCarry & ~io_vm & vmask_adjust[3] ^ sub : _GEN_1[9];	// @[Mux.scala:101:16, VFuBundles.scala:58:19, VIntAdder64b.scala:58:22, :60:34, :78:48, :80:28, :96:{22,40,65}, :99:25, :108:20]
  wire [9:0]  _GEN_3 = {1'h0, vs1_adjust[39:32], cin_4} + {1'h0, vs2_adjust[39:32], cin_4};	// @[Mux.scala:27:73, VIntAdder64b.scala:71:62, :72:23, :78:48, :94:{43,67}, :104:20]
  assign cin_4 = eewCin_7_oneHot[3] ? _GEN_2[9] : addWithCarry & ~io_vm & vmask_adjust[4] ^ sub;	// @[Mux.scala:101:16, VFuBundles.scala:61:20, VIntAdder64b.scala:58:22, :60:34, :78:48, :80:28, :96:{22,40,65}, :99:25, :104:20]
  wire [9:0]  _GEN_4 = {1'h0, vs1_adjust[47:40], cin_5} + {1'h0, vs2_adjust[47:40], cin_5};	// @[Mux.scala:27:73, VIntAdder64b.scala:71:62, :72:23, :78:48, :94:{43,67}, :108:20]
  assign cin_5 = eewCin_7_oneHot[0] ? addWithCarry & ~io_vm & vmask_adjust[5] ^ sub : _GEN_3[9];	// @[Mux.scala:101:16, VFuBundles.scala:58:19, VIntAdder64b.scala:58:22, :60:34, :78:48, :80:28, :96:{22,40,65}, :99:25, :108:20]
  wire [9:0]  _GEN_5 = {1'h0, vs1_adjust[55:48], cin_6} + {1'h0, vs2_adjust[55:48], cin_6};	// @[Mux.scala:27:73, VIntAdder64b.scala:71:62, :72:23, :78:48, :94:{43,67}, :106:20]
  assign cin_6 = eewCin_7_oneHot[3] | eewCin_7_oneHot[2] ? _GEN_4[9] : addWithCarry & ~io_vm & vmask_adjust[6] ^ sub;	// @[Mux.scala:101:16, VFuBundles.scala:60:20, :61:20, VIntAdder64b.scala:58:22, :60:34, :78:48, :80:28, :96:{22,40,65}, :99:25, :106:{20,33}]
  wire [9:0]  _GEN_6 = {1'h0, vs1_adjust[63:56], cin_7} + {1'h0, vs2_adjust[63:56], cin_7};	// @[Mux.scala:27:73, VIntAdder64b.scala:71:62, :72:23, :78:48, :94:{43,67}, :108:20]
  assign cin_7 = eewCin_7_oneHot[0] ? addWithCarry & ~io_vm & vmask_adjust[7] ^ sub : _GEN_5[9];	// @[Mux.scala:101:16, VFuBundles.scala:58:19, VIntAdder64b.scala:58:22, :60:34, :78:48, :80:28, :96:{22,40,65}, :99:25, :108:20]
  wire        lessThan_vec_0 = io_funct6[0] ? io_vs2[7] ^ vs1_adjust[7] ^ _GEN[9] : ~(_GEN[9]);	// @[VIntAdder64b.scala:59:22, :71:62, :78:48, :80:28, :123:{27,40,60,69,80}]
  wire        equal_vec_0 = io_vs2[7:0] == io_vs1[7:0];	// @[VIntAdder64b.scala:124:{24,37,44}]
  wire        lessThan_vec_1 = io_funct6[0] ? io_vs2[15] ^ vs1_adjust[15] ^ _GEN_0[9] : ~(_GEN_0[9]);	// @[VIntAdder64b.scala:59:22, :71:62, :78:48, :80:28, :123:{27,40,60,69,80}]
  wire        equal_vec_1 = io_vs2[15:8] == io_vs1[15:8];	// @[VIntAdder64b.scala:124:{24,37,44}]
  wire        lessThan_vec_2 = io_funct6[0] ? io_vs2[23] ^ vs1_adjust[23] ^ _GEN_1[9] : ~(_GEN_1[9]);	// @[VIntAdder64b.scala:59:22, :71:62, :78:48, :80:28, :123:{27,40,60,69,80}]
  wire        equal_vec_2 = io_vs2[23:16] == io_vs1[23:16];	// @[VIntAdder64b.scala:124:{24,37,44}]
  wire        lessThan_vec_3 = io_funct6[0] ? io_vs2[31] ^ vs1_adjust[31] ^ _GEN_2[9] : ~(_GEN_2[9]);	// @[VIntAdder64b.scala:59:22, :71:62, :78:48, :80:28, :123:{27,40,60,69,80}]
  wire        equal_vec_3 = io_vs2[31:24] == io_vs1[31:24];	// @[VIntAdder64b.scala:124:{24,37,44}]
  wire        lessThan_vec_4 = io_funct6[0] ? io_vs2[39] ^ vs1_adjust[39] ^ _GEN_3[9] : ~(_GEN_3[9]);	// @[VIntAdder64b.scala:59:22, :71:62, :78:48, :80:28, :123:{27,40,60,69,80}]
  wire        equal_vec_4 = io_vs2[39:32] == io_vs1[39:32];	// @[VIntAdder64b.scala:124:{24,37,44}]
  wire        lessThan_vec_5 = io_funct6[0] ? io_vs2[47] ^ vs1_adjust[47] ^ _GEN_4[9] : ~(_GEN_4[9]);	// @[VIntAdder64b.scala:59:22, :71:62, :78:48, :80:28, :123:{27,40,60,69,80}]
  wire        equal_vec_5 = io_vs2[47:40] == io_vs1[47:40];	// @[VIntAdder64b.scala:124:{24,37,44}]
  wire        lessThan_vec_6 = io_funct6[0] ? io_vs2[55] ^ vs1_adjust[55] ^ _GEN_5[9] : ~(_GEN_5[9]);	// @[VIntAdder64b.scala:59:22, :71:62, :78:48, :80:28, :123:{27,40,60,69,80}]
  wire        equal_vec_6 = io_vs2[55:48] == io_vs1[55:48];	// @[VIntAdder64b.scala:124:{24,37,44}]
  wire        lessThan_vec_7 = io_funct6[0] ? io_vs2[63] ^ vs1_adjust[63] ^ _GEN_6[9] : ~(_GEN_6[9]);	// @[VIntAdder64b.scala:59:22, :71:62, :78:48, :80:28, :123:{27,40,60,69,80}]
  wire        equal_vec_7 = io_vs2[63:56] == io_vs1[63:56];	// @[VIntAdder64b.scala:124:{24,37,44}]
  wire [7:0]  equal = {equal_vec_7, equal_vec_6, equal_vec_5, equal_vec_4, equal_vec_3, equal_vec_2, equal_vec_1, equal_vec_0};	// @[Cat.scala:33:92, VIntAdder64b.scala:124:37]
  wire [7:0]  cmpEq = (io_sew_oneHot[0] ? equal : 8'h0) | (io_sew_oneHot[1] ? {{2{&{equal_vec_7, equal_vec_6}}}, {2{&{equal_vec_5, equal_vec_4}}}, {2{&{equal_vec_3, equal_vec_2}}}, {2{&{equal_vec_1, equal_vec_0}}}} : 8'h0) | (io_sew_oneHot[2] ? {{4{&{equal_vec_7, equal_vec_6, equal_vec_5, equal_vec_4}}}, {4{&{equal_vec_3, equal_vec_2, equal_vec_1, equal_vec_0}}}} : 8'h0) | {8{io_sew_oneHot[3] & (&equal)}};	// @[Bitwise.scala:77:12, Cat.scala:33:92, Mux.scala:27:73, VFuBundles.scala:58:19, :59:20, :60:20, :61:20, VIntAdder64b.scala:124:37, :129:{34,41,61,68,88,95,115,122}, :130:{34,41,61,68}, :131:31]
  wire [7:0]  lessThan = {lessThan_vec_7, lessThan_vec_6, lessThan_vec_5, lessThan_vec_4, lessThan_vec_3, lessThan_vec_2, lessThan_vec_1, lessThan_vec_0};	// @[Cat.scala:33:92, VIntAdder64b.scala:123:27]
  wire [7:0]  _cmpResult_T_9 = lessThan | cmpEq;	// @[Cat.scala:33:92, Mux.scala:27:73, VIntAdder64b.scala:139:47]
  wire        selectVs1_1 = lessThan_vec_1 == io_funct6[1];	// @[VIntAdder64b.scala:123:27, :145:{38,48}]
  wire        selectVs1_3 = lessThan_vec_3 == io_funct6[1];	// @[VIntAdder64b.scala:123:27, :145:{38,48}]
  wire        selectVs1_5 = lessThan_vec_5 == io_funct6[1];	// @[VIntAdder64b.scala:123:27, :145:{38,48}]
  wire        selectVs1_7 = lessThan_vec_7 == io_funct6[1];	// @[VIntAdder64b.scala:123:27, :145:{38,48}]
  wire [7:0]  cmpOut = addWithCarry ? (io_isSub ? ~{_GEN_6[9], _GEN_5[9], _GEN_4[9], _GEN_3[9], _GEN_2[9], _GEN_1[9], _GEN_0[9], _GEN[9]} : {_GEN_6[9], _GEN_5[9], _GEN_4[9], _GEN_3[9], _GEN_2[9], _GEN_1[9], _GEN_0[9], _GEN[9]}) : (io_funct6 == 6'h18 ? cmpEq : 8'h0) | (io_funct6 == 6'h19 ? ~cmpEq : 8'h0) | (io_funct6[5:1] == 5'hD ? lessThan : 8'h0) | (io_funct6[5:1] == 5'hE ? _cmpResult_T_9 : 8'h0) | (io_funct6[5:1] == 5'hF ? ~_cmpResult_T_9 : 8'h0);	// @[Bitwise.scala:77:12, Cat.scala:33:92, Mux.scala:27:73, VIntAdder64b.scala:60:34, :78:48, :80:28, :133:15, :136:13, :137:13, :138:{12,18}, :139:{18,47}, :140:{18,37}, :158:{19,37,48,55,69}]
  wire [7:0]  cmpOutAdjust = (io_sew_oneHot[0] ? cmpOut : 8'h0) | (io_sew_oneHot[1] ? {4'hF, cmpOut[7], cmpOut[5], cmpOut[3], cmpOut[1]} : 8'h0) | (io_sew_oneHot[2] ? {6'h3F, cmpOut[7], cmpOut[3]} : 8'h0) | (io_sew_oneHot[3] ? {7'h7F, cmpOut[7]} : 8'h0);	// @[Bitwise.scala:77:12, Cat.scala:33:92, Mux.scala:27:73, VFuBundles.scala:58:19, :59:20, :60:20, :61:20, VIntAdder64b.scala:158:19, :161:{40,51,62,73}, :162:21, :163:21]
  assign io_vd = io_funct6[5:2] == 4'h1 ? {io_sew_oneHot[0] & selectVs1_7 | io_sew_oneHot[1] & selectVs1_7 | io_sew_oneHot[2] & selectVs1_7 | io_sew_oneHot[3] & selectVs1_7 ? io_vs1[63:56] : io_vs2[63:56], io_sew_oneHot[0] & lessThan_vec_6 == io_funct6[1] | io_sew_oneHot[1] & selectVs1_7 | io_sew_oneHot[2] & selectVs1_7 | io_sew_oneHot[3] & selectVs1_7 ? io_vs1[55:48] : io_vs2[55:48], io_sew_oneHot[0] & selectVs1_5 | io_sew_oneHot[1] & selectVs1_5 | io_sew_oneHot[2] & selectVs1_7 | io_sew_oneHot[3] & selectVs1_7 ? io_vs1[47:40] : io_vs2[47:40], io_sew_oneHot[0] & lessThan_vec_4 == io_funct6[1] | io_sew_oneHot[1] & selectVs1_5 | io_sew_oneHot[2] & selectVs1_7 | io_sew_oneHot[3] & selectVs1_7 ? io_vs1[39:32] : io_vs2[39:32], io_sew_oneHot[0] & selectVs1_3 | io_sew_oneHot[1] & selectVs1_3 | io_sew_oneHot[2] & selectVs1_3 | io_sew_oneHot[3] & selectVs1_7 ? io_vs1[31:24] : io_vs2[31:24], io_sew_oneHot[0] & lessThan_vec_2 == io_funct6[1] | io_sew_oneHot[1] & selectVs1_3 | io_sew_oneHot[2] & selectVs1_3 | io_sew_oneHot[3] & selectVs1_7 ? io_vs1[23:16] : io_vs2[23:16], io_sew_oneHot[0] & selectVs1_1 | io_sew_oneHot[1] & selectVs1_1 | io_sew_oneHot[2] & selectVs1_3 | io_sew_oneHot[3] & selectVs1_7 ? io_vs1[15:8] : io_vs2[15:8], io_sew_oneHot[0] & lessThan_vec_0 == io_funct6[1] | io_sew_oneHot[1] & selectVs1_1 | io_sew_oneHot[2] & selectVs1_3 | io_sew_oneHot[3] & selectVs1_7 ? io_vs1[7:0] : io_vs2[7:0]} : {_GEN_6[8:1], _GEN_5[8:1], _GEN_4[8:1], _GEN_3[8:1], _GEN_2[8:1], _GEN_1[8:1], _GEN_0[8:1], _GEN[8:1]};	// @[Cat.scala:33:92, Mux.scala:27:73, VFuBundles.scala:58:19, :59:20, :60:20, :61:20, VIntAdder64b.scala:60:28, :78:48, :80:37, :123:27, :124:{24,44}, :145:{38,48}, :153:27, :156:{15,29}]
  assign io_cmpOut = addWithCarry ? cmpOutAdjust : {io_vm | io_vmask[7] ? cmpOutAdjust[7] : io_ma | io_oldVd[7], io_vm | io_vmask[6] ? cmpOutAdjust[6] : io_ma | io_oldVd[6], io_vm | io_vmask[5] ? cmpOutAdjust[5] : io_ma | io_oldVd[5], io_vm | io_vmask[4] ? cmpOutAdjust[4] : io_ma | io_oldVd[4], io_vm | io_vmask[3] ? cmpOutAdjust[3] : io_ma | io_oldVd[3], io_vm | io_vmask[2] ? cmpOutAdjust[2] : io_ma | io_oldVd[2], io_vm | io_vmask[1] ? cmpOutAdjust[1] : io_ma | io_oldVd[1], io_vm | io_vmask[0] ? cmpOutAdjust[0] : io_ma | io_oldVd[0]};	// @[Cat.scala:33:92, Mux.scala:27:73, VIntAdder64b.scala:60:34, :89:{35,54,73,92}, :165:19, :166:{33,50,58,82,100}]
  assign io_toFixP_cout_0 = _GEN[9];	// @[VIntAdder64b.scala:78:48, :80:28]
  assign io_toFixP_cout_1 = _GEN_0[9];	// @[VIntAdder64b.scala:78:48, :80:28]
  assign io_toFixP_cout_2 = _GEN_1[9];	// @[VIntAdder64b.scala:78:48, :80:28]
  assign io_toFixP_cout_3 = _GEN_2[9];	// @[VIntAdder64b.scala:78:48, :80:28]
  assign io_toFixP_cout_4 = _GEN_3[9];	// @[VIntAdder64b.scala:78:48, :80:28]
  assign io_toFixP_cout_5 = _GEN_4[9];	// @[VIntAdder64b.scala:78:48, :80:28]
  assign io_toFixP_cout_6 = _GEN_5[9];	// @[VIntAdder64b.scala:78:48, :80:28]
  assign io_toFixP_cout_7 = _GEN_6[9];	// @[VIntAdder64b.scala:78:48, :80:28]
  assign io_toFixP_vd_0 = _GEN[8:1];	// @[VIntAdder64b.scala:78:48, :80:37]
  assign io_toFixP_vd_1 = _GEN_0[8:1];	// @[VIntAdder64b.scala:78:48, :80:37]
  assign io_toFixP_vd_2 = _GEN_1[8:1];	// @[VIntAdder64b.scala:78:48, :80:37]
  assign io_toFixP_vd_3 = _GEN_2[8:1];	// @[VIntAdder64b.scala:78:48, :80:37]
  assign io_toFixP_vd_4 = _GEN_3[8:1];	// @[VIntAdder64b.scala:78:48, :80:37]
  assign io_toFixP_vd_5 = _GEN_4[8:1];	// @[VIntAdder64b.scala:78:48, :80:37]
  assign io_toFixP_vd_6 = _GEN_5[8:1];	// @[VIntAdder64b.scala:78:48, :80:37]
  assign io_toFixP_vd_7 = _GEN_6[8:1];	// @[VIntAdder64b.scala:78:48, :80:37]
  assign io_toFixP_vs2H_0 = io_vs2[7];	// @[VIntAdder64b.scala:123:40]
  assign io_toFixP_vs2H_1 = io_vs2[15];	// @[VIntAdder64b.scala:123:40]
  assign io_toFixP_vs2H_2 = io_vs2[23];	// @[VIntAdder64b.scala:123:40]
  assign io_toFixP_vs2H_3 = io_vs2[31];	// @[VIntAdder64b.scala:123:40]
  assign io_toFixP_vs2H_4 = io_vs2[39];	// @[VIntAdder64b.scala:123:40]
  assign io_toFixP_vs2H_5 = io_vs2[47];	// @[VIntAdder64b.scala:123:40]
  assign io_toFixP_vs2H_6 = io_vs2[55];	// @[VIntAdder64b.scala:123:40]
  assign io_toFixP_vs2H_7 = io_vs2[63];	// @[VIntAdder64b.scala:123:40]
  assign io_toFixP_vs1H_0 = io_vs1[7];	// @[VIntAdder64b.scala:171:29]
  assign io_toFixP_vs1H_1 = io_vs1[15];	// @[VIntAdder64b.scala:171:29]
  assign io_toFixP_vs1H_2 = io_vs1[23];	// @[VIntAdder64b.scala:171:29]
  assign io_toFixP_vs1H_3 = io_vs1[31];	// @[VIntAdder64b.scala:171:29]
  assign io_toFixP_vs1H_4 = io_vs1[39];	// @[VIntAdder64b.scala:171:29]
  assign io_toFixP_vs1H_5 = io_vs1[47];	// @[VIntAdder64b.scala:171:29]
  assign io_toFixP_vs1H_6 = io_vs1[55];	// @[VIntAdder64b.scala:171:29]
  assign io_toFixP_vs1H_7 = io_vs1[63];	// @[VIntAdder64b.scala:171:29]
endmodule

