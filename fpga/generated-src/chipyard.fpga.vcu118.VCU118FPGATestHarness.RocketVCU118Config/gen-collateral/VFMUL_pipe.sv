// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VFMUL_pipe(
  input          clock,
                 reset,
                 io_in_valid,
  input  [63:0]  io_in_bits_vs1,
                 io_in_bits_vs2,
                 io_in_bits_old_vd,
  input  [7:0]   io_in_bits_prestart,
                 io_in_bits_mask,
                 io_in_bits_tail,
  input  [4:0]   io_in_bits_uop_ctrl_lsrc_0,
                 io_in_bits_uop_ctrl_lsrc_1,
                 io_in_bits_uop_ctrl_ldest,
  input          io_in_bits_uop_ctrl_vm,
  input  [5:0]   io_in_bits_uop_ctrl_funct6,
  input  [2:0]   io_in_bits_uop_ctrl_funct3,
  input          io_in_bits_uop_ctrl_widen,
                 io_in_bits_uop_ctrl_widen2,
                 io_in_bits_uop_ctrl_narrow,
                 io_in_bits_uop_ctrl_narrow_to_1,
  input  [6:0]   io_in_bits_uop_info_vstart,
  input  [7:0]   io_in_bits_uop_info_vl,
  input  [1:0]   io_in_bits_uop_info_vxrm,
  input  [2:0]   io_in_bits_uop_info_frm,
                 io_in_bits_uop_info_vlmul,
                 io_in_bits_uop_info_vsew,
  input          io_in_bits_uop_info_ma,
                 io_in_bits_uop_info_ta,
  input  [2:0]   io_in_bits_uop_info_destEew,
                 io_in_bits_uop_expdIdx,
  input          io_in_bits_uop_expdEnd,
                 io_in_bits_uop_sysUop_robIdx_flag,
  input  [7:0]   io_in_bits_uop_sysUop_robIdx_value,
  input  [63:0]  io_in_bits_uop_maskKeep,
                 io_in_bits_uop_maskOff,
  input  [1:0]   io_in_bits_uop_vfpCtrl_fmaCmd,
  input          io_in_bits_uop_typeTag,
                 io_out_ready,
  output         io_in_ready,
                 io_out_valid,
  output [63:0]  io_out_bits_vd,
  output [4:0]   io_out_bits_fflags,
                 io_out_bits_uop_ctrl_lsrc_0,
                 io_out_bits_uop_ctrl_lsrc_1,
                 io_out_bits_uop_ctrl_ldest,
  output         io_out_bits_uop_ctrl_vm,
  output [5:0]   io_out_bits_uop_ctrl_funct6,
  output [2:0]   io_out_bits_uop_ctrl_funct3,
  output         io_out_bits_uop_ctrl_widen,
                 io_out_bits_uop_ctrl_widen2,
                 io_out_bits_uop_ctrl_narrow,
                 io_out_bits_uop_ctrl_narrow_to_1,
  output [6:0]   io_out_bits_uop_info_vstart,
  output [7:0]   io_out_bits_uop_info_vl,
  output [1:0]   io_out_bits_uop_info_vxrm,
  output [2:0]   io_out_bits_uop_info_frm,
                 io_out_bits_uop_info_vlmul,
                 io_out_bits_uop_info_vsew,
  output         io_out_bits_uop_info_ma,
                 io_out_bits_uop_info_ta,
  output [2:0]   io_out_bits_uop_info_destEew,
                 io_out_bits_uop_expdIdx,
  output         io_out_bits_uop_expdEnd,
                 io_out_bits_uop_sysUop_robIdx_flag,
  output [7:0]   io_out_bits_uop_sysUop_robIdx_value,
  output [63:0]  io_out_bits_uop_maskKeep,
                 io_out_bits_uop_maskOff,
  output [1:0]   io_out_bits_uop_vfpCtrl_fmaCmd,
  output         toAdd_mulOutElmt0Vec_1_fp_prod_sign,
  output [10:0]  toAdd_mulOutElmt0Vec_1_fp_prod_exp,
  output [104:0] toAdd_mulOutElmt0Vec_1_fp_prod_sig,
  output         toAdd_mulOutElmt0Vec_1_inter_flags_isNaN,
                 toAdd_mulOutElmt0Vec_1_inter_flags_isInf,
                 toAdd_mulOutElmt0Vec_1_inter_flags_isInv,
                 toAdd_mulOutElmt0Vec_1_inter_flags_overflow,
                 toAdd_mulOutElmt0Vec_0_fp_prod_sign,
  output [7:0]   toAdd_mulOutElmt0Vec_0_fp_prod_exp,
  output [46:0]  toAdd_mulOutElmt0Vec_0_fp_prod_sig,
  output         toAdd_mulOutElmt0Vec_0_inter_flags_isNaN,
                 toAdd_mulOutElmt0Vec_0_inter_flags_isInf,
                 toAdd_mulOutElmt0Vec_0_inter_flags_isInv,
                 toAdd_mulOutElmt0Vec_0_inter_flags_overflow,
                 toAdd_mulOutElmt1_fp_prod_sign,
  output [7:0]   toAdd_mulOutElmt1_fp_prod_exp,
  output [46:0]  toAdd_mulOutElmt1_fp_prod_sig,
  output         toAdd_mulOutElmt1_inter_flags_isNaN,
                 toAdd_mulOutElmt1_inter_flags_isInf,
                 toAdd_mulOutElmt1_inter_flags_isInv,
                 toAdd_mulOutElmt1_inter_flags_overflow,
  output [63:0]  toAdd_addend,
  output [7:0]   toAdd_prestart,
                 toAdd_mask,
                 toAdd_tail,
  output [4:0]   toAdd_uop_ctrl_lsrc_0,
                 toAdd_uop_ctrl_lsrc_1,
                 toAdd_uop_ctrl_ldest,
  output         toAdd_uop_ctrl_vm,
  output [5:0]   toAdd_uop_ctrl_funct6,
  output [2:0]   toAdd_uop_ctrl_funct3,
  output         toAdd_uop_ctrl_widen,
                 toAdd_uop_ctrl_widen2,
                 toAdd_uop_ctrl_narrow,
                 toAdd_uop_ctrl_narrow_to_1,
  output [6:0]   toAdd_uop_info_vstart,
  output [7:0]   toAdd_uop_info_vl,
  output [1:0]   toAdd_uop_info_vxrm,
  output [2:0]   toAdd_uop_info_frm,
                 toAdd_uop_info_vlmul,
                 toAdd_uop_info_vsew,
  output         toAdd_uop_info_ma,
                 toAdd_uop_info_ta,
  output [2:0]   toAdd_uop_info_destEew,
                 toAdd_uop_expdIdx,
  output         toAdd_uop_expdEnd,
                 toAdd_uop_sysUop_robIdx_flag,
  output [7:0]   toAdd_uop_sysUop_robIdx_value,
  output [63:0]  toAdd_uop_maskKeep,
                 toAdd_uop_maskOff,
  output         toAdd_uop_typeTag
);

  wire         _WIRE_1;	// @[VFPUSubModule.scala:70:35]
  wire [31:0]  _stage3Elmt1_io_result;	// @[VFFMA.scala:242:20]
  wire [4:0]   _stage3Elmt1_io_fflags;	// @[VFFMA.scala:242:20]
  wire         _stage2Elmt1_io_out_special_case_valid;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt1_io_out_special_case_bits_nan;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt1_io_out_special_case_bits_inf;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt1_io_out_special_case_bits_inv;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt1_io_out_special_case_bits_hasZero;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt1_io_out_raw_out_sign;	// @[VFFMA.scala:241:20]
  wire [8:0]   _stage2Elmt1_io_out_raw_out_exp;	// @[VFFMA.scala:241:20]
  wire [73:0]  _stage2Elmt1_io_out_raw_out_sig;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt1_io_out_early_overflow;	// @[VFFMA.scala:241:20]
  wire [2:0]   _stage2Elmt1_io_out_rm;	// @[VFFMA.scala:241:20]
  wire         _stage1Elmt1_io_out_special_case_valid;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt1_io_out_special_case_bits_nan;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt1_io_out_special_case_bits_inf;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt1_io_out_special_case_bits_inv;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt1_io_out_special_case_bits_hasZero;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt1_io_out_early_overflow;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt1_io_out_prod_sign;	// @[VFFMA.scala:240:20]
  wire [8:0]   _stage1Elmt1_io_out_shift_amt;	// @[VFFMA.scala:240:20]
  wire [8:0]   _stage1Elmt1_io_out_exp_shifted;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt1_io_out_may_be_subnormal;	// @[VFFMA.scala:240:20]
  wire [2:0]   _stage1Elmt1_io_out_rm;	// @[VFFMA.scala:240:20]
  wire [49:0]  _multiplierElmt1_io_result;	// @[VFFMA.scala:201:31]
  wire [63:0]  _stage3Elmt0_1_io_result;	// @[VFFMA.scala:242:20]
  wire [4:0]   _stage3Elmt0_1_io_fflags;	// @[VFFMA.scala:242:20]
  wire         _stage2Elmt0_1_io_out_special_case_valid;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_1_io_out_special_case_bits_nan;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_1_io_out_special_case_bits_inf;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_1_io_out_special_case_bits_inv;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_1_io_out_special_case_bits_hasZero;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_1_io_out_raw_out_sign;	// @[VFFMA.scala:241:20]
  wire [11:0]  _stage2Elmt0_1_io_out_raw_out_exp;	// @[VFFMA.scala:241:20]
  wire [160:0] _stage2Elmt0_1_io_out_raw_out_sig;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_1_io_out_early_overflow;	// @[VFFMA.scala:241:20]
  wire [2:0]   _stage2Elmt0_1_io_out_rm;	// @[VFFMA.scala:241:20]
  wire         _stage1Elmt0_1_io_out_special_case_valid;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_1_io_out_special_case_bits_nan;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_1_io_out_special_case_bits_inf;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_1_io_out_special_case_bits_inv;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_1_io_out_special_case_bits_hasZero;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_1_io_out_early_overflow;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_1_io_out_prod_sign;	// @[VFFMA.scala:240:20]
  wire [11:0]  _stage1Elmt0_1_io_out_shift_amt;	// @[VFFMA.scala:240:20]
  wire [11:0]  _stage1Elmt0_1_io_out_exp_shifted;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_1_io_out_may_be_subnormal;	// @[VFFMA.scala:240:20]
  wire [2:0]   _stage1Elmt0_1_io_out_rm;	// @[VFFMA.scala:240:20]
  wire [31:0]  _stage3Elmt0_0_io_result;	// @[VFFMA.scala:242:20]
  wire [4:0]   _stage3Elmt0_0_io_fflags;	// @[VFFMA.scala:242:20]
  wire         _stage2Elmt0_0_io_out_special_case_valid;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_0_io_out_special_case_bits_nan;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_0_io_out_special_case_bits_inf;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_0_io_out_special_case_bits_inv;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_0_io_out_special_case_bits_hasZero;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_0_io_out_raw_out_sign;	// @[VFFMA.scala:241:20]
  wire [8:0]   _stage2Elmt0_0_io_out_raw_out_exp;	// @[VFFMA.scala:241:20]
  wire [73:0]  _stage2Elmt0_0_io_out_raw_out_sig;	// @[VFFMA.scala:241:20]
  wire         _stage2Elmt0_0_io_out_early_overflow;	// @[VFFMA.scala:241:20]
  wire [2:0]   _stage2Elmt0_0_io_out_rm;	// @[VFFMA.scala:241:20]
  wire         _stage1Elmt0_0_io_out_special_case_valid;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_0_io_out_special_case_bits_nan;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_0_io_out_special_case_bits_inf;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_0_io_out_special_case_bits_inv;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_0_io_out_special_case_bits_hasZero;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_0_io_out_early_overflow;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_0_io_out_prod_sign;	// @[VFFMA.scala:240:20]
  wire [8:0]   _stage1Elmt0_0_io_out_shift_amt;	// @[VFFMA.scala:240:20]
  wire [8:0]   _stage1Elmt0_0_io_out_exp_shifted;	// @[VFFMA.scala:240:20]
  wire         _stage1Elmt0_0_io_out_may_be_subnormal;	// @[VFFMA.scala:240:20]
  wire [2:0]   _stage1Elmt0_0_io_out_rm;	// @[VFFMA.scala:240:20]
  wire [107:0] _multiplierElmt0_io_result;	// @[VFFMA.scala:181:31]
  reg          REG;	// @[VFPUSubModule.scala:59:60]
  reg          REG_1;	// @[VFPUSubModule.scala:59:60]
  reg  [4:0]   REG_2_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]   REG_2_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]   REG_2_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  reg  [5:0]   REG_2_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  reg  [6:0]   REG_2_info_vstart;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]   REG_2_info_vl;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]   REG_2_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_info_frm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_info_vsew;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_info_ma;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_info_ta;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_info_destEew;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_expdIdx;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_expdEnd;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]   REG_2_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]  REG_2_maskKeep;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]  REG_2_maskOff;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]   REG_2_vfpCtrl_fmaCmd;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_typeTag;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]   REG_3_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]   REG_3_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]   REG_3_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  reg  [5:0]   REG_3_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  reg  [6:0]   REG_3_info_vstart;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]   REG_3_info_vl;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]   REG_3_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_info_frm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_info_vsew;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_info_ma;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_info_ta;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_info_destEew;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_expdIdx;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_expdEnd;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]   REG_3_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]  REG_3_maskKeep;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]  REG_3_maskOff;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]   REG_3_vfpCtrl_fmaCmd;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_typeTag;	// @[VFPUSubModule.scala:63:57]
  wire         _WIRE = ~REG | _WIRE_1;	// @[VFPUSubModule.scala:59:60, :70:{18,35}]
  assign _WIRE_1 = ~REG_1 | io_out_ready;	// @[VFPUSubModule.scala:59:60, :70:{18,35}]
  wire         _io_out_bits_fflags_T_4 = io_in_valid & _WIRE;	// @[VFPUSubModule.scala:70:35, :88:49]
  reg          outSel_r_0;	// @[Reg.scala:19:16]
  reg          outSel_r_1;	// @[Reg.scala:19:16]
  reg          outSel_0;	// @[Reg.scala:19:16]
  reg          outSel_1;	// @[Reg.scala:19:16]
  reg          eleActives_r_0;	// @[Reg.scala:19:16]
  reg          eleActives_r_1;	// @[Reg.scala:19:16]
  reg          eleActives_0;	// @[Reg.scala:19:16]
  reg          eleActives_1;	// @[Reg.scala:19:16]
  wire [31:0]  src1Elmt1 = io_in_bits_uop_typeTag ? 32'h0 : io_in_bits_vs1[63:32];	// @[VFFMA.scala:177:{22,65}]
  wire [31:0]  src2Elmt1 = io_in_bits_uop_typeTag ? 32'h0 : io_in_bits_vs2[63:32];	// @[VFFMA.scala:177:22, :178:{22,65}]
  reg          s2_io_in_r_special_case_valid;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_special_case_bits_nan;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_special_case_bits_inf;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_special_case_bits_inv;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_special_case_bits_hasZero;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_early_overflow;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_prod_sign;	// @[Reg.scala:19:16]
  reg  [8:0]   s2_io_in_r_shift_amt;	// @[Reg.scala:19:16]
  reg  [8:0]   s2_io_in_r_exp_shifted;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_may_be_subnormal;	// @[Reg.scala:19:16]
  reg  [2:0]   s2_io_in_r_rm;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_special_case_valid;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_special_case_bits_nan;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_special_case_bits_inf;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_special_case_bits_inv;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_special_case_bits_hasZero;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_raw_out_sign;	// @[Reg.scala:19:16]
  reg  [8:0]   s3_io_in_r_raw_out_exp;	// @[Reg.scala:19:16]
  reg  [73:0]  s3_io_in_r_raw_out_sig;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_early_overflow;	// @[Reg.scala:19:16]
  reg  [2:0]   s3_io_in_r_rm;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_special_case_valid;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_special_case_bits_nan;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_special_case_bits_inf;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_special_case_bits_inv;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_special_case_bits_hasZero;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_early_overflow;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_prod_sign;	// @[Reg.scala:19:16]
  reg  [11:0]  s2_io_in_r_1_shift_amt;	// @[Reg.scala:19:16]
  reg  [11:0]  s2_io_in_r_1_exp_shifted;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_may_be_subnormal;	// @[Reg.scala:19:16]
  reg  [2:0]   s2_io_in_r_1_rm;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_1_special_case_valid;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_1_special_case_bits_nan;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_1_special_case_bits_inf;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_1_special_case_bits_inv;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_1_special_case_bits_hasZero;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_1_raw_out_sign;	// @[Reg.scala:19:16]
  reg  [11:0]  s3_io_in_r_1_raw_out_exp;	// @[Reg.scala:19:16]
  reg  [160:0] s3_io_in_r_1_raw_out_sig;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_1_early_overflow;	// @[Reg.scala:19:16]
  reg  [2:0]   s3_io_in_r_1_rm;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_special_case_valid;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_special_case_bits_nan;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_special_case_bits_inf;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_special_case_bits_inv;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_special_case_bits_hasZero;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_early_overflow;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_prod_sign;	// @[Reg.scala:19:16]
  reg  [8:0]   s2_io_in_r_2_shift_amt;	// @[Reg.scala:19:16]
  reg  [8:0]   s2_io_in_r_2_exp_shifted;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_may_be_subnormal;	// @[Reg.scala:19:16]
  reg  [2:0]   s2_io_in_r_2_rm;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_2_special_case_valid;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_2_special_case_bits_nan;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_2_special_case_bits_inf;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_2_special_case_bits_inv;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_2_special_case_bits_hasZero;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_2_raw_out_sign;	// @[Reg.scala:19:16]
  reg  [8:0]   s3_io_in_r_2_raw_out_exp;	// @[Reg.scala:19:16]
  reg  [73:0]  s3_io_in_r_2_raw_out_sig;	// @[Reg.scala:19:16]
  reg          s3_io_in_r_2_early_overflow;	// @[Reg.scala:19:16]
  reg  [2:0]   s3_io_in_r_2_rm;	// @[Reg.scala:19:16]
  reg  [63:0]  toAdd_addend_r;	// @[Reg.scala:19:16]
  reg  [63:0]  toAdd_addend_r_1;	// @[Reg.scala:19:16]
  reg  [7:0]   toAdd_prestart_r;	// @[Reg.scala:19:16]
  reg  [7:0]   toAdd_prestart_r_1;	// @[Reg.scala:19:16]
  reg  [7:0]   toAdd_mask_r;	// @[Reg.scala:19:16]
  reg  [7:0]   toAdd_mask_r_1;	// @[Reg.scala:19:16]
  reg  [7:0]   toAdd_tail_r;	// @[Reg.scala:19:16]
  reg  [7:0]   toAdd_tail_r_1;	// @[Reg.scala:19:16]
  reg          io_out_bits_fflags_r;	// @[Reg.scala:19:16]
  reg          io_out_bits_fflags_r_1;	// @[Reg.scala:19:16]
  wire         _io_out_bits_fflags_T_7 = REG & _WIRE_1;	// @[VFPUSubModule.scala:59:60, :70:35, :88:49]
  always @(posedge clock) begin
    if (reset) begin
      REG <= 1'h0;	// @[VFPUSubModule.scala:59:60]
      REG_1 <= 1'h0;	// @[VFPUSubModule.scala:59:60]
    end
    else begin
      if (_io_out_bits_fflags_T_4)	// @[VFPUSubModule.scala:88:49]
        REG <= io_in_valid;	// @[VFPUSubModule.scala:59:60]
      else	// @[VFPUSubModule.scala:88:49]
        REG <= ~_WIRE_1 & REG;	// @[VFPUSubModule.scala:59:60, :70:35, :77:41, :78:19]
      if (_io_out_bits_fflags_T_7)	// @[VFPUSubModule.scala:88:49]
        REG_1 <= REG;	// @[VFPUSubModule.scala:59:60]
      else	// @[VFPUSubModule.scala:88:49]
        REG_1 <= ~io_out_ready & REG_1;	// @[VFPUSubModule.scala:59:60, :77:41, :78:19]
    end
    if (_io_out_bits_fflags_T_4) begin	// @[VFPUSubModule.scala:88:49]
      REG_2_ctrl_lsrc_0 <= io_in_bits_uop_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_lsrc_1 <= io_in_bits_uop_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_ldest <= io_in_bits_uop_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_vm <= io_in_bits_uop_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_funct6 <= io_in_bits_uop_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_funct3 <= io_in_bits_uop_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_widen <= io_in_bits_uop_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_widen2 <= io_in_bits_uop_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_narrow <= io_in_bits_uop_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_narrow_to_1 <= io_in_bits_uop_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vstart <= io_in_bits_uop_info_vstart;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vl <= io_in_bits_uop_info_vl;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vxrm <= io_in_bits_uop_info_vxrm;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_frm <= io_in_bits_uop_info_frm;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vlmul <= io_in_bits_uop_info_vlmul;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vsew <= io_in_bits_uop_info_vsew;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_ma <= io_in_bits_uop_info_ma;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_ta <= io_in_bits_uop_info_ta;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_destEew <= io_in_bits_uop_info_destEew;	// @[VFPUSubModule.scala:63:57]
      REG_2_expdIdx <= io_in_bits_uop_expdIdx;	// @[VFPUSubModule.scala:63:57]
      REG_2_expdEnd <= io_in_bits_uop_expdEnd;	// @[VFPUSubModule.scala:63:57]
      REG_2_sysUop_robIdx_flag <= io_in_bits_uop_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
      REG_2_sysUop_robIdx_value <= io_in_bits_uop_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
      REG_2_maskKeep <= io_in_bits_uop_maskKeep;	// @[VFPUSubModule.scala:63:57]
      REG_2_maskOff <= io_in_bits_uop_maskOff;	// @[VFPUSubModule.scala:63:57]
      REG_2_vfpCtrl_fmaCmd <= io_in_bits_uop_vfpCtrl_fmaCmd;	// @[VFPUSubModule.scala:63:57]
      REG_2_typeTag <= io_in_bits_uop_typeTag;	// @[VFPUSubModule.scala:63:57]
      outSel_r_0 <= ~io_in_bits_uop_typeTag;	// @[Reg.scala:19:16, VFFMA.scala:169:61]
      outSel_r_1 <= io_in_bits_uop_typeTag;	// @[Reg.scala:19:16]
      eleActives_r_0 <= ~(io_in_bits_prestart[0]) & ~(io_in_bits_tail[0]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[0]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      eleActives_r_1 <= ~(io_in_bits_prestart[4]) & ~(io_in_bits_tail[4]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[4]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      s2_io_in_r_special_case_valid <= _stage1Elmt0_0_io_out_special_case_valid;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_special_case_bits_nan <= _stage1Elmt0_0_io_out_special_case_bits_nan;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_special_case_bits_inf <= _stage1Elmt0_0_io_out_special_case_bits_inf;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_special_case_bits_inv <= _stage1Elmt0_0_io_out_special_case_bits_inv;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_special_case_bits_hasZero <= _stage1Elmt0_0_io_out_special_case_bits_hasZero;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_early_overflow <= _stage1Elmt0_0_io_out_early_overflow;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_prod_sign <= _stage1Elmt0_0_io_out_prod_sign;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_shift_amt <= _stage1Elmt0_0_io_out_shift_amt;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_exp_shifted <= _stage1Elmt0_0_io_out_exp_shifted;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_may_be_subnormal <= _stage1Elmt0_0_io_out_may_be_subnormal;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_rm <= _stage1Elmt0_0_io_out_rm;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_special_case_valid <= _stage1Elmt0_1_io_out_special_case_valid;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_special_case_bits_nan <= _stage1Elmt0_1_io_out_special_case_bits_nan;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_special_case_bits_inf <= _stage1Elmt0_1_io_out_special_case_bits_inf;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_special_case_bits_inv <= _stage1Elmt0_1_io_out_special_case_bits_inv;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_special_case_bits_hasZero <= _stage1Elmt0_1_io_out_special_case_bits_hasZero;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_early_overflow <= _stage1Elmt0_1_io_out_early_overflow;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_prod_sign <= _stage1Elmt0_1_io_out_prod_sign;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_shift_amt <= _stage1Elmt0_1_io_out_shift_amt;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_exp_shifted <= _stage1Elmt0_1_io_out_exp_shifted;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_may_be_subnormal <= _stage1Elmt0_1_io_out_may_be_subnormal;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_1_rm <= _stage1Elmt0_1_io_out_rm;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_special_case_valid <= _stage1Elmt1_io_out_special_case_valid;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_special_case_bits_nan <= _stage1Elmt1_io_out_special_case_bits_nan;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_special_case_bits_inf <= _stage1Elmt1_io_out_special_case_bits_inf;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_special_case_bits_inv <= _stage1Elmt1_io_out_special_case_bits_inv;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_special_case_bits_hasZero <= _stage1Elmt1_io_out_special_case_bits_hasZero;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_early_overflow <= _stage1Elmt1_io_out_early_overflow;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_prod_sign <= _stage1Elmt1_io_out_prod_sign;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_shift_amt <= _stage1Elmt1_io_out_shift_amt;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_exp_shifted <= _stage1Elmt1_io_out_exp_shifted;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_may_be_subnormal <= _stage1Elmt1_io_out_may_be_subnormal;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      s2_io_in_r_2_rm <= _stage1Elmt1_io_out_rm;	// @[Reg.scala:19:16, VFFMA.scala:240:20]
      toAdd_addend_r <= io_in_bits_old_vd;	// @[Reg.scala:19:16]
      toAdd_prestart_r <= io_in_bits_prestart;	// @[Reg.scala:19:16]
      toAdd_mask_r <= io_in_bits_mask;	// @[Reg.scala:19:16]
      toAdd_tail_r <= io_in_bits_tail;	// @[Reg.scala:19:16]
      io_out_bits_fflags_r <= io_in_bits_uop_expdIdx[0];	// @[Reg.scala:19:16, VFFMA.scala:231:36]
    end
    if (_io_out_bits_fflags_T_7) begin	// @[VFPUSubModule.scala:88:49]
      REG_3_ctrl_lsrc_0 <= REG_2_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_lsrc_1 <= REG_2_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_ldest <= REG_2_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_vm <= REG_2_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_funct6 <= REG_2_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_funct3 <= REG_2_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_widen <= REG_2_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_widen2 <= REG_2_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_narrow <= REG_2_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_narrow_to_1 <= REG_2_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_vstart <= REG_2_info_vstart;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_vl <= REG_2_info_vl;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_vxrm <= REG_2_info_vxrm;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_frm <= REG_2_info_frm;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_vlmul <= REG_2_info_vlmul;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_vsew <= REG_2_info_vsew;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_ma <= REG_2_info_ma;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_ta <= REG_2_info_ta;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_destEew <= REG_2_info_destEew;	// @[VFPUSubModule.scala:63:57]
      REG_3_expdIdx <= REG_2_expdIdx;	// @[VFPUSubModule.scala:63:57]
      REG_3_expdEnd <= REG_2_expdEnd;	// @[VFPUSubModule.scala:63:57]
      REG_3_sysUop_robIdx_flag <= REG_2_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
      REG_3_sysUop_robIdx_value <= REG_2_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
      REG_3_maskKeep <= REG_2_maskKeep;	// @[VFPUSubModule.scala:63:57]
      REG_3_maskOff <= REG_2_maskOff;	// @[VFPUSubModule.scala:63:57]
      REG_3_vfpCtrl_fmaCmd <= REG_2_vfpCtrl_fmaCmd;	// @[VFPUSubModule.scala:63:57]
      REG_3_typeTag <= REG_2_typeTag;	// @[VFPUSubModule.scala:63:57]
      outSel_0 <= outSel_r_0;	// @[Reg.scala:19:16]
      outSel_1 <= outSel_r_1;	// @[Reg.scala:19:16]
      eleActives_0 <= eleActives_r_0;	// @[Reg.scala:19:16]
      eleActives_1 <= eleActives_r_1;	// @[Reg.scala:19:16]
      s3_io_in_r_special_case_valid <= _stage2Elmt0_0_io_out_special_case_valid;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_special_case_bits_nan <= _stage2Elmt0_0_io_out_special_case_bits_nan;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_special_case_bits_inf <= _stage2Elmt0_0_io_out_special_case_bits_inf;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_special_case_bits_inv <= _stage2Elmt0_0_io_out_special_case_bits_inv;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_special_case_bits_hasZero <= _stage2Elmt0_0_io_out_special_case_bits_hasZero;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_raw_out_sign <= _stage2Elmt0_0_io_out_raw_out_sign;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_raw_out_exp <= _stage2Elmt0_0_io_out_raw_out_exp;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_raw_out_sig <= _stage2Elmt0_0_io_out_raw_out_sig;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_early_overflow <= _stage2Elmt0_0_io_out_early_overflow;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_rm <= _stage2Elmt0_0_io_out_rm;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_1_special_case_valid <= _stage2Elmt0_1_io_out_special_case_valid;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_1_special_case_bits_nan <= _stage2Elmt0_1_io_out_special_case_bits_nan;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_1_special_case_bits_inf <= _stage2Elmt0_1_io_out_special_case_bits_inf;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_1_special_case_bits_inv <= _stage2Elmt0_1_io_out_special_case_bits_inv;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_1_special_case_bits_hasZero <= _stage2Elmt0_1_io_out_special_case_bits_hasZero;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_1_raw_out_sign <= _stage2Elmt0_1_io_out_raw_out_sign;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_1_raw_out_exp <= _stage2Elmt0_1_io_out_raw_out_exp;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_1_raw_out_sig <= _stage2Elmt0_1_io_out_raw_out_sig;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_1_early_overflow <= _stage2Elmt0_1_io_out_early_overflow;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_1_rm <= _stage2Elmt0_1_io_out_rm;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_2_special_case_valid <= _stage2Elmt1_io_out_special_case_valid;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_2_special_case_bits_nan <= _stage2Elmt1_io_out_special_case_bits_nan;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_2_special_case_bits_inf <= _stage2Elmt1_io_out_special_case_bits_inf;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_2_special_case_bits_inv <= _stage2Elmt1_io_out_special_case_bits_inv;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_2_special_case_bits_hasZero <= _stage2Elmt1_io_out_special_case_bits_hasZero;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_2_raw_out_sign <= _stage2Elmt1_io_out_raw_out_sign;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_2_raw_out_exp <= _stage2Elmt1_io_out_raw_out_exp;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_2_raw_out_sig <= _stage2Elmt1_io_out_raw_out_sig;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_2_early_overflow <= _stage2Elmt1_io_out_early_overflow;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      s3_io_in_r_2_rm <= _stage2Elmt1_io_out_rm;	// @[Reg.scala:19:16, VFFMA.scala:241:20]
      toAdd_addend_r_1 <= toAdd_addend_r;	// @[Reg.scala:19:16]
      toAdd_prestart_r_1 <= toAdd_prestart_r;	// @[Reg.scala:19:16]
      toAdd_mask_r_1 <= toAdd_mask_r;	// @[Reg.scala:19:16]
      toAdd_tail_r_1 <= toAdd_tail_r;	// @[Reg.scala:19:16]
      io_out_bits_fflags_r_1 <= io_out_bits_fflags_r;	// @[Reg.scala:19:16]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    logic [31:0] _RANDOM_22;
    logic [31:0] _RANDOM_23;
    logic [31:0] _RANDOM_24;
    logic [31:0] _RANDOM_25;
    logic [31:0] _RANDOM_26;
    logic [31:0] _RANDOM_27;
    logic [31:0] _RANDOM_28;
    logic [31:0] _RANDOM_29;
    logic [31:0] _RANDOM_30;
    logic [31:0] _RANDOM_31;
    logic [31:0] _RANDOM_32;
    logic [31:0] _RANDOM_33;
    logic [31:0] _RANDOM_34;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        REG = _RANDOM_0[0];	// @[VFPUSubModule.scala:59:60]
        REG_1 = _RANDOM_0[1];	// @[VFPUSubModule.scala:59:60]
        REG_2_ctrl_lsrc_0 = _RANDOM_0[6:2];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_lsrc_1 = _RANDOM_0[11:7];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_ldest = _RANDOM_0[16:12];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_vm = _RANDOM_0[17];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_funct6 = _RANDOM_0[23:18];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_funct3 = _RANDOM_0[26:24];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_widen = _RANDOM_0[27];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_widen2 = _RANDOM_0[28];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_narrow = _RANDOM_0[29];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_narrow_to_1 = _RANDOM_0[30];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_info_vstart = {_RANDOM_0[31], _RANDOM_1[5:0]};	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_info_vl = _RANDOM_1[13:6];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vxrm = _RANDOM_1[15:14];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_frm = _RANDOM_1[18:16];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vlmul = _RANDOM_1[21:19];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vsew = _RANDOM_1[24:22];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_ma = _RANDOM_1[25];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_ta = _RANDOM_1[26];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_destEew = _RANDOM_1[29:27];	// @[VFPUSubModule.scala:63:57]
        REG_2_expdIdx = {_RANDOM_1[31:30], _RANDOM_2[0]};	// @[VFPUSubModule.scala:63:57]
        REG_2_expdEnd = _RANDOM_2[1];	// @[VFPUSubModule.scala:63:57]
        REG_2_sysUop_robIdx_flag = _RANDOM_2[3];	// @[VFPUSubModule.scala:63:57]
        REG_2_sysUop_robIdx_value = _RANDOM_2[11:4];	// @[VFPUSubModule.scala:63:57]
        REG_2_maskKeep = {_RANDOM_2[31:12], _RANDOM_3, _RANDOM_4[11:0]};	// @[VFPUSubModule.scala:63:57]
        REG_2_maskOff = {_RANDOM_4[31:12], _RANDOM_5, _RANDOM_6[11:0]};	// @[VFPUSubModule.scala:63:57]
        REG_2_vfpCtrl_fmaCmd = _RANDOM_6[13:12];	// @[VFPUSubModule.scala:63:57]
        REG_2_typeTag = _RANDOM_7[7];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_lsrc_0 = _RANDOM_7[13:9];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_lsrc_1 = _RANDOM_7[18:14];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_ldest = _RANDOM_7[23:19];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_vm = _RANDOM_7[24];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_funct6 = _RANDOM_7[30:25];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_funct3 = {_RANDOM_7[31], _RANDOM_8[1:0]};	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_widen = _RANDOM_8[2];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_widen2 = _RANDOM_8[3];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_narrow = _RANDOM_8[4];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_narrow_to_1 = _RANDOM_8[5];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_vstart = _RANDOM_8[12:6];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_vl = _RANDOM_8[20:13];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_vxrm = _RANDOM_8[22:21];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_frm = _RANDOM_8[25:23];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_vlmul = _RANDOM_8[28:26];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_vsew = _RANDOM_8[31:29];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_ma = _RANDOM_9[0];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_ta = _RANDOM_9[1];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_destEew = _RANDOM_9[4:2];	// @[VFPUSubModule.scala:63:57]
        REG_3_expdIdx = _RANDOM_9[7:5];	// @[VFPUSubModule.scala:63:57]
        REG_3_expdEnd = _RANDOM_9[8];	// @[VFPUSubModule.scala:63:57]
        REG_3_sysUop_robIdx_flag = _RANDOM_9[10];	// @[VFPUSubModule.scala:63:57]
        REG_3_sysUop_robIdx_value = _RANDOM_9[18:11];	// @[VFPUSubModule.scala:63:57]
        REG_3_maskKeep = {_RANDOM_9[31:19], _RANDOM_10, _RANDOM_11[18:0]};	// @[VFPUSubModule.scala:63:57]
        REG_3_maskOff = {_RANDOM_11[31:19], _RANDOM_12, _RANDOM_13[18:0]};	// @[VFPUSubModule.scala:63:57]
        REG_3_vfpCtrl_fmaCmd = _RANDOM_13[20:19];	// @[VFPUSubModule.scala:63:57]
        REG_3_typeTag = _RANDOM_14[14];	// @[VFPUSubModule.scala:63:57]
        outSel_r_0 = _RANDOM_14[16];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        outSel_r_1 = _RANDOM_14[17];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        outSel_0 = _RANDOM_14[18];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        outSel_1 = _RANDOM_14[19];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        eleActives_r_0 = _RANDOM_14[20];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        eleActives_r_1 = _RANDOM_14[21];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        eleActives_0 = _RANDOM_14[22];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        eleActives_1 = _RANDOM_14[23];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        s2_io_in_r_special_case_valid = _RANDOM_14[24];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        s2_io_in_r_special_case_bits_nan = _RANDOM_14[25];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        s2_io_in_r_special_case_bits_inf = _RANDOM_14[26];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        s2_io_in_r_special_case_bits_inv = _RANDOM_14[27];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        s2_io_in_r_special_case_bits_hasZero = _RANDOM_14[28];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        s2_io_in_r_early_overflow = _RANDOM_14[29];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        s2_io_in_r_prod_sign = _RANDOM_14[30];	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        s2_io_in_r_shift_amt = {_RANDOM_14[31], _RANDOM_15[7:0]};	// @[Reg.scala:19:16, VFPUSubModule.scala:63:57]
        s2_io_in_r_exp_shifted = _RANDOM_15[16:8];	// @[Reg.scala:19:16]
        s2_io_in_r_may_be_subnormal = _RANDOM_15[17];	// @[Reg.scala:19:16]
        s2_io_in_r_rm = _RANDOM_15[20:18];	// @[Reg.scala:19:16]
        s3_io_in_r_special_case_valid = _RANDOM_15[21];	// @[Reg.scala:19:16]
        s3_io_in_r_special_case_bits_nan = _RANDOM_15[22];	// @[Reg.scala:19:16]
        s3_io_in_r_special_case_bits_inf = _RANDOM_15[23];	// @[Reg.scala:19:16]
        s3_io_in_r_special_case_bits_inv = _RANDOM_15[24];	// @[Reg.scala:19:16]
        s3_io_in_r_special_case_bits_hasZero = _RANDOM_15[25];	// @[Reg.scala:19:16]
        s3_io_in_r_raw_out_sign = _RANDOM_15[26];	// @[Reg.scala:19:16]
        s3_io_in_r_raw_out_exp = {_RANDOM_15[31:27], _RANDOM_16[3:0]};	// @[Reg.scala:19:16]
        s3_io_in_r_raw_out_sig = {_RANDOM_16[31:4], _RANDOM_17, _RANDOM_18[13:0]};	// @[Reg.scala:19:16]
        s3_io_in_r_early_overflow = _RANDOM_18[14];	// @[Reg.scala:19:16]
        s3_io_in_r_rm = _RANDOM_18[17:15];	// @[Reg.scala:19:16]
        s2_io_in_r_1_special_case_valid = _RANDOM_18[18];	// @[Reg.scala:19:16]
        s2_io_in_r_1_special_case_bits_nan = _RANDOM_18[19];	// @[Reg.scala:19:16]
        s2_io_in_r_1_special_case_bits_inf = _RANDOM_18[20];	// @[Reg.scala:19:16]
        s2_io_in_r_1_special_case_bits_inv = _RANDOM_18[21];	// @[Reg.scala:19:16]
        s2_io_in_r_1_special_case_bits_hasZero = _RANDOM_18[22];	// @[Reg.scala:19:16]
        s2_io_in_r_1_early_overflow = _RANDOM_18[23];	// @[Reg.scala:19:16]
        s2_io_in_r_1_prod_sign = _RANDOM_18[24];	// @[Reg.scala:19:16]
        s2_io_in_r_1_shift_amt = {_RANDOM_18[31:25], _RANDOM_19[4:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_1_exp_shifted = _RANDOM_19[16:5];	// @[Reg.scala:19:16]
        s2_io_in_r_1_may_be_subnormal = _RANDOM_19[17];	// @[Reg.scala:19:16]
        s2_io_in_r_1_rm = _RANDOM_19[20:18];	// @[Reg.scala:19:16]
        s3_io_in_r_1_special_case_valid = _RANDOM_19[21];	// @[Reg.scala:19:16]
        s3_io_in_r_1_special_case_bits_nan = _RANDOM_19[22];	// @[Reg.scala:19:16]
        s3_io_in_r_1_special_case_bits_inf = _RANDOM_19[23];	// @[Reg.scala:19:16]
        s3_io_in_r_1_special_case_bits_inv = _RANDOM_19[24];	// @[Reg.scala:19:16]
        s3_io_in_r_1_special_case_bits_hasZero = _RANDOM_19[25];	// @[Reg.scala:19:16]
        s3_io_in_r_1_raw_out_sign = _RANDOM_19[26];	// @[Reg.scala:19:16]
        s3_io_in_r_1_raw_out_exp = {_RANDOM_19[31:27], _RANDOM_20[6:0]};	// @[Reg.scala:19:16]
        s3_io_in_r_1_raw_out_sig = {_RANDOM_20[31:7], _RANDOM_21, _RANDOM_22, _RANDOM_23, _RANDOM_24, _RANDOM_25[7:0]};	// @[Reg.scala:19:16]
        s3_io_in_r_1_early_overflow = _RANDOM_25[8];	// @[Reg.scala:19:16]
        s3_io_in_r_1_rm = _RANDOM_25[11:9];	// @[Reg.scala:19:16]
        s2_io_in_r_2_special_case_valid = _RANDOM_25[12];	// @[Reg.scala:19:16]
        s2_io_in_r_2_special_case_bits_nan = _RANDOM_25[13];	// @[Reg.scala:19:16]
        s2_io_in_r_2_special_case_bits_inf = _RANDOM_25[14];	// @[Reg.scala:19:16]
        s2_io_in_r_2_special_case_bits_inv = _RANDOM_25[15];	// @[Reg.scala:19:16]
        s2_io_in_r_2_special_case_bits_hasZero = _RANDOM_25[16];	// @[Reg.scala:19:16]
        s2_io_in_r_2_early_overflow = _RANDOM_25[17];	// @[Reg.scala:19:16]
        s2_io_in_r_2_prod_sign = _RANDOM_25[18];	// @[Reg.scala:19:16]
        s2_io_in_r_2_shift_amt = _RANDOM_25[27:19];	// @[Reg.scala:19:16]
        s2_io_in_r_2_exp_shifted = {_RANDOM_25[31:28], _RANDOM_26[4:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_2_may_be_subnormal = _RANDOM_26[5];	// @[Reg.scala:19:16]
        s2_io_in_r_2_rm = _RANDOM_26[8:6];	// @[Reg.scala:19:16]
        s3_io_in_r_2_special_case_valid = _RANDOM_26[9];	// @[Reg.scala:19:16]
        s3_io_in_r_2_special_case_bits_nan = _RANDOM_26[10];	// @[Reg.scala:19:16]
        s3_io_in_r_2_special_case_bits_inf = _RANDOM_26[11];	// @[Reg.scala:19:16]
        s3_io_in_r_2_special_case_bits_inv = _RANDOM_26[12];	// @[Reg.scala:19:16]
        s3_io_in_r_2_special_case_bits_hasZero = _RANDOM_26[13];	// @[Reg.scala:19:16]
        s3_io_in_r_2_raw_out_sign = _RANDOM_26[14];	// @[Reg.scala:19:16]
        s3_io_in_r_2_raw_out_exp = _RANDOM_26[23:15];	// @[Reg.scala:19:16]
        s3_io_in_r_2_raw_out_sig = {_RANDOM_26[31:24], _RANDOM_27, _RANDOM_28, _RANDOM_29[1:0]};	// @[Reg.scala:19:16]
        s3_io_in_r_2_early_overflow = _RANDOM_29[2];	// @[Reg.scala:19:16]
        s3_io_in_r_2_rm = _RANDOM_29[5:3];	// @[Reg.scala:19:16]
        toAdd_addend_r = {_RANDOM_29[31:6], _RANDOM_30, _RANDOM_31[5:0]};	// @[Reg.scala:19:16]
        toAdd_addend_r_1 = {_RANDOM_31[31:6], _RANDOM_32, _RANDOM_33[5:0]};	// @[Reg.scala:19:16]
        toAdd_prestart_r = _RANDOM_33[13:6];	// @[Reg.scala:19:16]
        toAdd_prestart_r_1 = _RANDOM_33[21:14];	// @[Reg.scala:19:16]
        toAdd_mask_r = _RANDOM_33[29:22];	// @[Reg.scala:19:16]
        toAdd_mask_r_1 = {_RANDOM_33[31:30], _RANDOM_34[5:0]};	// @[Reg.scala:19:16]
        toAdd_tail_r = _RANDOM_34[13:6];	// @[Reg.scala:19:16]
        toAdd_tail_r_1 = _RANDOM_34[21:14];	// @[Reg.scala:19:16]
        io_out_bits_fflags_r = _RANDOM_34[22];	// @[Reg.scala:19:16]
        io_out_bits_fflags_r_1 = _RANDOM_34[23];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  Multiplier multiplierElmt0 (	// @[VFFMA.scala:181:31]
    .clock           (clock),
    .io_a            ({1'h0, {29'h0, io_in_bits_uop_typeTag ? 24'h0 : {|(io_in_bits_vs1[30:23]), io_in_bits_vs1[22:0]}} | (io_in_bits_uop_typeTag ? {|(io_in_bits_vs1[62:52]), io_in_bits_vs1[51:0]} : 53'h0)}),	// @[Cat.scala:33:92, Mux.scala:27:73, VFFMA.scala:195:24, package.scala:64:18, :65:18, :94:72]
    .io_b            ({1'h0, {29'h0, io_in_bits_uop_typeTag ? 24'h0 : {|(io_in_bits_vs2[30:23]), io_in_bits_vs2[22:0]}} | (io_in_bits_uop_typeTag ? {|(io_in_bits_vs2[62:52]), io_in_bits_vs2[51:0]} : 53'h0)}),	// @[Cat.scala:33:92, Mux.scala:27:73, VFFMA.scala:196:24, package.scala:64:18, :65:18, :94:72]
    .io_regEnables_0 (_io_out_bits_fflags_T_4),	// @[VFPUSubModule.scala:88:49]
    .io_result       (_multiplierElmt0_io_result)
  );
  FMUL_s1 stage1Elmt0_0 (	// @[VFFMA.scala:240:20]
    .io_a                             (io_in_bits_vs1[31:0]),	// @[VFFMA.scala:243:20]
    .io_b                             (io_in_bits_vs2[31:0]),	// @[VFFMA.scala:244:20]
    .io_rm                            (io_in_bits_uop_info_frm),
    .io_out_special_case_valid        (_stage1Elmt0_0_io_out_special_case_valid),
    .io_out_special_case_bits_nan     (_stage1Elmt0_0_io_out_special_case_bits_nan),
    .io_out_special_case_bits_inf     (_stage1Elmt0_0_io_out_special_case_bits_inf),
    .io_out_special_case_bits_inv     (_stage1Elmt0_0_io_out_special_case_bits_inv),
    .io_out_special_case_bits_hasZero (_stage1Elmt0_0_io_out_special_case_bits_hasZero),
    .io_out_early_overflow            (_stage1Elmt0_0_io_out_early_overflow),
    .io_out_prod_sign                 (_stage1Elmt0_0_io_out_prod_sign),
    .io_out_shift_amt                 (_stage1Elmt0_0_io_out_shift_amt),
    .io_out_exp_shifted               (_stage1Elmt0_0_io_out_exp_shifted),
    .io_out_may_be_subnormal          (_stage1Elmt0_0_io_out_may_be_subnormal),
    .io_out_rm                        (_stage1Elmt0_0_io_out_rm)
  );
  FMUL_s2 stage2Elmt0_0 (	// @[VFFMA.scala:241:20]
    .io_in_special_case_valid         (s2_io_in_r_special_case_valid),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_nan      (s2_io_in_r_special_case_bits_nan),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inf      (s2_io_in_r_special_case_bits_inf),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inv      (s2_io_in_r_special_case_bits_inv),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_hasZero  (s2_io_in_r_special_case_bits_hasZero),	// @[Reg.scala:19:16]
    .io_in_early_overflow             (s2_io_in_r_early_overflow),	// @[Reg.scala:19:16]
    .io_in_prod_sign                  (s2_io_in_r_prod_sign),	// @[Reg.scala:19:16]
    .io_in_shift_amt                  (s2_io_in_r_shift_amt),	// @[Reg.scala:19:16]
    .io_in_exp_shifted                (s2_io_in_r_exp_shifted),	// @[Reg.scala:19:16]
    .io_in_may_be_subnormal           (s2_io_in_r_may_be_subnormal),	// @[Reg.scala:19:16]
    .io_in_rm                         (s2_io_in_r_rm),	// @[Reg.scala:19:16]
    .io_prod                          (_multiplierElmt0_io_result[47:0]),	// @[VFFMA.scala:181:31, :185:33]
    .io_out_special_case_valid        (_stage2Elmt0_0_io_out_special_case_valid),
    .io_out_special_case_bits_nan     (_stage2Elmt0_0_io_out_special_case_bits_nan),
    .io_out_special_case_bits_inf     (_stage2Elmt0_0_io_out_special_case_bits_inf),
    .io_out_special_case_bits_inv     (_stage2Elmt0_0_io_out_special_case_bits_inv),
    .io_out_special_case_bits_hasZero (_stage2Elmt0_0_io_out_special_case_bits_hasZero),
    .io_out_raw_out_sign              (_stage2Elmt0_0_io_out_raw_out_sign),
    .io_out_raw_out_exp               (_stage2Elmt0_0_io_out_raw_out_exp),
    .io_out_raw_out_sig               (_stage2Elmt0_0_io_out_raw_out_sig),
    .io_out_early_overflow            (_stage2Elmt0_0_io_out_early_overflow),
    .io_out_rm                        (_stage2Elmt0_0_io_out_rm)
  );
  FMUL_s3 stage3Elmt0_0 (	// @[VFFMA.scala:242:20]
    .io_in_special_case_valid        (s3_io_in_r_special_case_valid),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_nan     (s3_io_in_r_special_case_bits_nan),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inf     (s3_io_in_r_special_case_bits_inf),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inv     (s3_io_in_r_special_case_bits_inv),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_hasZero (s3_io_in_r_special_case_bits_hasZero),	// @[Reg.scala:19:16]
    .io_in_raw_out_sign              (s3_io_in_r_raw_out_sign),	// @[Reg.scala:19:16]
    .io_in_raw_out_exp               (s3_io_in_r_raw_out_exp),	// @[Reg.scala:19:16]
    .io_in_raw_out_sig               (s3_io_in_r_raw_out_sig),	// @[Reg.scala:19:16]
    .io_in_early_overflow            (s3_io_in_r_early_overflow),	// @[Reg.scala:19:16]
    .io_in_rm                        (s3_io_in_r_rm),	// @[Reg.scala:19:16]
    .io_result                       (_stage3Elmt0_0_io_result),
    .io_fflags                       (_stage3Elmt0_0_io_fflags),
    .io_to_fadd_fp_prod_sign         (toAdd_mulOutElmt0Vec_0_fp_prod_sign),
    .io_to_fadd_fp_prod_exp          (toAdd_mulOutElmt0Vec_0_fp_prod_exp),
    .io_to_fadd_fp_prod_sig          (toAdd_mulOutElmt0Vec_0_fp_prod_sig),
    .io_to_fadd_inter_flags_isNaN    (toAdd_mulOutElmt0Vec_0_inter_flags_isNaN),
    .io_to_fadd_inter_flags_isInf    (toAdd_mulOutElmt0Vec_0_inter_flags_isInf),
    .io_to_fadd_inter_flags_isInv    (toAdd_mulOutElmt0Vec_0_inter_flags_isInv),
    .io_to_fadd_inter_flags_overflow (toAdd_mulOutElmt0Vec_0_inter_flags_overflow)
  );
  FMUL_s1_1 stage1Elmt0_1 (	// @[VFFMA.scala:240:20]
    .io_a                             (io_in_bits_vs1),
    .io_b                             (io_in_bits_vs2),
    .io_rm                            (io_in_bits_uop_info_frm),
    .io_out_special_case_valid        (_stage1Elmt0_1_io_out_special_case_valid),
    .io_out_special_case_bits_nan     (_stage1Elmt0_1_io_out_special_case_bits_nan),
    .io_out_special_case_bits_inf     (_stage1Elmt0_1_io_out_special_case_bits_inf),
    .io_out_special_case_bits_inv     (_stage1Elmt0_1_io_out_special_case_bits_inv),
    .io_out_special_case_bits_hasZero (_stage1Elmt0_1_io_out_special_case_bits_hasZero),
    .io_out_early_overflow            (_stage1Elmt0_1_io_out_early_overflow),
    .io_out_prod_sign                 (_stage1Elmt0_1_io_out_prod_sign),
    .io_out_shift_amt                 (_stage1Elmt0_1_io_out_shift_amt),
    .io_out_exp_shifted               (_stage1Elmt0_1_io_out_exp_shifted),
    .io_out_may_be_subnormal          (_stage1Elmt0_1_io_out_may_be_subnormal),
    .io_out_rm                        (_stage1Elmt0_1_io_out_rm)
  );
  FMUL_s2_1 stage2Elmt0_1 (	// @[VFFMA.scala:241:20]
    .io_in_special_case_valid         (s2_io_in_r_1_special_case_valid),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_nan      (s2_io_in_r_1_special_case_bits_nan),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inf      (s2_io_in_r_1_special_case_bits_inf),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inv      (s2_io_in_r_1_special_case_bits_inv),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_hasZero  (s2_io_in_r_1_special_case_bits_hasZero),	// @[Reg.scala:19:16]
    .io_in_early_overflow             (s2_io_in_r_1_early_overflow),	// @[Reg.scala:19:16]
    .io_in_prod_sign                  (s2_io_in_r_1_prod_sign),	// @[Reg.scala:19:16]
    .io_in_shift_amt                  (s2_io_in_r_1_shift_amt),	// @[Reg.scala:19:16]
    .io_in_exp_shifted                (s2_io_in_r_1_exp_shifted),	// @[Reg.scala:19:16]
    .io_in_may_be_subnormal           (s2_io_in_r_1_may_be_subnormal),	// @[Reg.scala:19:16]
    .io_in_rm                         (s2_io_in_r_1_rm),	// @[Reg.scala:19:16]
    .io_prod                          (_multiplierElmt0_io_result[105:0]),	// @[VFFMA.scala:181:31, :185:33]
    .io_out_special_case_valid        (_stage2Elmt0_1_io_out_special_case_valid),
    .io_out_special_case_bits_nan     (_stage2Elmt0_1_io_out_special_case_bits_nan),
    .io_out_special_case_bits_inf     (_stage2Elmt0_1_io_out_special_case_bits_inf),
    .io_out_special_case_bits_inv     (_stage2Elmt0_1_io_out_special_case_bits_inv),
    .io_out_special_case_bits_hasZero (_stage2Elmt0_1_io_out_special_case_bits_hasZero),
    .io_out_raw_out_sign              (_stage2Elmt0_1_io_out_raw_out_sign),
    .io_out_raw_out_exp               (_stage2Elmt0_1_io_out_raw_out_exp),
    .io_out_raw_out_sig               (_stage2Elmt0_1_io_out_raw_out_sig),
    .io_out_early_overflow            (_stage2Elmt0_1_io_out_early_overflow),
    .io_out_rm                        (_stage2Elmt0_1_io_out_rm)
  );
  FMUL_s3_1 stage3Elmt0_1 (	// @[VFFMA.scala:242:20]
    .io_in_special_case_valid        (s3_io_in_r_1_special_case_valid),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_nan     (s3_io_in_r_1_special_case_bits_nan),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inf     (s3_io_in_r_1_special_case_bits_inf),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inv     (s3_io_in_r_1_special_case_bits_inv),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_hasZero (s3_io_in_r_1_special_case_bits_hasZero),	// @[Reg.scala:19:16]
    .io_in_raw_out_sign              (s3_io_in_r_1_raw_out_sign),	// @[Reg.scala:19:16]
    .io_in_raw_out_exp               (s3_io_in_r_1_raw_out_exp),	// @[Reg.scala:19:16]
    .io_in_raw_out_sig               (s3_io_in_r_1_raw_out_sig),	// @[Reg.scala:19:16]
    .io_in_early_overflow            (s3_io_in_r_1_early_overflow),	// @[Reg.scala:19:16]
    .io_in_rm                        (s3_io_in_r_1_rm),	// @[Reg.scala:19:16]
    .io_result                       (_stage3Elmt0_1_io_result),
    .io_fflags                       (_stage3Elmt0_1_io_fflags),
    .io_to_fadd_fp_prod_sign         (toAdd_mulOutElmt0Vec_1_fp_prod_sign),
    .io_to_fadd_fp_prod_exp          (toAdd_mulOutElmt0Vec_1_fp_prod_exp),
    .io_to_fadd_fp_prod_sig          (toAdd_mulOutElmt0Vec_1_fp_prod_sig),
    .io_to_fadd_inter_flags_isNaN    (toAdd_mulOutElmt0Vec_1_inter_flags_isNaN),
    .io_to_fadd_inter_flags_isInf    (toAdd_mulOutElmt0Vec_1_inter_flags_isInf),
    .io_to_fadd_inter_flags_isInv    (toAdd_mulOutElmt0Vec_1_inter_flags_isInv),
    .io_to_fadd_inter_flags_overflow (toAdd_mulOutElmt0Vec_1_inter_flags_overflow)
  );
  Multiplier_1 multiplierElmt1 (	// @[VFFMA.scala:201:31]
    .clock           (clock),
    .io_a            ({1'h0, |(src1Elmt1[30:23]), src1Elmt1[22:0]}),	// @[VFFMA.scala:177:22, :204:24, package.scala:64:18, :65:18, :94:72]
    .io_b            ({1'h0, |(src2Elmt1[30:23]), src2Elmt1[22:0]}),	// @[VFFMA.scala:178:22, :205:24, package.scala:64:18, :65:18, :94:72]
    .io_regEnables_0 (_io_out_bits_fflags_T_4 & ~io_in_bits_uop_typeTag),	// @[VFFMA.scala:169:61, :207:52, VFPUSubModule.scala:88:49]
    .io_result       (_multiplierElmt1_io_result)
  );
  FMUL_s1 stage1Elmt1 (	// @[VFFMA.scala:240:20]
    .io_a                             (src1Elmt1),	// @[VFFMA.scala:177:22]
    .io_b                             (src2Elmt1),	// @[VFFMA.scala:178:22]
    .io_rm                            (io_in_bits_uop_info_frm),
    .io_out_special_case_valid        (_stage1Elmt1_io_out_special_case_valid),
    .io_out_special_case_bits_nan     (_stage1Elmt1_io_out_special_case_bits_nan),
    .io_out_special_case_bits_inf     (_stage1Elmt1_io_out_special_case_bits_inf),
    .io_out_special_case_bits_inv     (_stage1Elmt1_io_out_special_case_bits_inv),
    .io_out_special_case_bits_hasZero (_stage1Elmt1_io_out_special_case_bits_hasZero),
    .io_out_early_overflow            (_stage1Elmt1_io_out_early_overflow),
    .io_out_prod_sign                 (_stage1Elmt1_io_out_prod_sign),
    .io_out_shift_amt                 (_stage1Elmt1_io_out_shift_amt),
    .io_out_exp_shifted               (_stage1Elmt1_io_out_exp_shifted),
    .io_out_may_be_subnormal          (_stage1Elmt1_io_out_may_be_subnormal),
    .io_out_rm                        (_stage1Elmt1_io_out_rm)
  );
  FMUL_s2 stage2Elmt1 (	// @[VFFMA.scala:241:20]
    .io_in_special_case_valid         (s2_io_in_r_2_special_case_valid),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_nan      (s2_io_in_r_2_special_case_bits_nan),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inf      (s2_io_in_r_2_special_case_bits_inf),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inv      (s2_io_in_r_2_special_case_bits_inv),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_hasZero  (s2_io_in_r_2_special_case_bits_hasZero),	// @[Reg.scala:19:16]
    .io_in_early_overflow             (s2_io_in_r_2_early_overflow),	// @[Reg.scala:19:16]
    .io_in_prod_sign                  (s2_io_in_r_2_prod_sign),	// @[Reg.scala:19:16]
    .io_in_shift_amt                  (s2_io_in_r_2_shift_amt),	// @[Reg.scala:19:16]
    .io_in_exp_shifted                (s2_io_in_r_2_exp_shifted),	// @[Reg.scala:19:16]
    .io_in_may_be_subnormal           (s2_io_in_r_2_may_be_subnormal),	// @[Reg.scala:19:16]
    .io_in_rm                         (s2_io_in_r_2_rm),	// @[Reg.scala:19:16]
    .io_prod                          (_multiplierElmt1_io_result[47:0]),	// @[VFFMA.scala:201:31, :203:23]
    .io_out_special_case_valid        (_stage2Elmt1_io_out_special_case_valid),
    .io_out_special_case_bits_nan     (_stage2Elmt1_io_out_special_case_bits_nan),
    .io_out_special_case_bits_inf     (_stage2Elmt1_io_out_special_case_bits_inf),
    .io_out_special_case_bits_inv     (_stage2Elmt1_io_out_special_case_bits_inv),
    .io_out_special_case_bits_hasZero (_stage2Elmt1_io_out_special_case_bits_hasZero),
    .io_out_raw_out_sign              (_stage2Elmt1_io_out_raw_out_sign),
    .io_out_raw_out_exp               (_stage2Elmt1_io_out_raw_out_exp),
    .io_out_raw_out_sig               (_stage2Elmt1_io_out_raw_out_sig),
    .io_out_early_overflow            (_stage2Elmt1_io_out_early_overflow),
    .io_out_rm                        (_stage2Elmt1_io_out_rm)
  );
  FMUL_s3 stage3Elmt1 (	// @[VFFMA.scala:242:20]
    .io_in_special_case_valid        (s3_io_in_r_2_special_case_valid),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_nan     (s3_io_in_r_2_special_case_bits_nan),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inf     (s3_io_in_r_2_special_case_bits_inf),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inv     (s3_io_in_r_2_special_case_bits_inv),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_hasZero (s3_io_in_r_2_special_case_bits_hasZero),	// @[Reg.scala:19:16]
    .io_in_raw_out_sign              (s3_io_in_r_2_raw_out_sign),	// @[Reg.scala:19:16]
    .io_in_raw_out_exp               (s3_io_in_r_2_raw_out_exp),	// @[Reg.scala:19:16]
    .io_in_raw_out_sig               (s3_io_in_r_2_raw_out_sig),	// @[Reg.scala:19:16]
    .io_in_early_overflow            (s3_io_in_r_2_early_overflow),	// @[Reg.scala:19:16]
    .io_in_rm                        (s3_io_in_r_2_rm),	// @[Reg.scala:19:16]
    .io_result                       (_stage3Elmt1_io_result),
    .io_fflags                       (_stage3Elmt1_io_fflags),
    .io_to_fadd_fp_prod_sign         (toAdd_mulOutElmt1_fp_prod_sign),
    .io_to_fadd_fp_prod_exp          (toAdd_mulOutElmt1_fp_prod_exp),
    .io_to_fadd_fp_prod_sig          (toAdd_mulOutElmt1_fp_prod_sig),
    .io_to_fadd_inter_flags_isNaN    (toAdd_mulOutElmt1_inter_flags_isNaN),
    .io_to_fadd_inter_flags_isInf    (toAdd_mulOutElmt1_inter_flags_isInf),
    .io_to_fadd_inter_flags_isInv    (toAdd_mulOutElmt1_inter_flags_isInv),
    .io_to_fadd_inter_flags_overflow (toAdd_mulOutElmt1_inter_flags_overflow)
  );
  assign io_in_ready = _WIRE;	// @[VFPUSubModule.scala:70:35]
  assign io_out_valid = REG_1;	// @[VFPUSubModule.scala:59:60]
  assign io_out_bits_vd = (outSel_0 ? {_stage3Elmt1_io_result, _stage3Elmt0_0_io_result} : 64'h0) | (outSel_1 ? _stage3Elmt0_1_io_result : 64'h0);	// @[Cat.scala:33:92, Mux.scala:27:73, Reg.scala:19:16, VFFMA.scala:242:20]
  assign io_out_bits_fflags = (outSel_0 ? (eleActives_1 ? _stage3Elmt1_io_fflags : 5'h0) | (eleActives_0 ? _stage3Elmt0_0_io_fflags : 5'h0) : 5'h0) | (outSel_1 & (io_out_bits_fflags_r_1 ? eleActives_1 : eleActives_0) ? _stage3Elmt0_1_io_fflags : 5'h0);	// @[Mux.scala:27:73, Reg.scala:19:16, VFFMA.scala:227:8, :228:{7,12}, :230:8, :231:10, :242:20]
  assign io_out_bits_uop_ctrl_lsrc_0 = REG_3_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_lsrc_1 = REG_3_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_ldest = REG_3_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_vm = REG_3_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_funct6 = REG_3_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_funct3 = REG_3_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_widen = REG_3_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_widen2 = REG_3_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_narrow = REG_3_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_narrow_to_1 = REG_3_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vstart = REG_3_info_vstart;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vl = REG_3_info_vl;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vxrm = REG_3_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_frm = REG_3_info_frm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vlmul = REG_3_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vsew = REG_3_info_vsew;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_ma = REG_3_info_ma;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_ta = REG_3_info_ta;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_destEew = REG_3_info_destEew;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_expdIdx = REG_3_expdIdx;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_expdEnd = REG_3_expdEnd;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_sysUop_robIdx_flag = REG_3_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_sysUop_robIdx_value = REG_3_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_maskKeep = REG_3_maskKeep;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_maskOff = REG_3_maskOff;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_vfpCtrl_fmaCmd = REG_3_vfpCtrl_fmaCmd;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_addend = toAdd_addend_r_1;	// @[Reg.scala:19:16]
  assign toAdd_prestart = toAdd_prestart_r_1;	// @[Reg.scala:19:16]
  assign toAdd_mask = toAdd_mask_r_1;	// @[Reg.scala:19:16]
  assign toAdd_tail = toAdd_tail_r_1;	// @[Reg.scala:19:16]
  assign toAdd_uop_ctrl_lsrc_0 = REG_3_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_ctrl_lsrc_1 = REG_3_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_ctrl_ldest = REG_3_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_ctrl_vm = REG_3_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_ctrl_funct6 = REG_3_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_ctrl_funct3 = REG_3_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_ctrl_widen = REG_3_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_ctrl_widen2 = REG_3_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_ctrl_narrow = REG_3_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_ctrl_narrow_to_1 = REG_3_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_info_vstart = REG_3_info_vstart;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_info_vl = REG_3_info_vl;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_info_vxrm = REG_3_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_info_frm = REG_3_info_frm;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_info_vlmul = REG_3_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_info_vsew = REG_3_info_vsew;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_info_ma = REG_3_info_ma;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_info_ta = REG_3_info_ta;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_info_destEew = REG_3_info_destEew;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_expdIdx = REG_3_expdIdx;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_expdEnd = REG_3_expdEnd;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_sysUop_robIdx_flag = REG_3_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_sysUop_robIdx_value = REG_3_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_maskKeep = REG_3_maskKeep;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_maskOff = REG_3_maskOff;	// @[VFPUSubModule.scala:63:57]
  assign toAdd_uop_typeTag = REG_3_typeTag;	// @[VFPUSubModule.scala:63:57]
endmodule

