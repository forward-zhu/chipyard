// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module CSA4to2_6(
  input  [7:0] io_in_a,
               io_in_b,
               io_in_c,
               io_in_d,
  output [7:0] io_out_sum,
               io_out_car
);

  wire cout_vec_0 = io_in_a[0] ^ io_in_b[0] ? io_in_c[0] : io_in_a[0];	// @[Reduction.scala:702:{23,31,35,44,56}]
  wire cout_vec_1 = io_in_a[1] ^ io_in_b[1] ? io_in_c[1] : io_in_a[1];	// @[Reduction.scala:702:{23,31,35,44,56}]
  wire cout_vec_2 = io_in_a[2] ^ io_in_b[2] ? io_in_c[2] : io_in_a[2];	// @[Reduction.scala:702:{23,31,35,44,56}]
  wire cout_vec_3 = io_in_a[3] ^ io_in_b[3] ? io_in_c[3] : io_in_a[3];	// @[Reduction.scala:702:{23,31,35,44,56}]
  wire cout_vec_4 = io_in_a[4] ^ io_in_b[4] ? io_in_c[4] : io_in_a[4];	// @[Reduction.scala:702:{23,31,35,44,56}]
  wire cout_vec_5 = io_in_a[5] ^ io_in_b[5] ? io_in_c[5] : io_in_a[5];	// @[Reduction.scala:702:{23,31,35,44,56}]
  assign io_out_sum = {io_in_a[6] ^ io_in_b[6] ^ io_in_c[6] ^ io_in_d[6] ? cout_vec_5 : io_in_d[6], io_in_a[6] ^ io_in_b[6] ^ io_in_c[6] ^ io_in_d[6] ^ cout_vec_5, io_in_a[4] ^ io_in_b[4] ^ io_in_c[4] ^ io_in_d[4] ? cout_vec_3 : io_in_d[4], io_in_a[4] ^ io_in_b[4] ^ io_in_c[4] ^ io_in_d[4] ^ cout_vec_3, io_in_a[2] ^ io_in_b[2] ^ io_in_c[2] ^ io_in_d[2] ? cout_vec_1 : io_in_d[2], io_in_a[2] ^ io_in_b[2] ^ io_in_c[2] ^ io_in_d[2] ^ cout_vec_1, (io_in_a[0] ^ io_in_b[0] ^ io_in_c[0] ^ ~(io_in_d[0])) & io_in_d[0], io_in_a[0] ^ io_in_b[0] ^ io_in_c[0] ^ io_in_d[0]};	// @[Reduction.scala:702:{23,31,44,56}, :704:{58,67}, :705:26, :708:{67,71}, :709:{26,64}, :728:30]
  assign io_out_car = {io_in_a[7] ^ io_in_b[7] ^ io_in_c[7] ^ io_in_d[7] ^ (io_in_a[6] ^ io_in_b[6] ? io_in_c[6] : io_in_a[6]), io_in_a[5] ^ io_in_b[5] ^ io_in_c[5] ^ io_in_d[5] ? cout_vec_4 : io_in_d[5], io_in_a[5] ^ io_in_b[5] ^ io_in_c[5] ^ io_in_d[5] ^ cout_vec_4, io_in_a[3] ^ io_in_b[3] ^ io_in_c[3] ^ io_in_d[3] ? cout_vec_2 : io_in_d[3], io_in_a[3] ^ io_in_b[3] ^ io_in_c[3] ^ io_in_d[3] ^ cout_vec_2, io_in_a[1] ^ io_in_b[1] ^ io_in_c[1] ^ io_in_d[1] ? cout_vec_0 : io_in_d[1], io_in_a[1] ^ io_in_b[1] ^ io_in_c[1] ^ io_in_d[1] ^ cout_vec_0, 1'h0};	// @[Reduction.scala:702:{23,31,35,44,56}, :705:26, :708:{67,71}, :709:{26,64}, :729:32]
endmodule

