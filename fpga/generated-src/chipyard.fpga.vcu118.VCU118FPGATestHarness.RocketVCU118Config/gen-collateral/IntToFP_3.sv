// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module IntToFP_3(
  input  [63:0] io_int,
  input         io_sign,
                io_long,
  input  [2:0]  io_rm,
  output [63:0] io_result,
  output [4:0]  io_fflags
);

  wire [62:0] _pre_norm_io_out_norm_int;	// @[IntToFP.scala:103:24]
  wire [5:0]  _pre_norm_io_out_lzc;	// @[IntToFP.scala:103:24]
  wire        _pre_norm_io_out_is_zero;	// @[IntToFP.scala:103:24]
  wire        _pre_norm_io_out_sign;	// @[IntToFP.scala:103:24]
  IntToFP_prenorm pre_norm (	// @[IntToFP.scala:103:24]
    .io_in_int       (io_int),
    .io_in_sign      (io_sign),
    .io_in_long      (io_long),
    .io_out_norm_int (_pre_norm_io_out_norm_int),
    .io_out_lzc      (_pre_norm_io_out_lzc),
    .io_out_is_zero  (_pre_norm_io_out_is_zero),
    .io_out_sign     (_pre_norm_io_out_sign)
  );
  IntToFP_postnorm_2 post_norm (	// @[IntToFP.scala:104:25]
    .io_in_norm_int (_pre_norm_io_out_norm_int),	// @[IntToFP.scala:103:24]
    .io_in_lzc      (_pre_norm_io_out_lzc),	// @[IntToFP.scala:103:24]
    .io_in_is_zero  (_pre_norm_io_out_is_zero),	// @[IntToFP.scala:103:24]
    .io_in_sign     (_pre_norm_io_out_sign),	// @[IntToFP.scala:103:24]
    .io_rm          (io_rm),
    .io_result      (io_result),
    .io_fflags      (io_fflags)
  );
endmodule

