// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SRT16DividerDataModule(
  input         clock,
                reset,
  input  [63:0] io_src_0,
                io_src_1,
  input         io_valid,
                io_sign,
                io_isHi,
  output        io_in_ready,
                io_out_valid,
  output [63:0] io_out_data
);

  wire [63:0]     _rightShifter_io_out;	// @[SRT16Divider.scala:377:28]
  wire [12:0]     _signs2_csa_spec_4_3_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_4_3_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_4_2_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_4_2_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_4_1_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_4_1_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_4_0_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_4_0_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _csa_spec_4_io_out_0;	// @[SRT16Divider.scala:302:22]
  wire [12:0]     _csa_spec_4_io_out_1;	// @[SRT16Divider.scala:302:22]
  wire [12:0]     _signs2_csa_spec_3_3_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_3_3_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_3_2_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_3_2_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_3_1_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_3_1_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_3_0_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_3_0_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _csa_spec_3_io_out_0;	// @[SRT16Divider.scala:302:22]
  wire [12:0]     _csa_spec_3_io_out_1;	// @[SRT16Divider.scala:302:22]
  wire [12:0]     _signs2_csa_spec_2_3_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_2_3_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_2_2_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_2_2_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_2_1_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_2_1_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_2_0_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_2_0_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _csa_spec_2_io_out_0;	// @[SRT16Divider.scala:302:22]
  wire [12:0]     _csa_spec_2_io_out_1;	// @[SRT16Divider.scala:302:22]
  wire [12:0]     _signs2_csa_spec_1_3_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_1_3_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_1_2_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_1_2_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_1_1_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_1_1_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_1_0_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_1_0_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _csa_spec_1_io_out_0;	// @[SRT16Divider.scala:302:22]
  wire [12:0]     _csa_spec_1_io_out_1;	// @[SRT16Divider.scala:302:22]
  wire [12:0]     _signs2_csa_spec_0_3_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_0_3_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_0_2_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_0_2_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_0_1_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_0_1_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_0_0_io_out_0;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _signs2_csa_spec_0_0_io_out_1;	// @[SRT16Divider.scala:307:24]
  wire [12:0]     _csa_spec_0_io_out_0;	// @[SRT16Divider.scala:302:22]
  wire [12:0]     _csa_spec_0_io_out_1;	// @[SRT16Divider.scala:302:22]
  wire [67:0]     _csa_sel_wide_2_io_out_0;	// @[SRT16Divider.scala:289:24]
  wire [67:0]     _csa_sel_wide_2_io_out_1;	// @[SRT16Divider.scala:289:24]
  wire [67:0]     _csa_sel_wide_1_io_out_0;	// @[SRT16Divider.scala:288:24]
  wire [67:0]     _csa_sel_wide_1_io_out_1;	// @[SRT16Divider.scala:288:24]
  wire [9:0]      _signs_csa_sel_3_io_out_0;	// @[SRT16Divider.scala:280:21]
  wire [9:0]      _signs_csa_sel_3_io_out_1;	// @[SRT16Divider.scala:280:21]
  wire [9:0]      _signs_csa_sel_2_io_out_0;	// @[SRT16Divider.scala:280:21]
  wire [9:0]      _signs_csa_sel_2_io_out_1;	// @[SRT16Divider.scala:280:21]
  wire [9:0]      _signs_csa_sel_1_io_out_0;	// @[SRT16Divider.scala:280:21]
  wire [9:0]      _signs_csa_sel_1_io_out_1;	// @[SRT16Divider.scala:280:21]
  wire [9:0]      _signs_csa_sel_0_io_out_0;	// @[SRT16Divider.scala:280:21]
  wire [9:0]      _signs_csa_sel_0_io_out_1;	// @[SRT16Divider.scala:280:21]
  reg  [6:0]      state;	// @[SRT16Divider.scala:51:22]
  reg  [63:0]     quotIterReg;	// @[Reg.scala:19:16]
  reg  [63:0]     quotM1IterReg;	// @[Reg.scala:19:16]
  reg             specialReg;	// @[Reg.scala:19:16]
  reg  [63:0]     aReg;	// @[Reg.scala:19:16]
  reg             dSignReg;	// @[Reg.scala:19:16]
  reg  [63:0]     aAbsReg;	// @[Reg.scala:19:16]
  reg  [63:0]     dAbsReg;	// @[Reg.scala:19:16]
  reg  [63:0]     aNormReg;	// @[Reg.scala:19:16]
  reg  [63:0]     dNormReg;	// @[Reg.scala:19:16]
  wire [5:0]      _aLZC_T_127 = aAbsReg[63] ? 6'h0 : aAbsReg[62] ? 6'h1 : aAbsReg[61] ? 6'h2 : aAbsReg[60] ? 6'h3 : aAbsReg[59] ? 6'h4 : aAbsReg[58] ? 6'h5 : aAbsReg[57] ? 6'h6 : aAbsReg[56] ? 6'h7 : aAbsReg[55] ? 6'h8 : aAbsReg[54] ? 6'h9 : aAbsReg[53] ? 6'hA : aAbsReg[52] ? 6'hB : aAbsReg[51] ? 6'hC : aAbsReg[50] ? 6'hD : aAbsReg[49] ? 6'hE : aAbsReg[48] ? 6'hF : aAbsReg[47] ? 6'h10 : aAbsReg[46] ? 6'h11 : aAbsReg[45] ? 6'h12 : aAbsReg[44] ? 6'h13 : aAbsReg[43] ? 6'h14 : aAbsReg[42] ? 6'h15 : aAbsReg[41] ? 6'h16 : aAbsReg[40] ? 6'h17 : aAbsReg[39] ? 6'h18 : aAbsReg[38] ? 6'h19 : aAbsReg[37] ? 6'h1A : aAbsReg[36] ? 6'h1B : aAbsReg[35] ? 6'h1C : aAbsReg[34] ? 6'h1D : aAbsReg[33] ? 6'h1E : aAbsReg[32] ? 6'h1F : aAbsReg[31] ? 6'h20 : aAbsReg[30] ? 6'h21 : aAbsReg[29] ? 6'h22 : aAbsReg[28] ? 6'h23 : aAbsReg[27] ? 6'h24 : aAbsReg[26] ? 6'h25 : aAbsReg[25] ? 6'h26 : aAbsReg[24] ? 6'h27 : aAbsReg[23] ? 6'h28 : aAbsReg[22] ? 6'h29 : aAbsReg[21] ? 6'h2A : aAbsReg[20] ? 6'h2B : aAbsReg[19] ? 6'h2C : aAbsReg[18] ? 6'h2D : aAbsReg[17] ? 6'h2E : aAbsReg[16] ? 6'h2F : aAbsReg[15] ? 6'h30 : aAbsReg[14] ? 6'h31 : aAbsReg[13] ? 6'h32 : aAbsReg[12] ? 6'h33 : aAbsReg[11] ? 6'h34 : aAbsReg[10] ? 6'h35 : aAbsReg[9] ? 6'h36 : aAbsReg[8] ? 6'h37 : aAbsReg[7] ? 6'h38 : aAbsReg[6] ? 6'h39 : aAbsReg[5] ? 6'h3A : aAbsReg[4] ? 6'h3B : aAbsReg[3] ? 6'h3C : aAbsReg[2] ? 6'h3D : {5'h1F, ~(aAbsReg[1])};	// @[Mux.scala:47:70, Reg.scala:19:16, SRT16Divider.scala:131:54]
  wire [5:0]      _dLZC_T_127 = dAbsReg[63] ? 6'h0 : dAbsReg[62] ? 6'h1 : dAbsReg[61] ? 6'h2 : dAbsReg[60] ? 6'h3 : dAbsReg[59] ? 6'h4 : dAbsReg[58] ? 6'h5 : dAbsReg[57] ? 6'h6 : dAbsReg[56] ? 6'h7 : dAbsReg[55] ? 6'h8 : dAbsReg[54] ? 6'h9 : dAbsReg[53] ? 6'hA : dAbsReg[52] ? 6'hB : dAbsReg[51] ? 6'hC : dAbsReg[50] ? 6'hD : dAbsReg[49] ? 6'hE : dAbsReg[48] ? 6'hF : dAbsReg[47] ? 6'h10 : dAbsReg[46] ? 6'h11 : dAbsReg[45] ? 6'h12 : dAbsReg[44] ? 6'h13 : dAbsReg[43] ? 6'h14 : dAbsReg[42] ? 6'h15 : dAbsReg[41] ? 6'h16 : dAbsReg[40] ? 6'h17 : dAbsReg[39] ? 6'h18 : dAbsReg[38] ? 6'h19 : dAbsReg[37] ? 6'h1A : dAbsReg[36] ? 6'h1B : dAbsReg[35] ? 6'h1C : dAbsReg[34] ? 6'h1D : dAbsReg[33] ? 6'h1E : dAbsReg[32] ? 6'h1F : dAbsReg[31] ? 6'h20 : dAbsReg[30] ? 6'h21 : dAbsReg[29] ? 6'h22 : dAbsReg[28] ? 6'h23 : dAbsReg[27] ? 6'h24 : dAbsReg[26] ? 6'h25 : dAbsReg[25] ? 6'h26 : dAbsReg[24] ? 6'h27 : dAbsReg[23] ? 6'h28 : dAbsReg[22] ? 6'h29 : dAbsReg[21] ? 6'h2A : dAbsReg[20] ? 6'h2B : dAbsReg[19] ? 6'h2C : dAbsReg[18] ? 6'h2D : dAbsReg[17] ? 6'h2E : dAbsReg[16] ? 6'h2F : dAbsReg[15] ? 6'h30 : dAbsReg[14] ? 6'h31 : dAbsReg[13] ? 6'h32 : dAbsReg[12] ? 6'h33 : dAbsReg[11] ? 6'h34 : dAbsReg[10] ? 6'h35 : dAbsReg[9] ? 6'h36 : dAbsReg[8] ? 6'h37 : dAbsReg[7] ? 6'h38 : dAbsReg[6] ? 6'h39 : dAbsReg[5] ? 6'h3A : dAbsReg[4] ? 6'h3B : dAbsReg[3] ? 6'h3C : dAbsReg[2] ? 6'h3D : {5'h1F, ~(dAbsReg[1])};	// @[Mux.scala:47:70, Reg.scala:19:16, SRT16Divider.scala:132:54]
  reg  [6:0]      aLZCReg;	// @[Reg.scala:19:16]
  reg  [6:0]      dLZCReg;	// @[Reg.scala:19:16]
  reg             aTooSmall;	// @[Reg.scala:19:16]
  reg  [63:0]     aRegNeg;	// @[Reg.scala:19:16]
  reg  [63:0]     quotSpecialReg;	// @[Reg.scala:19:16]
  reg  [63:0]     remSpecialReg;	// @[Reg.scala:19:16]
  reg             quotSignReg;	// @[Reg.scala:19:16]
  reg             rSignReg;	// @[Reg.scala:19:16]
  reg  [3:0]      iterNumReg;	// @[Reg.scala:19:16]
  reg  [4:0]      qPrevReg;	// @[Reg.scala:19:16]
  reg  [67:0]     rSumReg;	// @[Reg.scala:19:16]
  reg  [67:0]     rCarryReg;	// @[Reg.scala:19:16]
  reg  [67:0]     udNegReg_0;	// @[Reg.scala:19:16]
  reg  [67:0]     udNegReg_1;	// @[Reg.scala:19:16]
  reg  [67:0]     udNegReg_2;	// @[Reg.scala:19:16]
  reg  [67:0]     udNegReg_3;	// @[Reg.scala:19:16]
  reg  [67:0]     udNegReg_4;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_0_0;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_0_1;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_0_2;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_0_3;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_1_0;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_1_1;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_1_2;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_1_3;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_2_0;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_2_1;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_2_2;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_2_3;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_3_0;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_3_1;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_3_2;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_3_3;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_4_0;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_4_1;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_4_2;	// @[Reg.scala:19:16]
  reg  [9:0]      rudPmNegReg_4_3;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_0_0;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_0_1;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_0_2;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_0_3;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_1_0;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_1_1;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_1_2;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_1_3;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_2_0;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_2_1;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_2_2;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_2_3;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_3_0;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_3_1;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_3_2;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_3_3;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_4_0;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_4_1;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_4_2;	// @[Reg.scala:19:16]
  reg  [12:0]     r2udPmNegReg_4_3;	// @[Reg.scala:19:16]
  wire [9:0]      _GEN = _signs_csa_sel_0_io_out_0 + {_signs_csa_sel_0_io_out_1[8:0], 1'h0};	// @[SRT16Divider.scala:280:21, :285:{20,36}]
  wire [9:0]      _GEN_0 = _signs_csa_sel_1_io_out_0 + {_signs_csa_sel_1_io_out_1[8:0], 1'h0};	// @[SRT16Divider.scala:280:21, :285:{20,36}]
  wire [9:0]      _GEN_1 = _signs_csa_sel_2_io_out_0 + {_signs_csa_sel_2_io_out_1[8:0], 1'h0};	// @[SRT16Divider.scala:280:21, :285:{20,36}]
  wire [9:0]      _GEN_2 = _signs_csa_sel_3_io_out_0 + {_signs_csa_sel_3_io_out_1[8:0], 1'h0};	// @[SRT16Divider.scala:280:21, :285:{20,36}]
  wire            qNext_sel_q_0 = _GEN[9] & _GEN_0[9] & _GEN_1[9];	// @[SRT16Divider.scala:271:46, :285:{20,49}]
  wire            qNext_sel_q_1 = ~(_GEN[9]) & _GEN_0[9] & _GEN_1[9];	// @[SRT16Divider.scala:272:{25,47}, :285:{20,49}]
  wire            qNext_sel_q_2 = _GEN_1[9] & ~(_GEN_0[9]);	// @[SRT16Divider.scala:273:{30,33}, :285:{20,49}]
  wire            qNext_sel_q_3 = _GEN_2[9] & ~(_GEN_1[9]) & ~(_GEN_0[9]);	// @[SRT16Divider.scala:274:{37,47,50}, :285:{20,49}]
  wire            qNext_sel_q_4 = ~(_GEN_2[9]) & ~(_GEN_1[9]) & ~(_GEN_0[9]);	// @[SRT16Divider.scala:275:{25,38,48,51}, :285:{20,49}]
  reg  [64:0]     r;	// @[Reg.scala:19:16]
  reg  [64:0]     rNextPdReg;	// @[Reg.scala:19:16]
  wire            needCorr = rSignReg ? ~(r[64]) & (|r) : r[64];	// @[Reg.scala:19:16, SRT16Divider.scala:374:24, :375:{21,32,34,40}]
  wire [64:0]     rPreShifted = needCorr ? rNextPdReg : r;	// @[Reg.scala:19:16, SRT16Divider.scala:375:21, :376:24]
  reg  [63:0]     rFinal;	// @[Reg.scala:19:16]
  reg  [63:0]     qFinal;	// @[Reg.scala:19:16]
  wire [126:0]    _aNorm_T_2 = {63'h0, aAbsReg} << _aLZC_T_127;	// @[Mux.scala:47:70, Reg.scala:19:16, SRT16Divider.scala:111:36]
  wire [126:0]    _dNorm_T_2 = {63'h0, dAbsReg} << _dLZC_T_127;	// @[Mux.scala:47:70, Reg.scala:19:16, SRT16Divider.scala:111:36, :112:36]
  wire [6:0]      _GEN_3 = {1'h0, _dLZC_T_127} - {1'h0, _aLZC_T_127};	// @[Mux.scala:47:70, SRT16Divider.scala:136:59]
  wire [12:0]     _GEN_4 = _signs2_csa_spec_0_0_io_out_0 + {_signs2_csa_spec_0_0_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_5 = _signs2_csa_spec_0_1_io_out_0 + {_signs2_csa_spec_0_1_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_6 = _signs2_csa_spec_0_2_io_out_0 + {_signs2_csa_spec_0_2_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_7 = _signs2_csa_spec_0_3_io_out_0 + {_signs2_csa_spec_0_3_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_8 = _signs2_csa_spec_1_0_io_out_0 + {_signs2_csa_spec_1_0_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_9 = _signs2_csa_spec_1_1_io_out_0 + {_signs2_csa_spec_1_1_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_10 = _signs2_csa_spec_1_2_io_out_0 + {_signs2_csa_spec_1_2_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_11 = _signs2_csa_spec_1_3_io_out_0 + {_signs2_csa_spec_1_3_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_12 = _signs2_csa_spec_2_0_io_out_0 + {_signs2_csa_spec_2_0_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_13 = _signs2_csa_spec_2_1_io_out_0 + {_signs2_csa_spec_2_1_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_14 = _signs2_csa_spec_2_2_io_out_0 + {_signs2_csa_spec_2_2_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_15 = _signs2_csa_spec_2_3_io_out_0 + {_signs2_csa_spec_2_3_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_16 = _signs2_csa_spec_3_0_io_out_0 + {_signs2_csa_spec_3_0_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_17 = _signs2_csa_spec_3_1_io_out_0 + {_signs2_csa_spec_3_1_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_18 = _signs2_csa_spec_3_2_io_out_0 + {_signs2_csa_spec_3_2_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_19 = _signs2_csa_spec_3_3_io_out_0 + {_signs2_csa_spec_3_3_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_20 = _signs2_csa_spec_4_0_io_out_0 + {_signs2_csa_spec_4_0_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_21 = _signs2_csa_spec_4_1_io_out_0 + {_signs2_csa_spec_4_1_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_22 = _signs2_csa_spec_4_2_io_out_0 + {_signs2_csa_spec_4_2_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [12:0]     _GEN_23 = _signs2_csa_spec_4_3_io_out_0 + {_signs2_csa_spec_4_3_io_out_1[11:0], 1'h0};	// @[SRT16Divider.scala:307:24, :311:{23,40}]
  wire [9:0]      _GEN_24 = {2'h0, dNormReg[63:56]};	// @[Cat.scala:33:92, Reg.scala:19:16, SRT16Divider.scala:256:{91,103}]
  wire [9:0]      _GEN_25 = {3'h0, dNormReg[63:57]};	// @[OneHot.scala:64:12, Reg.scala:19:16, SRT16Divider.scala:256:{91,103}]
  wire [12:0]     _GEN_26 = {2'h0, dNormReg[63:53]};	// @[Cat.scala:33:92, Reg.scala:19:16, SRT16Divider.scala:254:51, :257:99]
  wire [12:0]     _GEN_27 = {3'h0, dNormReg[63:54]};	// @[OneHot.scala:64:12, Reg.scala:19:16, SRT16Divider.scala:254:51, :257:99]
  wire [67:0]     _rNext_T_5 = ~rSumReg + ~rCarryReg + 68'h2;	// @[Reg.scala:19:16, SRT16Divider.scala:362:{14,25,36}]
  wire [67:0]     _rNextPd_T_9 = ~rSumReg + ~rCarryReg + {1'h1, ~dNormReg, 3'h7} + 68'h3;	// @[Mux.scala:47:70, Reg.scala:19:16, SRT16Divider.scala:362:{14,25}, :363:{38,40,75}]
  wire [7:0][6:0] _GEN_28 = '{7'h52, 7'h56, 7'h58, 7'h5C, 7'h5E, 7'h62, 7'h64, 7'h68};	// @[Mux.scala:81:{58,61}]
  wire            in_fire = io_valid & state[0];	// @[SRT16Divider.scala:44:23, :51:22, :389:23]
  wire [63:0]     aInverter = 64'h0 - (state[0] ? io_src_0 : quotIterReg);	// @[Reg.scala:19:16, SRT16Divider.scala:51:22, :99:{16,20,26}, :354:8]
  wire [63:0]     dInverter = 64'h0 - (state[0] ? io_src_1 : quotM1IterReg);	// @[Reg.scala:19:16, SRT16Divider.scala:51:22, :100:{16,20,26}, :354:8]
  wire            aSign = io_sign & io_src_0[63];	// @[SRT16Divider.scala:102:{23,27}]
  wire            dSign = io_sign & io_src_1[63];	// @[SRT16Divider.scala:103:{23,27}]
  wire [5:0]      _GEN_29 = dLZCReg[5:0] - aLZCReg[5:0];	// @[Reg.scala:19:16, SRT16Divider.scala:137:{41,61,84}]
  wire            dIsZero = dNormReg == 64'h0;	// @[Reg.scala:19:16, SRT16Divider.scala:144:30, :354:8]
  wire            special = (&_dLZC_T_127) | dIsZero | aTooSmall;	// @[Mux.scala:47:70, Reg.scala:19:16, SRT16Divider.scala:143:43, :144:30, :147:31]
  wire [64:0]     _rSumInit_T_2 = _GEN_29[0] ? {1'h0, aNormReg} : {aNormReg, 1'h0};	// @[Cat.scala:33:92, Reg.scala:19:16, SRT16Divider.scala:137:61, :164:26, :171:35]
  wire [64:0]     dNeg = 65'h0 - {1'h0, dNormReg};	// @[Reg.scala:19:16, SRT16Divider.scala:99:16, :206:14]
  wire [6:0]      _T_20 = {4'h3, dNormReg[62:60] == 3'h1, 2'h2};	// @[Mux.scala:81:{58,61}, Reg.scala:19:16, SRT16Divider.scala:175:37]
  wire [7:0][6:0] _GEN_30 = {{7'h30}, {7'h2C}, {7'h2A}, {7'h26}, {7'h24}, {7'h20}, {_T_20}, {_T_20}};	// @[Mux.scala:81:{58,61}]
  wire [6:0]      _T_32 = _GEN_30[dNormReg[62:60]];	// @[Mux.scala:81:{58,61}, Reg.scala:19:16, SRT16Divider.scala:175:37]
  wire [6:0]      _T_51 = (&(dNormReg[62:60])) | dNormReg[62:60] == 3'h6 | dNormReg[62:60] == 3'h5 | dNormReg[62:60] == 3'h4 ? 7'h8 : {5'h1, dNormReg[62:60] == 3'h3 | dNormReg[62:60] == 3'h2 | dNormReg[62:60] == 3'h1, 1'h0};	// @[Mux.scala:81:{58,61}, OneHot.scala:64:12, Reg.scala:19:16, SRT16Divider.scala:73:79, :175:37]
  wire [6:0]      _T_70 = (&(dNormReg[62:60])) | dNormReg[62:60] == 3'h6 | dNormReg[62:60] == 3'h5 ? 7'h7A : dNormReg[62:60] == 3'h4 ? 7'h7B : {6'h3E, ~(dNormReg[62:60] == 3'h3 | dNormReg[62:60] == 3'h2 | dNormReg[62:60] == 3'h1)};	// @[Mux.scala:81:{58,61}, OneHot.scala:64:12, Reg.scala:19:16, SRT16Divider.scala:73:79, :175:37]
  wire [6:0]      _T_89 = _GEN_28[dNormReg[62:60]];	// @[Mux.scala:81:{58,61}, Reg.scala:19:16, SRT16Divider.scala:175:37]
  wire [1:0]      _GEN_31 = {2{dNeg[64]}};	// @[Cat.scala:33:92, DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:206:14]
  wire            _quotM1IterNext_T = _GEN_29[1] ^ ~(_GEN_29[0]);	// @[SRT16Divider.scala:137:61, :164:26, :165:27, :296:19]
  wire [63:0]     _GEN_32 = {quotIterReg[61:0], 2'h1};	// @[Reg.scala:19:16, SRT16Divider.scala:327:30, :328:35]
  wire [63:0]     _GEN_33 = {quotIterReg[61:0], 2'h0};	// @[Cat.scala:33:92, Reg.scala:19:16, SRT16Divider.scala:327:30]
  wire [63:0]     _GEN_34 = {quotM1IterReg[61:0], 2'h3};	// @[Reg.scala:19:16, SRT16Divider.scala:256:103, :330:32]
  wire [63:0]     _GEN_35 = {quotM1IterReg[61:0], 2'h2};	// @[Mux.scala:81:58, Reg.scala:19:16, SRT16Divider.scala:330:32]
  wire [63:0]     quotHalfIter = (qPrevReg[4] ? {quotIterReg[61:0], 2'h2} : 64'h0) | (qPrevReg[3] ? _GEN_32 : 64'h0) | (qPrevReg[2] ? _GEN_33 : 64'h0) | (qPrevReg[1] ? _GEN_34 : 64'h0) | (qPrevReg[0] ? _GEN_35 : 64'h0);	// @[Mux.scala:27:73, :81:58, Reg.scala:19:16, SRT16Divider.scala:73:79, :327:{8,30}, :328:8, :329:8, :330:{8,32}, :331:8, :354:8]
  wire [63:0]     quotM1HalfIter = (qPrevReg[4] ? _GEN_32 : 64'h0) | (qPrevReg[3] ? _GEN_33 : 64'h0) | (qPrevReg[2] ? _GEN_34 : 64'h0) | (qPrevReg[1] ? _GEN_35 : 64'h0) | (qPrevReg[0] ? {quotM1IterReg[61:0], 2'h1} : 64'h0);	// @[Mux.scala:27:73, Reg.scala:19:16, SRT16Divider.scala:73:79, :327:{8,30}, :328:35, :330:32, :335:8, :336:8, :337:8, :338:8, :354:8]
  wire [63:0]     _GEN_36 = {quotHalfIter[61:0], 2'h1};	// @[Mux.scala:27:73, SRT16Divider.scala:327:30, :328:35]
  wire [63:0]     _GEN_37 = {quotHalfIter[61:0], 2'h0};	// @[Cat.scala:33:92, Mux.scala:27:73, SRT16Divider.scala:327:30]
  wire [63:0]     _GEN_38 = {quotM1HalfIter[61:0], 2'h3};	// @[Mux.scala:27:73, SRT16Divider.scala:256:103, :330:32]
  wire [63:0]     _GEN_39 = {quotM1HalfIter[61:0], 2'h2};	// @[Mux.scala:27:73, :81:58, SRT16Divider.scala:330:32]
  wire [67:0]     _rNext_T_7 = rSumReg + rCarryReg;	// @[Reg.scala:19:16, SRT16Divider.scala:365:22]
  wire [5:0]      _GEN_40 = _GEN_29 + 6'h1;	// @[Mux.scala:47:70, SRT16Divider.scala:137:61, :168:46]
  wire [4:0]      rSumInitTrunc = {1'h0, _rSumInit_T_2[64:61]};	// @[Cat.scala:33:92, SRT16Divider.scala:171:35, :174:45]
  wire [2:0]      _GEN_41 = {3{_T_32[6]}};	// @[DivUtils.scala:74:20, Mux.scala:81:58, SRT16Divider.scala:256:112]
  wire [9:0]      _GEN_42 = {_GEN_41, _T_32};	// @[Mux.scala:81:58, SRT16Divider.scala:256:{103,112}]
  wire [9:0]      _GEN_43 = {2'h0, _T_51, 1'h0};	// @[Cat.scala:33:92, Mux.scala:81:58, SRT16Divider.scala:256:103]
  wire [9:0]      _GEN_44 = {2'h3, _T_70, 1'h0};	// @[Mux.scala:81:58, SRT16Divider.scala:256:103]
  wire [2:0]      _GEN_45 = {3{_T_89[6]}};	// @[DivUtils.scala:74:20, Mux.scala:81:58, SRT16Divider.scala:256:112]
  wire [9:0]      _GEN_46 = {_GEN_45, _T_89};	// @[Mux.scala:81:58, SRT16Divider.scala:256:{103,112}]
  wire [9:0]      _GEN_47 = {_GEN_31, dNeg[64:57]};	// @[Cat.scala:33:92, Reg.scala:19:16, SRT16Divider.scala:206:14, :256:{91,103}]
  wire [4:0]      _GEN_48 = {5{_T_32[6]}};	// @[Cat.scala:33:92, DivUtils.scala:74:20, Mux.scala:81:58]
  wire [12:0]     _GEN_49 = {_GEN_48, _T_32, 1'h0};	// @[Cat.scala:33:92, Mux.scala:81:58, SRT16Divider.scala:257:99]
  wire [12:0]     _GEN_50 = {4'h0, _T_51, 2'h0};	// @[Bitwise.scala:77:12, Cat.scala:33:92, Mux.scala:81:58, SRT16Divider.scala:257:99]
  wire [12:0]     _GEN_51 = {4'hF, _T_70, 2'h0};	// @[Cat.scala:33:92, Mux.scala:47:70, :81:58, SRT16Divider.scala:257:99]
  wire [4:0]      _GEN_52 = {5{_T_89[6]}};	// @[Cat.scala:33:92, DivUtils.scala:74:20, Mux.scala:81:58]
  wire [12:0]     _GEN_53 = {_GEN_52, _T_89, 1'h0};	// @[Cat.scala:33:92, Mux.scala:81:58, SRT16Divider.scala:257:99]
  wire [12:0]     _GEN_54 = {_GEN_31, dNeg[64:54]};	// @[Cat.scala:33:92, Reg.scala:19:16, SRT16Divider.scala:206:14, :254:51, :257:99]
  wire [12:0]     _GEN_55 = {dNeg[64], dNeg[64:53]};	// @[DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:206:14, :254:51, :257:99]
  wire [67:0]     _rNextPd_T_14 = _rNext_T_7 + {1'h0, dNormReg, 3'h0};	// @[OneHot.scala:64:12, Reg.scala:19:16, SRT16Divider.scala:365:22, :366:36]
  always @(posedge clock) begin
    if (reset)
      state <= 7'h1;	// @[SRT16Divider.scala:51:22]
    else if (state[0] & in_fire)	// @[SRT16Divider.scala:44:23, :51:22, :80:{20,29}]
      state <= 7'h2;	// @[OneHot.scala:64:27, SRT16Divider.scala:51:22]
    else if (state[1])	// @[SRT16Divider.scala:51:22, :82:20]
      state <= 7'h4;	// @[Mux.scala:81:58, SRT16Divider.scala:51:22]
    else if (state[2]) begin	// @[SRT16Divider.scala:51:22, :84:20]
      if (special)	// @[SRT16Divider.scala:147:31]
        state <= 7'h20;	// @[Mux.scala:81:58, SRT16Divider.scala:51:22]
      else	// @[SRT16Divider.scala:147:31]
        state <= 7'h8;	// @[Mux.scala:81:58, SRT16Divider.scala:51:22]
    end
    else if (state[3]) begin	// @[SRT16Divider.scala:51:22, :86:20]
      if (|iterNumReg)	// @[Reg.scala:19:16, SRT16Divider.scala:169:27]
        state <= 7'h8;	// @[Mux.scala:81:58, SRT16Divider.scala:51:22]
      else	// @[SRT16Divider.scala:169:27]
        state <= 7'h10;	// @[OneHot.scala:64:27, SRT16Divider.scala:51:22]
    end
    else if (state[4])	// @[SRT16Divider.scala:51:22, :88:20]
      state <= 7'h20;	// @[Mux.scala:81:58, SRT16Divider.scala:51:22]
    else if (state[5] & state[5])	// @[SRT16Divider.scala:51:22, :90:{20,31}, :390:24]
      state <= 7'h40;	// @[OneHot.scala:64:27, SRT16Divider.scala:51:22]
    else if (state[6])	// @[OneHot.scala:64:12, SRT16Divider.scala:51:22, :92:20]
      state <= 7'h1;	// @[SRT16Divider.scala:51:22]
    if (state[2] | state[3] | state[4]) begin	// @[SRT16Divider.scala:51:22, :73:{46,63,72,79}]
      if (state[3]) begin	// @[SRT16Divider.scala:51:22, :353:24]
        if (_quotM1IterNext_T & ~(|iterNumReg))	// @[Reg.scala:19:16, SRT16Divider.scala:169:27, :296:19, :344:32]
          quotIterReg <= quotHalfIter;	// @[Mux.scala:27:73, Reg.scala:19:16]
        else	// @[SRT16Divider.scala:344:32]
          quotIterReg <= (qNext_sel_q_4 ? {quotHalfIter[61:0], 2'h2} : 64'h0) | (qNext_sel_q_3 ? _GEN_36 : 64'h0) | (qNext_sel_q_2 ? _GEN_37 : 64'h0) | (qNext_sel_q_1 ? _GEN_38 : 64'h0) | (qNext_sel_q_0 ? _GEN_39 : 64'h0);	// @[Mux.scala:27:73, :81:58, Reg.scala:19:16, SRT16Divider.scala:271:46, :272:47, :273:30, :274:47, :275:48, :327:30, :330:32, :354:8]
      end
      else if (state[2])	// @[SRT16Divider.scala:51:22, :354:14]
        quotIterReg <= 64'h0;	// @[Reg.scala:19:16, SRT16Divider.scala:354:8]
      else if (quotSignReg)	// @[Reg.scala:19:16]
        quotIterReg <= aInverter;	// @[Reg.scala:19:16, SRT16Divider.scala:99:16]
    end
    if (state[2] | state[3] | state[4]) begin	// @[SRT16Divider.scala:51:22, :74:{50,67,76,83}]
      if (state[3]) begin	// @[SRT16Divider.scala:51:22, :356:26]
        if (_quotM1IterNext_T & ~(|iterNumReg))	// @[Reg.scala:19:16, SRT16Divider.scala:169:27, :296:19, :345:34]
          quotM1IterReg <= quotM1HalfIter;	// @[Mux.scala:27:73, Reg.scala:19:16]
        else	// @[SRT16Divider.scala:345:34]
          quotM1IterReg <= (qNext_sel_q_4 ? _GEN_36 : 64'h0) | (qNext_sel_q_3 ? _GEN_37 : 64'h0) | (qNext_sel_q_2 ? _GEN_38 : 64'h0) | (qNext_sel_q_1 ? _GEN_39 : 64'h0) | (qNext_sel_q_0 ? {quotM1HalfIter[61:0], 2'h1} : 64'h0);	// @[Mux.scala:27:73, Reg.scala:19:16, SRT16Divider.scala:271:46, :272:47, :273:30, :274:47, :275:48, :327:30, :328:35, :330:32, :354:8]
      end
      else if (state[2])	// @[SRT16Divider.scala:51:22, :357:14]
        quotM1IterReg <= 64'h0;	// @[Reg.scala:19:16, SRT16Divider.scala:354:8]
      else if (quotSignReg)	// @[Reg.scala:19:16]
        quotM1IterReg <= dInverter;	// @[Reg.scala:19:16, SRT16Divider.scala:100:16]
    end
    if (state[2])	// @[SRT16Divider.scala:51:22, :75:44]
      specialReg <= special;	// @[Reg.scala:19:16, SRT16Divider.scala:147:31]
    if (in_fire) begin	// @[SRT16Divider.scala:44:23]
      aReg <= io_src_0;	// @[Reg.scala:19:16]
      dSignReg <= dSign;	// @[Reg.scala:19:16, SRT16Divider.scala:103:23]
      if (aSign)	// @[SRT16Divider.scala:102:23]
        aAbsReg <= aInverter;	// @[Reg.scala:19:16, SRT16Divider.scala:99:16]
      else	// @[SRT16Divider.scala:102:23]
        aAbsReg <= io_src_0;	// @[Reg.scala:19:16]
      if (dSign)	// @[SRT16Divider.scala:103:23]
        dAbsReg <= dInverter;	// @[Reg.scala:19:16, SRT16Divider.scala:100:16]
      else	// @[SRT16Divider.scala:103:23]
        dAbsReg <= io_src_1;	// @[Reg.scala:19:16]
      rSignReg <= aSign;	// @[Reg.scala:19:16, SRT16Divider.scala:102:23]
    end
    if (state[1])	// @[SRT16Divider.scala:51:22, :114:40]
      aNormReg <= _aNorm_T_2[63:0];	// @[Reg.scala:19:16, SRT16Divider.scala:111:{36,62}]
    if (state[1])	// @[SRT16Divider.scala:51:22, :115:40]
      dNormReg <= _dNorm_T_2[63:0];	// @[Reg.scala:19:16, SRT16Divider.scala:112:{36,62}]
    if (state[1])	// @[SRT16Divider.scala:51:22, :133:38]
      aLZCReg <= {1'h0, _aLZC_T_127};	// @[Mux.scala:47:70, Reg.scala:19:16, SRT16Divider.scala:131:8]
    if (state[1])	// @[SRT16Divider.scala:51:22, :134:38]
      dLZCReg <= {1'h0, _dLZC_T_127};	// @[Mux.scala:47:70, Reg.scala:19:16, SRT16Divider.scala:132:8]
    if (state[1])	// @[SRT16Divider.scala:51:22, :146:76]
      aTooSmall <= _GEN_3[6];	// @[Reg.scala:19:16, SRT16Divider.scala:136:59, :146:58]
    if (state[1])	// @[SRT16Divider.scala:51:22, :148:39]
      aRegNeg <= 64'h0 - aReg;	// @[Reg.scala:19:16, SRT16Divider.scala:148:27, :354:8]
    if (state[2]) begin	// @[SRT16Divider.scala:51:22, :155:52]
      if (dIsZero)	// @[SRT16Divider.scala:144:30]
        quotSpecialReg <= 64'hFFFFFFFFFFFFFFFF;	// @[Reg.scala:19:16, SRT16Divider.scala:150:65]
      else if (aTooSmall)	// @[Reg.scala:19:16]
        quotSpecialReg <= 64'h0;	// @[Reg.scala:19:16, SRT16Divider.scala:354:8]
      else if (dSignReg)	// @[Reg.scala:19:16]
        quotSpecialReg <= aRegNeg;	// @[Reg.scala:19:16]
      else	// @[Reg.scala:19:16]
        quotSpecialReg <= aReg;	// @[Reg.scala:19:16]
    end
    if (state[2]) begin	// @[SRT16Divider.scala:51:22, :156:50]
      if (dIsZero | aTooSmall)	// @[Reg.scala:19:16, SRT16Divider.scala:144:30, :154:32]
        remSpecialReg <= aReg;	// @[Reg.scala:19:16]
      else	// @[SRT16Divider.scala:154:32]
        remSpecialReg <= 64'h0;	// @[Reg.scala:19:16, SRT16Divider.scala:354:8]
    end
    if (in_fire | state[2] & dIsZero)	// @[SRT16Divider.scala:44:23, :51:22, :144:30, :161:{49,57,67}]
      quotSignReg <= ~(state[0]) | aSign ^ dSign;	// @[Reg.scala:19:16, SRT16Divider.scala:51:22, :102:23, :103:23, :159:{21,27,43}]
    if (state[2] | state[3])	// @[SRT16Divider.scala:51:22, :167:{44,54,61}]
      iterNumReg <= state[2] ? _GEN_40[5:2] : iterNumReg - 4'h1;	// @[Reg.scala:19:16, SRT16Divider.scala:51:22, :168:{17,23,46,53,70}]
    if (state[2] | state[3]) begin	// @[SRT16Divider.scala:51:22, :235:{69,79,86}]
      if (state[2]) begin	// @[SRT16Divider.scala:51:22, :235:37]
        if (rSumInitTrunc >= ((&(dNormReg[62:60])) | dNormReg[62:60] == 3'h6 ? 5'h16 : dNormReg[62:60] == 3'h5 ? 5'h14 : dNormReg[62:60] == 3'h4 ? 5'h12 : dNormReg[62:60] == 3'h3 ? 5'h10 : dNormReg[62:60] == 3'h2 ? 5'hF : {3'h3, dNormReg[62:60] == 3'h1, 1'h0}))	// @[Cat.scala:33:92, Mux.scala:47:70, :81:{58,61}, OneHot.scala:64:12, Reg.scala:19:16, SRT16Divider.scala:73:79, :175:37, :200:35]
          qPrevReg <= 5'h10;	// @[Mux.scala:47:70, Reg.scala:19:16]
        else if (rSumInitTrunc >= ((&(dNormReg[62:60])) ? 5'h8 : {3'h1, dNormReg[62:60] == 3'h6 | dNormReg[62:60] == 3'h5 | dNormReg[62:60] == 3'h4 | dNormReg[62:60] == 3'h3, 1'h0}))	// @[Cat.scala:33:92, Mux.scala:81:{58,61}, OneHot.scala:64:12, Reg.scala:19:16, SRT16Divider.scala:73:79, :175:37, :199:35]
          qPrevReg <= 5'h8;	// @[Mux.scala:81:58, Reg.scala:19:16]
        else	// @[SRT16Divider.scala:199:35]
          qPrevReg <= 5'h4;	// @[Mux.scala:81:58, Reg.scala:19:16]
      end
      else	// @[SRT16Divider.scala:235:37]
        qPrevReg <= (qNext_sel_q_0 ? {~(_GEN_7[12]) & ~(_GEN_6[12]) & ~(_GEN_5[12]), _GEN_7[12] & ~(_GEN_6[12]) & ~(_GEN_5[12]), _GEN_6[12] & ~(_GEN_5[12]), ~(_GEN_4[12]) & _GEN_5[12] & _GEN_6[12], _GEN_4[12] & _GEN_5[12] & _GEN_6[12]} : 5'h0) | (qNext_sel_q_1 ? {~(_GEN_11[12]) & ~(_GEN_10[12]) & ~(_GEN_9[12]), _GEN_11[12] & ~(_GEN_10[12]) & ~(_GEN_9[12]), _GEN_10[12] & ~(_GEN_9[12]), ~(_GEN_8[12]) & _GEN_9[12] & _GEN_10[12], _GEN_8[12] & _GEN_9[12] & _GEN_10[12]} : 5'h0) | (qNext_sel_q_2 ? {~(_GEN_15[12]) & ~(_GEN_14[12]) & ~(_GEN_13[12]), _GEN_15[12] & ~(_GEN_14[12]) & ~(_GEN_13[12]), _GEN_14[12] & ~(_GEN_13[12]), ~(_GEN_12[12]) & _GEN_13[12] & _GEN_14[12], _GEN_12[12] & _GEN_13[12] & _GEN_14[12]} : 5'h0) | (qNext_sel_q_3 ? {~(_GEN_19[12]) & ~(_GEN_18[12]) & ~(_GEN_17[12]), _GEN_19[12] & ~(_GEN_18[12]) & ~(_GEN_17[12]), _GEN_18[12] & ~(_GEN_17[12]), ~(_GEN_16[12]) & _GEN_17[12] & _GEN_18[12], _GEN_16[12] & _GEN_17[12] & _GEN_18[12]} : 5'h0) | (qNext_sel_q_4 ? {~(_GEN_23[12]) & ~(_GEN_22[12]) & ~(_GEN_21[12]), _GEN_23[12] & ~(_GEN_22[12]) & ~(_GEN_21[12]), _GEN_22[12] & ~(_GEN_21[12]), ~(_GEN_20[12]) & _GEN_21[12] & _GEN_22[12], _GEN_20[12] & _GEN_21[12] & _GEN_22[12]} : 5'h0);	// @[Mux.scala:27:73, Reg.scala:19:16, SRT16Divider.scala:271:46, :272:{25,47}, :273:{30,33}, :274:{37,47,50}, :275:{25,38,48,51}, :276:10, :311:{23,54}]
    end
    if (state[2] | state[3]) begin	// @[SRT16Divider.scala:51:22, :236:{73,83,90}]
      if (state[2])	// @[SRT16Divider.scala:51:22, :236:36]
        rSumReg <= {3'h0, _rSumInit_T_2};	// @[Cat.scala:33:92, OneHot.scala:64:12, Reg.scala:19:16, SRT16Divider.scala:171:35]
      else if (_quotM1IterNext_T & ~(|iterNumReg))	// @[Reg.scala:19:16, SRT16Divider.scala:169:27, :296:{19,28}]
        rSumReg <= _csa_sel_wide_1_io_out_0;	// @[Reg.scala:19:16, SRT16Divider.scala:288:24]
      else	// @[SRT16Divider.scala:296:28]
        rSumReg <= _csa_sel_wide_2_io_out_0;	// @[Reg.scala:19:16, SRT16Divider.scala:289:24]
    end
    if (state[2] | state[3]) begin	// @[SRT16Divider.scala:51:22, :237:{79,89,96}]
      if (state[2])	// @[SRT16Divider.scala:51:22, :237:38]
        rCarryReg <= 68'h0;	// @[Reg.scala:19:16, SRT16Divider.scala:237:32]
      else	// @[SRT16Divider.scala:237:38]
        rCarryReg <= {_quotM1IterNext_T & ~(|iterNumReg) ? _csa_sel_wide_1_io_out_1[66:0] : _csa_sel_wide_2_io_out_1[66:0], 1'h0};	// @[Reg.scala:19:16, SRT16Divider.scala:169:27, :288:24, :289:24, :296:19, :297:{20,30,68,109}]
    end
    if (state[2]) begin	// @[SRT16Divider.scala:51:22, :264:40]
      udNegReg_0 <= {2'h0, dNormReg, 2'h0};	// @[Cat.scala:33:92, Reg.scala:19:16]
      udNegReg_1 <= {3'h0, dNormReg, 1'h0};	// @[Cat.scala:33:92, OneHot.scala:64:12, Reg.scala:19:16]
      udNegReg_2 <= 68'h0;	// @[Reg.scala:19:16, SRT16Divider.scala:237:32]
      udNegReg_3 <= {{2{dNeg[64]}}, dNeg, 1'h0};	// @[Bitwise.scala:77:12, Cat.scala:33:92, DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:206:14]
      udNegReg_4 <= {dNeg[64], dNeg, 2'h0};	// @[Cat.scala:33:92, DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:206:14]
    end
    if (state[2]) begin	// @[SRT16Divider.scala:51:22, :266:46]
      rudPmNegReg_0_0 <= _GEN_24 + _GEN_42;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_0_1 <= _GEN_24 + _GEN_43;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_0_2 <= _GEN_24 + _GEN_44;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_0_3 <= _GEN_24 + _GEN_46;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_1_0 <= _GEN_25 + _GEN_42;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_1_1 <= _GEN_25 + _GEN_43;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_1_2 <= _GEN_25 + _GEN_44;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_1_3 <= _GEN_25 + _GEN_46;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_2_0 <= {_GEN_41, _T_32};	// @[Mux.scala:81:58, Reg.scala:19:16, SRT16Divider.scala:256:{103,112}]
      rudPmNegReg_2_1 <= {2'h0, _T_51, 1'h0};	// @[Cat.scala:33:92, Mux.scala:81:58, Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_2_2 <= {2'h3, _T_70, 1'h0};	// @[Mux.scala:81:58, Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_2_3 <= {_GEN_45, _T_89};	// @[Mux.scala:81:58, Reg.scala:19:16, SRT16Divider.scala:256:{103,112}]
      rudPmNegReg_3_0 <= _GEN_47 + _GEN_42;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_3_1 <= _GEN_47 + _GEN_43;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_3_2 <= _GEN_47 + _GEN_44;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_3_3 <= _GEN_47 + _GEN_46;	// @[Reg.scala:19:16, SRT16Divider.scala:256:103]
      rudPmNegReg_4_0 <= {dNeg[64], dNeg[64:56]} + _GEN_42;	// @[DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:206:14, :256:{91,103}]
      rudPmNegReg_4_1 <= {dNeg[64], dNeg[64:56]} + _GEN_43;	// @[DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:206:14, :256:{91,103}]
      rudPmNegReg_4_2 <= {dNeg[64], dNeg[64:56]} + _GEN_44;	// @[DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:206:14, :256:{91,103}]
      rudPmNegReg_4_3 <= {dNeg[64], dNeg[64:56]} + _GEN_46;	// @[DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:206:14, :256:{91,103}]
    end
    if (state[2]) begin	// @[SRT16Divider.scala:51:22, :267:48]
      r2udPmNegReg_0_0 <= _GEN_26 + _GEN_49;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_0_1 <= _GEN_26 + _GEN_50;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_0_2 <= _GEN_26 + _GEN_51;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_0_3 <= _GEN_26 + _GEN_53;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_1_0 <= _GEN_27 + _GEN_49;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_1_1 <= _GEN_27 + _GEN_50;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_1_2 <= _GEN_27 + _GEN_51;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_1_3 <= _GEN_27 + _GEN_53;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_2_0 <= {_GEN_48, _T_32, 1'h0};	// @[Cat.scala:33:92, Mux.scala:81:58, Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_2_1 <= {4'h0, _T_51, 2'h0};	// @[Bitwise.scala:77:12, Cat.scala:33:92, Mux.scala:81:58, Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_2_2 <= {4'hF, _T_70, 2'h0};	// @[Cat.scala:33:92, Mux.scala:47:70, :81:58, Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_2_3 <= {_GEN_52, _T_89, 1'h0};	// @[Cat.scala:33:92, Mux.scala:81:58, Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_3_0 <= _GEN_54 + _GEN_49;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_3_1 <= _GEN_54 + _GEN_50;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_3_2 <= _GEN_54 + _GEN_51;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_3_3 <= _GEN_54 + _GEN_53;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_4_0 <= _GEN_55 + _GEN_49;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_4_1 <= _GEN_55 + _GEN_50;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_4_2 <= _GEN_55 + _GEN_51;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
      r2udPmNegReg_4_3 <= _GEN_55 + _GEN_53;	// @[Reg.scala:19:16, SRT16Divider.scala:257:99]
    end
    if (state[4])	// @[SRT16Divider.scala:51:22, :368:52]
      r <= rSignReg ? _rNext_T_5[67:3] : _rNext_T_7[67:3];	// @[Reg.scala:19:16, SRT16Divider.scala:361:18, :362:{11,36}, :365:{11,22}]
    if (state[4])	// @[SRT16Divider.scala:51:22, :369:56]
      rNextPdReg <= rSignReg ? _rNextPd_T_9[67:3] : _rNextPd_T_14[67:3];	// @[Reg.scala:19:16, SRT16Divider.scala:361:18, :363:{13,75}, :366:{13,36}]
    if (state[5]) begin	// @[SRT16Divider.scala:51:22, :382:73]
      if (specialReg)	// @[Reg.scala:19:16]
        rFinal <= remSpecialReg;	// @[Reg.scala:19:16]
      else	// @[Reg.scala:19:16]
        rFinal <= _rightShifter_io_out;	// @[Reg.scala:19:16, SRT16Divider.scala:377:28]
    end
    if (state[5]) begin	// @[SRT16Divider.scala:51:22, :383:107]
      if (specialReg)	// @[Reg.scala:19:16]
        qFinal <= quotSpecialReg;	// @[Reg.scala:19:16]
      else if (needCorr)	// @[SRT16Divider.scala:375:21]
        qFinal <= quotM1IterReg;	// @[Reg.scala:19:16]
      else	// @[SRT16Divider.scala:375:21]
        qFinal <= quotIterReg;	// @[Reg.scala:19:16]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    logic [31:0] _RANDOM_22;
    logic [31:0] _RANDOM_23;
    logic [31:0] _RANDOM_24;
    logic [31:0] _RANDOM_25;
    logic [31:0] _RANDOM_26;
    logic [31:0] _RANDOM_27;
    logic [31:0] _RANDOM_28;
    logic [31:0] _RANDOM_29;
    logic [31:0] _RANDOM_30;
    logic [31:0] _RANDOM_31;
    logic [31:0] _RANDOM_32;
    logic [31:0] _RANDOM_33;
    logic [31:0] _RANDOM_34;
    logic [31:0] _RANDOM_35;
    logic [31:0] _RANDOM_36;
    logic [31:0] _RANDOM_37;
    logic [31:0] _RANDOM_38;
    logic [31:0] _RANDOM_39;
    logic [31:0] _RANDOM_40;
    logic [31:0] _RANDOM_41;
    logic [31:0] _RANDOM_42;
    logic [31:0] _RANDOM_43;
    logic [31:0] _RANDOM_44;
    logic [31:0] _RANDOM_45;
    logic [31:0] _RANDOM_46;
    logic [31:0] _RANDOM_47;
    logic [31:0] _RANDOM_48;
    logic [31:0] _RANDOM_49;
    logic [31:0] _RANDOM_50;
    logic [31:0] _RANDOM_51;
    logic [31:0] _RANDOM_52;
    logic [31:0] _RANDOM_53;
    logic [31:0] _RANDOM_54;
    logic [31:0] _RANDOM_55;
    logic [31:0] _RANDOM_56;
    logic [31:0] _RANDOM_57;
    logic [31:0] _RANDOM_58;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        _RANDOM_35 = `RANDOM;
        _RANDOM_36 = `RANDOM;
        _RANDOM_37 = `RANDOM;
        _RANDOM_38 = `RANDOM;
        _RANDOM_39 = `RANDOM;
        _RANDOM_40 = `RANDOM;
        _RANDOM_41 = `RANDOM;
        _RANDOM_42 = `RANDOM;
        _RANDOM_43 = `RANDOM;
        _RANDOM_44 = `RANDOM;
        _RANDOM_45 = `RANDOM;
        _RANDOM_46 = `RANDOM;
        _RANDOM_47 = `RANDOM;
        _RANDOM_48 = `RANDOM;
        _RANDOM_49 = `RANDOM;
        _RANDOM_50 = `RANDOM;
        _RANDOM_51 = `RANDOM;
        _RANDOM_52 = `RANDOM;
        _RANDOM_53 = `RANDOM;
        _RANDOM_54 = `RANDOM;
        _RANDOM_55 = `RANDOM;
        _RANDOM_56 = `RANDOM;
        _RANDOM_57 = `RANDOM;
        _RANDOM_58 = `RANDOM;
        state = _RANDOM_0[6:0];	// @[SRT16Divider.scala:51:22]
        quotIterReg = {_RANDOM_0[31:7], _RANDOM_1, _RANDOM_2[6:0]};	// @[Reg.scala:19:16, SRT16Divider.scala:51:22]
        quotM1IterReg = {_RANDOM_2[31:7], _RANDOM_3, _RANDOM_4[6:0]};	// @[Reg.scala:19:16]
        specialReg = _RANDOM_4[7];	// @[Reg.scala:19:16]
        aReg = {_RANDOM_4[31:8], _RANDOM_5, _RANDOM_6[7:0]};	// @[Reg.scala:19:16]
        dSignReg = _RANDOM_6[8];	// @[Reg.scala:19:16]
        aAbsReg = {_RANDOM_6[31:9], _RANDOM_7, _RANDOM_8[8:0]};	// @[Reg.scala:19:16]
        dAbsReg = {_RANDOM_8[31:9], _RANDOM_9, _RANDOM_10[8:0]};	// @[Reg.scala:19:16]
        aNormReg = {_RANDOM_10[31:9], _RANDOM_11, _RANDOM_12[8:0]};	// @[Reg.scala:19:16]
        dNormReg = {_RANDOM_12[31:9], _RANDOM_13, _RANDOM_14[8:0]};	// @[Reg.scala:19:16]
        aLZCReg = _RANDOM_14[15:9];	// @[Reg.scala:19:16]
        dLZCReg = _RANDOM_14[22:16];	// @[Reg.scala:19:16]
        aTooSmall = _RANDOM_14[24];	// @[Reg.scala:19:16]
        aRegNeg = {_RANDOM_14[31:25], _RANDOM_15, _RANDOM_16[24:0]};	// @[Reg.scala:19:16]
        quotSpecialReg = {_RANDOM_16[31:25], _RANDOM_17, _RANDOM_18[24:0]};	// @[Reg.scala:19:16]
        remSpecialReg = {_RANDOM_18[31:25], _RANDOM_19, _RANDOM_20[24:0]};	// @[Reg.scala:19:16]
        quotSignReg = _RANDOM_20[25];	// @[Reg.scala:19:16]
        rSignReg = _RANDOM_20[26];	// @[Reg.scala:19:16]
        iterNumReg = _RANDOM_20[30:27];	// @[Reg.scala:19:16]
        qPrevReg = {_RANDOM_20[31], _RANDOM_21[3:0]};	// @[Reg.scala:19:16]
        rSumReg = {_RANDOM_21[31:4], _RANDOM_22, _RANDOM_23[7:0]};	// @[Reg.scala:19:16]
        rCarryReg = {_RANDOM_23[31:8], _RANDOM_24, _RANDOM_25[11:0]};	// @[Reg.scala:19:16]
        udNegReg_0 = {_RANDOM_25[31:12], _RANDOM_26, _RANDOM_27[15:0]};	// @[Reg.scala:19:16]
        udNegReg_1 = {_RANDOM_27[31:16], _RANDOM_28, _RANDOM_29[19:0]};	// @[Reg.scala:19:16]
        udNegReg_2 = {_RANDOM_29[31:20], _RANDOM_30, _RANDOM_31[23:0]};	// @[Reg.scala:19:16]
        udNegReg_3 = {_RANDOM_31[31:24], _RANDOM_32, _RANDOM_33[27:0]};	// @[Reg.scala:19:16]
        udNegReg_4 = {_RANDOM_33[31:28], _RANDOM_34, _RANDOM_35};	// @[Reg.scala:19:16]
        rudPmNegReg_0_0 = _RANDOM_36[9:0];	// @[Reg.scala:19:16]
        rudPmNegReg_0_1 = _RANDOM_36[19:10];	// @[Reg.scala:19:16]
        rudPmNegReg_0_2 = _RANDOM_36[29:20];	// @[Reg.scala:19:16]
        rudPmNegReg_0_3 = {_RANDOM_36[31:30], _RANDOM_37[7:0]};	// @[Reg.scala:19:16]
        rudPmNegReg_1_0 = _RANDOM_37[17:8];	// @[Reg.scala:19:16]
        rudPmNegReg_1_1 = _RANDOM_37[27:18];	// @[Reg.scala:19:16]
        rudPmNegReg_1_2 = {_RANDOM_37[31:28], _RANDOM_38[5:0]};	// @[Reg.scala:19:16]
        rudPmNegReg_1_3 = _RANDOM_38[15:6];	// @[Reg.scala:19:16]
        rudPmNegReg_2_0 = _RANDOM_38[25:16];	// @[Reg.scala:19:16]
        rudPmNegReg_2_1 = {_RANDOM_38[31:26], _RANDOM_39[3:0]};	// @[Reg.scala:19:16]
        rudPmNegReg_2_2 = _RANDOM_39[13:4];	// @[Reg.scala:19:16]
        rudPmNegReg_2_3 = _RANDOM_39[23:14];	// @[Reg.scala:19:16]
        rudPmNegReg_3_0 = {_RANDOM_39[31:24], _RANDOM_40[1:0]};	// @[Reg.scala:19:16]
        rudPmNegReg_3_1 = _RANDOM_40[11:2];	// @[Reg.scala:19:16]
        rudPmNegReg_3_2 = _RANDOM_40[21:12];	// @[Reg.scala:19:16]
        rudPmNegReg_3_3 = _RANDOM_40[31:22];	// @[Reg.scala:19:16]
        rudPmNegReg_4_0 = _RANDOM_41[9:0];	// @[Reg.scala:19:16]
        rudPmNegReg_4_1 = _RANDOM_41[19:10];	// @[Reg.scala:19:16]
        rudPmNegReg_4_2 = _RANDOM_41[29:20];	// @[Reg.scala:19:16]
        rudPmNegReg_4_3 = {_RANDOM_41[31:30], _RANDOM_42[7:0]};	// @[Reg.scala:19:16]
        r2udPmNegReg_0_0 = _RANDOM_42[20:8];	// @[Reg.scala:19:16]
        r2udPmNegReg_0_1 = {_RANDOM_42[31:21], _RANDOM_43[1:0]};	// @[Reg.scala:19:16]
        r2udPmNegReg_0_2 = _RANDOM_43[14:2];	// @[Reg.scala:19:16]
        r2udPmNegReg_0_3 = _RANDOM_43[27:15];	// @[Reg.scala:19:16]
        r2udPmNegReg_1_0 = {_RANDOM_43[31:28], _RANDOM_44[8:0]};	// @[Reg.scala:19:16]
        r2udPmNegReg_1_1 = _RANDOM_44[21:9];	// @[Reg.scala:19:16]
        r2udPmNegReg_1_2 = {_RANDOM_44[31:22], _RANDOM_45[2:0]};	// @[Reg.scala:19:16]
        r2udPmNegReg_1_3 = _RANDOM_45[15:3];	// @[Reg.scala:19:16]
        r2udPmNegReg_2_0 = _RANDOM_45[28:16];	// @[Reg.scala:19:16]
        r2udPmNegReg_2_1 = {_RANDOM_45[31:29], _RANDOM_46[9:0]};	// @[Reg.scala:19:16]
        r2udPmNegReg_2_2 = _RANDOM_46[22:10];	// @[Reg.scala:19:16]
        r2udPmNegReg_2_3 = {_RANDOM_46[31:23], _RANDOM_47[3:0]};	// @[Reg.scala:19:16]
        r2udPmNegReg_3_0 = _RANDOM_47[16:4];	// @[Reg.scala:19:16]
        r2udPmNegReg_3_1 = _RANDOM_47[29:17];	// @[Reg.scala:19:16]
        r2udPmNegReg_3_2 = {_RANDOM_47[31:30], _RANDOM_48[10:0]};	// @[Reg.scala:19:16]
        r2udPmNegReg_3_3 = _RANDOM_48[23:11];	// @[Reg.scala:19:16]
        r2udPmNegReg_4_0 = {_RANDOM_48[31:24], _RANDOM_49[4:0]};	// @[Reg.scala:19:16]
        r2udPmNegReg_4_1 = _RANDOM_49[17:5];	// @[Reg.scala:19:16]
        r2udPmNegReg_4_2 = _RANDOM_49[30:18];	// @[Reg.scala:19:16]
        r2udPmNegReg_4_3 = {_RANDOM_49[31], _RANDOM_50[11:0]};	// @[Reg.scala:19:16]
        r = {_RANDOM_50[31:12], _RANDOM_51, _RANDOM_52[12:0]};	// @[Reg.scala:19:16]
        rNextPdReg = {_RANDOM_52[31:13], _RANDOM_53, _RANDOM_54[13:0]};	// @[Reg.scala:19:16]
        rFinal = {_RANDOM_54[31:14], _RANDOM_55, _RANDOM_56[13:0]};	// @[Reg.scala:19:16]
        qFinal = {_RANDOM_56[31:14], _RANDOM_57, _RANDOM_58[13:0]};	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  CSA3_2 signs_csa_sel_0 (	// @[SRT16Divider.scala:280:21]
    .io_in_0  (rSumReg[67:58]),	// @[Reg.scala:19:16, SRT16Divider.scala:261:18]
    .io_in_1  (rCarryReg[67:58]),	// @[Reg.scala:19:16, SRT16Divider.scala:262:20]
    .io_in_2  ((qPrevReg[0] ? rudPmNegReg_0_0 : 10'h0) | (qPrevReg[1] ? rudPmNegReg_1_0 : 10'h0) | (qPrevReg[2] ? rudPmNegReg_2_0 : 10'h0) | (qPrevReg[3] ? rudPmNegReg_3_0 : 10'h0) | (qPrevReg[4] ? rudPmNegReg_4_0 : 10'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs_csa_sel_0_io_out_0),
    .io_out_1 (_signs_csa_sel_0_io_out_1)
  );
  CSA3_2 signs_csa_sel_1 (	// @[SRT16Divider.scala:280:21]
    .io_in_0  (rSumReg[67:58]),	// @[Reg.scala:19:16, SRT16Divider.scala:261:18]
    .io_in_1  (rCarryReg[67:58]),	// @[Reg.scala:19:16, SRT16Divider.scala:262:20]
    .io_in_2  ((qPrevReg[0] ? rudPmNegReg_0_1 : 10'h0) | (qPrevReg[1] ? rudPmNegReg_1_1 : 10'h0) | (qPrevReg[2] ? rudPmNegReg_2_1 : 10'h0) | (qPrevReg[3] ? rudPmNegReg_3_1 : 10'h0) | (qPrevReg[4] ? rudPmNegReg_4_1 : 10'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs_csa_sel_1_io_out_0),
    .io_out_1 (_signs_csa_sel_1_io_out_1)
  );
  CSA3_2 signs_csa_sel_2 (	// @[SRT16Divider.scala:280:21]
    .io_in_0  (rSumReg[67:58]),	// @[Reg.scala:19:16, SRT16Divider.scala:261:18]
    .io_in_1  (rCarryReg[67:58]),	// @[Reg.scala:19:16, SRT16Divider.scala:262:20]
    .io_in_2  ((qPrevReg[0] ? rudPmNegReg_0_2 : 10'h0) | (qPrevReg[1] ? rudPmNegReg_1_2 : 10'h0) | (qPrevReg[2] ? rudPmNegReg_2_2 : 10'h0) | (qPrevReg[3] ? rudPmNegReg_3_2 : 10'h0) | (qPrevReg[4] ? rudPmNegReg_4_2 : 10'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs_csa_sel_2_io_out_0),
    .io_out_1 (_signs_csa_sel_2_io_out_1)
  );
  CSA3_2 signs_csa_sel_3 (	// @[SRT16Divider.scala:280:21]
    .io_in_0  (rSumReg[67:58]),	// @[Reg.scala:19:16, SRT16Divider.scala:261:18]
    .io_in_1  (rCarryReg[67:58]),	// @[Reg.scala:19:16, SRT16Divider.scala:262:20]
    .io_in_2  ((qPrevReg[0] ? rudPmNegReg_0_3 : 10'h0) | (qPrevReg[1] ? rudPmNegReg_1_3 : 10'h0) | (qPrevReg[2] ? rudPmNegReg_2_3 : 10'h0) | (qPrevReg[3] ? rudPmNegReg_3_3 : 10'h0) | (qPrevReg[4] ? rudPmNegReg_4_3 : 10'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs_csa_sel_3_io_out_0),
    .io_out_1 (_signs_csa_sel_3_io_out_1)
  );
  CSA3_2_4 csa_sel_wide_1 (	// @[SRT16Divider.scala:288:24]
    .io_in_0  ({rSumReg[65:0], 2'h0}),	// @[Cat.scala:33:92, Reg.scala:19:16, SRT16Divider.scala:290:21]
    .io_in_1  ({rCarryReg[65:0], 2'h0}),	// @[Cat.scala:33:92, Reg.scala:19:16, SRT16Divider.scala:291:21]
    .io_in_2  ({(qPrevReg[0] ? udNegReg_0[65:0] : 66'h0) | (qPrevReg[1] ? udNegReg_1[65:0] : 66'h0) | (qPrevReg[2] ? udNegReg_2[65:0] : 66'h0) | (qPrevReg[3] ? udNegReg_3[65:0] : 66'h0) | (qPrevReg[4] ? udNegReg_4[65:0] : 66'h0), 2'h0}),	// @[Cat.scala:33:92, Mux.scala:27:73, :29:36, Reg.scala:19:16, SRT16Divider.scala:237:32, :292:21]
    .io_out_0 (_csa_sel_wide_1_io_out_0),
    .io_out_1 (_csa_sel_wide_1_io_out_1)
  );
  CSA3_2_4 csa_sel_wide_2 (	// @[SRT16Divider.scala:289:24]
    .io_in_0  ({_csa_sel_wide_1_io_out_0[65:0], 2'h0}),	// @[Cat.scala:33:92, SRT16Divider.scala:288:24, :293:21]
    .io_in_1  ({_csa_sel_wide_1_io_out_1[64:0], 3'h0}),	// @[OneHot.scala:64:12, SRT16Divider.scala:288:24, :294:21]
    .io_in_2  ({(qNext_sel_q_0 ? udNegReg_0[65:0] : 66'h0) | (qNext_sel_q_1 ? udNegReg_1[65:0] : 66'h0) | (qNext_sel_q_2 ? udNegReg_2[65:0] : 66'h0) | (qNext_sel_q_3 ? udNegReg_3[65:0] : 66'h0) | (qNext_sel_q_4 ? udNegReg_4[65:0] : 66'h0), 2'h0}),	// @[Cat.scala:33:92, Mux.scala:27:73, Reg.scala:19:16, SRT16Divider.scala:237:32, :271:46, :272:47, :273:30, :274:47, :275:48, :295:21]
    .io_out_0 (_csa_sel_wide_2_io_out_0),
    .io_out_1 (_csa_sel_wide_2_io_out_1)
  );
  CSA3_2_6 csa_spec_0 (	// @[SRT16Divider.scala:302:22]
    .io_in_0  (rSumReg[67:55]),	// @[Reg.scala:19:16, SRT16Divider.scala:258:18]
    .io_in_1  (rCarryReg[67:55]),	// @[Reg.scala:19:16, SRT16Divider.scala:259:20]
    .io_in_2  ({{3{udNegReg_0[66]}}, udNegReg_0[66:57]}),	// @[Bitwise.scala:77:12, Cat.scala:33:92, DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:305:46]
    .io_out_0 (_csa_spec_0_io_out_0),
    .io_out_1 (_csa_spec_0_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_0_0 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_0_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_0_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_0 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_0 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_0 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_0 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_0 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_0_0_io_out_0),
    .io_out_1 (_signs2_csa_spec_0_0_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_0_1 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_0_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_0_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_1 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_1 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_1 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_1 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_1 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_0_1_io_out_0),
    .io_out_1 (_signs2_csa_spec_0_1_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_0_2 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_0_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_0_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_2 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_2 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_2 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_2 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_2 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_0_2_io_out_0),
    .io_out_1 (_signs2_csa_spec_0_2_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_0_3 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_0_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_0_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_3 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_3 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_3 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_3 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_3 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_0_3_io_out_0),
    .io_out_1 (_signs2_csa_spec_0_3_io_out_1)
  );
  CSA3_2_6 csa_spec_1 (	// @[SRT16Divider.scala:302:22]
    .io_in_0  (rSumReg[67:55]),	// @[Reg.scala:19:16, SRT16Divider.scala:258:18]
    .io_in_1  (rCarryReg[67:55]),	// @[Reg.scala:19:16, SRT16Divider.scala:259:20]
    .io_in_2  ({{3{udNegReg_1[66]}}, udNegReg_1[66:57]}),	// @[Bitwise.scala:77:12, Cat.scala:33:92, DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:305:46]
    .io_out_0 (_csa_spec_1_io_out_0),
    .io_out_1 (_csa_spec_1_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_1_0 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_1_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_1_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_0 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_0 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_0 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_0 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_0 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_1_0_io_out_0),
    .io_out_1 (_signs2_csa_spec_1_0_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_1_1 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_1_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_1_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_1 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_1 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_1 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_1 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_1 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_1_1_io_out_0),
    .io_out_1 (_signs2_csa_spec_1_1_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_1_2 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_1_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_1_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_2 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_2 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_2 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_2 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_2 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_1_2_io_out_0),
    .io_out_1 (_signs2_csa_spec_1_2_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_1_3 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_1_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_1_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_3 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_3 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_3 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_3 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_3 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_1_3_io_out_0),
    .io_out_1 (_signs2_csa_spec_1_3_io_out_1)
  );
  CSA3_2_6 csa_spec_2 (	// @[SRT16Divider.scala:302:22]
    .io_in_0  (rSumReg[67:55]),	// @[Reg.scala:19:16, SRT16Divider.scala:258:18]
    .io_in_1  (rCarryReg[67:55]),	// @[Reg.scala:19:16, SRT16Divider.scala:259:20]
    .io_in_2  ({{3{udNegReg_2[66]}}, udNegReg_2[66:57]}),	// @[Bitwise.scala:77:12, Cat.scala:33:92, DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:305:46]
    .io_out_0 (_csa_spec_2_io_out_0),
    .io_out_1 (_csa_spec_2_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_2_0 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_2_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_2_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_0 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_0 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_0 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_0 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_0 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_2_0_io_out_0),
    .io_out_1 (_signs2_csa_spec_2_0_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_2_1 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_2_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_2_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_1 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_1 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_1 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_1 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_1 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_2_1_io_out_0),
    .io_out_1 (_signs2_csa_spec_2_1_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_2_2 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_2_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_2_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_2 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_2 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_2 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_2 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_2 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_2_2_io_out_0),
    .io_out_1 (_signs2_csa_spec_2_2_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_2_3 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_2_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_2_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_3 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_3 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_3 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_3 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_3 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_2_3_io_out_0),
    .io_out_1 (_signs2_csa_spec_2_3_io_out_1)
  );
  CSA3_2_6 csa_spec_3 (	// @[SRT16Divider.scala:302:22]
    .io_in_0  (rSumReg[67:55]),	// @[Reg.scala:19:16, SRT16Divider.scala:258:18]
    .io_in_1  (rCarryReg[67:55]),	// @[Reg.scala:19:16, SRT16Divider.scala:259:20]
    .io_in_2  ({{3{udNegReg_3[66]}}, udNegReg_3[66:57]}),	// @[Bitwise.scala:77:12, Cat.scala:33:92, DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:305:46]
    .io_out_0 (_csa_spec_3_io_out_0),
    .io_out_1 (_csa_spec_3_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_3_0 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_3_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_3_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_0 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_0 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_0 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_0 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_0 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_3_0_io_out_0),
    .io_out_1 (_signs2_csa_spec_3_0_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_3_1 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_3_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_3_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_1 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_1 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_1 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_1 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_1 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_3_1_io_out_0),
    .io_out_1 (_signs2_csa_spec_3_1_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_3_2 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_3_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_3_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_2 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_2 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_2 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_2 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_2 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_3_2_io_out_0),
    .io_out_1 (_signs2_csa_spec_3_2_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_3_3 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_3_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_3_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_3 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_3 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_3 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_3 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_3 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_3_3_io_out_0),
    .io_out_1 (_signs2_csa_spec_3_3_io_out_1)
  );
  CSA3_2_6 csa_spec_4 (	// @[SRT16Divider.scala:302:22]
    .io_in_0  (rSumReg[67:55]),	// @[Reg.scala:19:16, SRT16Divider.scala:258:18]
    .io_in_1  (rCarryReg[67:55]),	// @[Reg.scala:19:16, SRT16Divider.scala:259:20]
    .io_in_2  ({{3{udNegReg_4[66]}}, udNegReg_4[66:57]}),	// @[Bitwise.scala:77:12, Cat.scala:33:92, DivUtils.scala:74:20, Reg.scala:19:16, SRT16Divider.scala:305:46]
    .io_out_0 (_csa_spec_4_io_out_0),
    .io_out_1 (_csa_spec_4_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_4_0 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_4_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_4_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_0 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_0 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_0 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_0 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_0 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_4_0_io_out_0),
    .io_out_1 (_signs2_csa_spec_4_0_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_4_1 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_4_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_4_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_1 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_1 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_1 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_1 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_1 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_4_1_io_out_0),
    .io_out_1 (_signs2_csa_spec_4_1_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_4_2 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_4_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_4_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_2 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_2 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_2 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_2 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_2 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_4_2_io_out_0),
    .io_out_1 (_signs2_csa_spec_4_2_io_out_1)
  );
  CSA3_2_6 signs2_csa_spec_4_3 (	// @[SRT16Divider.scala:307:24]
    .io_in_0  (_csa_spec_4_io_out_0),	// @[SRT16Divider.scala:302:22]
    .io_in_1  ({_csa_spec_4_io_out_1[11:0], 1'h0}),	// @[SRT16Divider.scala:302:22, :309:45]
    .io_in_2  ((qPrevReg[0] ? r2udPmNegReg_0_3 : 13'h0) | (qPrevReg[1] ? r2udPmNegReg_1_3 : 13'h0) | (qPrevReg[2] ? r2udPmNegReg_2_3 : 13'h0) | (qPrevReg[3] ? r2udPmNegReg_3_3 : 13'h0) | (qPrevReg[4] ? r2udPmNegReg_4_3 : 13'h0)),	// @[Mux.scala:27:73, :29:36, Reg.scala:19:16]
    .io_out_0 (_signs2_csa_spec_4_3_io_out_0),
    .io_out_1 (_signs2_csa_spec_4_3_io_out_1)
  );
  RightShifter rightShifter (	// @[SRT16Divider.scala:377:28]
    .io_shiftNum (dLZCReg[5:0]),	// @[Reg.scala:19:16, SRT16Divider.scala:379:28]
    .io_in       (rPreShifted[63:0]),	// @[SRT16Divider.scala:376:24, :378:22]
    .io_msb      ((|rPreShifted) & rSignReg),	// @[Reg.scala:19:16, SRT16Divider.scala:376:24, :380:{29,47}]
    .io_out      (_rightShifter_io_out)
  );
  assign io_in_ready = state[0];	// @[SRT16Divider.scala:51:22, :389:23]
  assign io_out_valid = state[5];	// @[SRT16Divider.scala:51:22, :390:24]
  assign io_out_data = io_isHi ? rFinal : qFinal;	// @[Reg.scala:19:16, SRT16Divider.scala:384:16]
endmodule

