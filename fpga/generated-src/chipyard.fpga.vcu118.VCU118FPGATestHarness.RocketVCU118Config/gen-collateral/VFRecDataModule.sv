// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VFRecDataModule(
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_vs2,
  input  [7:0]  io_in_bits_prestart,
                io_in_bits_mask,
                io_in_bits_tail,
  input  [4:0]  io_in_bits_uop_ctrl_lsrc_0,
                io_in_bits_uop_ctrl_lsrc_1,
                io_in_bits_uop_ctrl_ldest,
  input         io_in_bits_uop_ctrl_vm,
  input  [5:0]  io_in_bits_uop_ctrl_funct6,
  input  [2:0]  io_in_bits_uop_ctrl_funct3,
  input         io_in_bits_uop_ctrl_widen,
                io_in_bits_uop_ctrl_widen2,
                io_in_bits_uop_ctrl_narrow,
                io_in_bits_uop_ctrl_narrow_to_1,
  input  [6:0]  io_in_bits_uop_info_vstart,
  input  [7:0]  io_in_bits_uop_info_vl,
  input  [1:0]  io_in_bits_uop_info_vxrm,
  input  [2:0]  io_in_bits_uop_info_frm,
                io_in_bits_uop_info_vlmul,
                io_in_bits_uop_info_vsew,
  input         io_in_bits_uop_info_ma,
                io_in_bits_uop_info_ta,
  input  [2:0]  io_in_bits_uop_info_destEew,
                io_in_bits_uop_expdIdx,
  input         io_in_bits_uop_expdEnd,
                io_in_bits_uop_sysUop_robIdx_flag,
  input  [7:0]  io_in_bits_uop_sysUop_robIdx_value,
  input  [63:0] io_in_bits_uop_maskKeep,
                io_in_bits_uop_maskOff,
  input         io_in_bits_uop_vfpCtrl_isRec7,
                io_in_bits_uop_typeTag,
                io_out_ready,
  output        io_in_ready,
                io_out_valid,
  output [63:0] io_out_bits_vd,
  output [4:0]  io_out_bits_fflags,
                io_out_bits_uop_ctrl_lsrc_0,
                io_out_bits_uop_ctrl_lsrc_1,
                io_out_bits_uop_ctrl_ldest,
  output        io_out_bits_uop_ctrl_vm,
  output [5:0]  io_out_bits_uop_ctrl_funct6,
  output [2:0]  io_out_bits_uop_ctrl_funct3,
  output        io_out_bits_uop_ctrl_widen,
                io_out_bits_uop_ctrl_widen2,
                io_out_bits_uop_ctrl_narrow,
                io_out_bits_uop_ctrl_narrow_to_1,
  output [6:0]  io_out_bits_uop_info_vstart,
  output [7:0]  io_out_bits_uop_info_vl,
  output [1:0]  io_out_bits_uop_info_vxrm,
  output [2:0]  io_out_bits_uop_info_frm,
                io_out_bits_uop_info_vlmul,
                io_out_bits_uop_info_vsew,
  output        io_out_bits_uop_info_ma,
                io_out_bits_uop_info_ta,
  output [2:0]  io_out_bits_uop_info_destEew,
                io_out_bits_uop_expdIdx,
  output        io_out_bits_uop_expdEnd,
                io_out_bits_uop_sysUop_robIdx_flag,
  output [7:0]  io_out_bits_uop_sysUop_robIdx_value,
  output [63:0] io_out_bits_uop_maskKeep,
                io_out_bits_uop_maskOff
);

  wire [5:0]        _leadingZeroCntFP64_clz_io_out;	// @[CLZ.scala:23:21]
  wire              _TypesFP64_0_isSubnormal;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_rsqrtType_0;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_rsqrtType_1;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_rsqrtType_2;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_rsqrtType_3;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_rsqrtType_5;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_rsqrtType_6;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_0;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_1;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_2;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_3;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_4;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_5;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_6;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_7;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_8;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_9;	// @[VFRec.scala:57:19]
  wire              _TypesFP64_0_recType_10;	// @[VFRec.scala:57:19]
  wire [4:0]        _leadingZeroCntFP32_clz_1_io_out;	// @[CLZ.scala:23:21]
  wire [4:0]        _leadingZeroCntFP32_clz_io_out;	// @[CLZ.scala:23:21]
  wire              _TypesFP32_1_isSubnormal;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_rsqrtType_0;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_rsqrtType_1;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_rsqrtType_2;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_rsqrtType_3;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_rsqrtType_5;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_rsqrtType_6;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_0;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_1;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_2;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_3;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_4;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_5;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_6;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_7;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_8;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_9;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_1_recType_10;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_isSubnormal;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_rsqrtType_0;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_rsqrtType_1;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_rsqrtType_2;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_rsqrtType_3;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_rsqrtType_5;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_rsqrtType_6;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_0;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_1;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_2;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_3;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_4;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_5;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_6;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_7;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_8;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_9;	// @[VFRec.scala:57:19]
  wire              _TypesFP32_0_recType_10;	// @[VFRec.scala:57:19]
  reg               REG;	// @[VFPUSubModule.scala:59:60]
  reg  [4:0]        REG_1_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]        REG_1_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]        REG_1_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  reg               REG_1_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  reg  [5:0]        REG_1_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]        REG_1_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  reg               REG_1_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  reg               REG_1_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  reg               REG_1_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  reg               REG_1_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  reg  [6:0]        REG_1_info_vstart;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]        REG_1_info_vl;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]        REG_1_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]        REG_1_info_frm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]        REG_1_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]        REG_1_info_vsew;	// @[VFPUSubModule.scala:63:57]
  reg               REG_1_info_ma;	// @[VFPUSubModule.scala:63:57]
  reg               REG_1_info_ta;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]        REG_1_info_destEew;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]        REG_1_expdIdx;	// @[VFPUSubModule.scala:63:57]
  reg               REG_1_expdEnd;	// @[VFPUSubModule.scala:63:57]
  reg               REG_1_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]        REG_1_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]       REG_1_maskKeep;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]       REG_1_maskOff;	// @[VFPUSubModule.scala:63:57]
  wire              _WIRE = ~REG | io_out_ready;	// @[VFPUSubModule.scala:59:60, :70:{18,35}]
  reg  [63:0]       io_out_bits_vd_r;	// @[Reg.scala:19:16]
  reg  [4:0]        io_out_bits_fflags_r;	// @[Reg.scala:19:16]
  wire [63:0][6:0]  _GEN = '{7'h0, 7'h1, 7'h1, 7'h2, 7'h2, 7'h3, 7'h3, 7'h4, 7'h4, 7'h5, 7'h6, 7'h6, 7'h7, 7'h7, 7'h8, 7'h9, 7'h9, 7'hA, 7'hA, 7'hB, 7'hC, 7'hC, 7'hD, 7'hE, 7'hE, 7'hF, 7'h10, 7'h10, 7'h11, 7'h12, 7'h13, 7'h13, 7'h14, 7'h15, 7'h16, 7'h17, 7'h17, 7'h18, 7'h19, 7'h1A, 7'h1B, 7'h1C, 7'h1D, 7'h1E, 7'h1E, 7'h1F, 7'h20, 7'h21, 7'h22, 7'h23, 7'h24, 7'h26, 7'h27, 7'h28, 7'h29, 7'h2A, 7'h2B, 7'h2C, 7'h2E, 7'h2F, 7'h30, 7'h32, 7'h33, 7'h34};	// @[Mux.scala:81:{58,61}]
  wire [5:0]        _normExpInFP32_0_T_2 = 6'h0 - {1'h0, _leadingZeroCntFP32_clz_io_out};	// @[CLZ.scala:23:21, Mux.scala:27:73, VFRec.scala:81:55]
  wire [8:0]        normExpInFP32_0 = _TypesFP32_0_isSubnormal ? {{3{_normExpInFP32_0_T_2[5]}}, _normExpInFP32_0_T_2} : {1'h0, io_in_bits_vs2[30:23]};	// @[VFRec.scala:57:19, :67:49, :81:{28,55,101}, package.scala:64:18]
  wire [53:0]       _normSigInFP32_0_T_2 = {31'h0, io_in_bits_vs2[21:0], 1'h0} << _leadingZeroCntFP32_clz_io_out;	// @[CLZ.scala:23:21, Cat.scala:33:92, VFRec.scala:83:{32,47}]
  wire [6:0]        _recSigLookup0_T = _TypesFP32_0_isSubnormal ? _normSigInFP32_0_T_2[22:16] : io_in_bits_vs2[22:16];	// @[VFRec.scala:57:19, :67:49, :82:28, :83:47, package.scala:65:18]
  wire [5:0]        _normExpInFP32_1_T_2 = 6'h0 - {1'h0, _leadingZeroCntFP32_clz_1_io_out};	// @[CLZ.scala:23:21, Mux.scala:27:73, VFRec.scala:81:55]
  wire [8:0]        normExpInFP32_1 = _TypesFP32_1_isSubnormal ? {{3{_normExpInFP32_1_T_2[5]}}, _normExpInFP32_1_T_2} : {1'h0, io_in_bits_vs2[62:55]};	// @[VFRec.scala:57:19, :67:49, :81:{28,55,101}, package.scala:64:18]
  wire [53:0]       _normSigInFP32_1_T_2 = {31'h0, io_in_bits_vs2[53:32], 1'h0} << _leadingZeroCntFP32_clz_1_io_out;	// @[CLZ.scala:23:21, Cat.scala:33:92, VFRec.scala:83:{32,47}]
  wire [6:0]        _recSigLookup1_T = _TypesFP32_1_isSubnormal ? _normSigInFP32_1_T_2[22:16] : io_in_bits_vs2[54:48];	// @[VFRec.scala:57:19, :67:49, :82:28, :83:47, package.scala:65:18]
  wire [6:0]        _normExpInFP64_0_T_2 = 7'h0 - {1'h0, _leadingZeroCntFP64_clz_io_out};	// @[CLZ.scala:23:21, Mux.scala:81:58, VFRec.scala:81:55, :94:55]
  wire [11:0]       normExpInFP64_0 = _TypesFP64_0_isSubnormal ? {{5{_normExpInFP64_0_T_2[6]}}, _normExpInFP64_0_T_2} : {1'h0, io_in_bits_vs2[62:52]};	// @[VFRec.scala:57:19, :81:55, :94:{28,55,101}, package.scala:64:18]
  wire [114:0]      _normSigInFP64_0_T_2 = {63'h0, io_in_bits_vs2[50:0], 1'h0} << _leadingZeroCntFP64_clz_io_out;	// @[CLZ.scala:23:21, Cat.scala:33:92, VFRec.scala:96:{32,47}]
  wire [6:0]        _recSigLookup0_T_1 = _TypesFP64_0_isSubnormal ? _normSigInFP64_0_T_2[51:45] : io_in_bits_vs2[51:45];	// @[VFRec.scala:57:19, :95:28, :96:47, package.scala:65:18]
  wire              eleActives_0 = ~(io_in_bits_prestart[0]) & ~(io_in_bits_tail[0]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[0]);	// @[VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
  wire              eleActives_1 = ~(io_in_bits_prestart[4]) & ~(io_in_bits_tail[4]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[4]);	// @[VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
  wire [6:0]        _recSigLookup0_WIRE = (io_in_bits_uop_typeTag ? 7'h0 : _recSigLookup0_T) | (io_in_bits_uop_typeTag ? _recSigLookup0_T_1 : 7'h0);	// @[Mux.scala:27:73, :81:58, VFRec.scala:82:28, :95:28]
  wire [6:0]        _recSigLookup0_T_6 = {5'h1F, _recSigLookup0_WIRE != 7'h1, 1'h1};	// @[Bitwise.scala:77:12, Mux.scala:27:73, :81:{58,61}, VFPUSubModule.scala:88:69]
  wire [127:0][6:0] _GEN_0 = {{7'h0}, {7'h1}, {7'h1}, {7'h2}, {7'h2}, {7'h3}, {7'h3}, {7'h4}, {7'h4}, {7'h5}, {7'h5}, {7'h6}, {7'h7}, {7'h7}, {7'h8}, {7'h8}, {7'h9}, {7'h9}, {7'hA}, {7'hB}, {7'hB}, {7'hC}, {7'hC}, {7'hD}, {7'hE}, {7'hE}, {7'hF}, {7'hF}, {7'h10}, {7'h11}, {7'h11}, {7'h12}, {7'h13}, {7'h13}, {7'h14}, {7'h15}, {7'h15}, {7'h16}, {7'h17}, {7'h17}, {7'h18}, {7'h19}, {7'h19}, {7'h1A}, {7'h1B}, {7'h1C}, {7'h1C}, {7'h1D}, {7'h1E}, {7'h1F}, {7'h1F}, {7'h20}, {7'h21}, {7'h22}, {7'h23}, {7'h23}, {7'h24}, {7'h25}, {7'h26}, {7'h27}, {7'h28}, {7'h28}, {7'h29}, {7'h2A}, {7'h2B}, {7'h2C}, {7'h2D}, {7'h2E}, {7'h2F}, {7'h30}, {7'h31}, {7'h32}, {7'h33}, {7'h34}, {7'h35}, {7'h36}, {7'h37}, {7'h38}, {7'h39}, {7'h3A}, {7'h3B}, {7'h3C}, {7'h3D}, {7'h3E}, {7'h3F}, {7'h40}, {7'h41}, {7'h42}, {7'h44}, {7'h45}, {7'h46}, {7'h47}, {7'h48}, {7'h4A}, {7'h4B}, {7'h4C}, {7'h4D}, {7'h4F}, {7'h50}, {7'h51}, {7'h53}, {7'h54}, {7'h55}, {7'h57}, {7'h58}, {7'h5A}, {7'h5B}, {7'h5D}, {7'h5E}, {7'h60}, {7'h61}, {7'h63}, {7'h64}, {7'h66}, {7'h68}, {7'h69}, {7'h6B}, {7'h6D}, {7'h6E}, {7'h70}, {7'h72}, {7'h74}, {7'h75}, {7'h77}, {7'h79}, {7'h7B}, {_recSigLookup0_T_6}, {_recSigLookup0_T_6}};	// @[Mux.scala:81:{58,61}]
  wire [6:0]        recSigLookup0 = _GEN_0[_recSigLookup0_WIRE];	// @[Mux.scala:27:73, :81:{58,61}]
  wire [6:0]        _recSigLookup1_T_2 = {5'h1F, _recSigLookup1_T != 7'h1, 1'h1};	// @[Bitwise.scala:77:12, Mux.scala:81:{58,61}, VFPUSubModule.scala:88:69, VFRec.scala:82:28]
  wire [127:0][6:0] _GEN_1 = {{7'h0}, {7'h1}, {7'h1}, {7'h2}, {7'h2}, {7'h3}, {7'h3}, {7'h4}, {7'h4}, {7'h5}, {7'h5}, {7'h6}, {7'h7}, {7'h7}, {7'h8}, {7'h8}, {7'h9}, {7'h9}, {7'hA}, {7'hB}, {7'hB}, {7'hC}, {7'hC}, {7'hD}, {7'hE}, {7'hE}, {7'hF}, {7'hF}, {7'h10}, {7'h11}, {7'h11}, {7'h12}, {7'h13}, {7'h13}, {7'h14}, {7'h15}, {7'h15}, {7'h16}, {7'h17}, {7'h17}, {7'h18}, {7'h19}, {7'h19}, {7'h1A}, {7'h1B}, {7'h1C}, {7'h1C}, {7'h1D}, {7'h1E}, {7'h1F}, {7'h1F}, {7'h20}, {7'h21}, {7'h22}, {7'h23}, {7'h23}, {7'h24}, {7'h25}, {7'h26}, {7'h27}, {7'h28}, {7'h28}, {7'h29}, {7'h2A}, {7'h2B}, {7'h2C}, {7'h2D}, {7'h2E}, {7'h2F}, {7'h30}, {7'h31}, {7'h32}, {7'h33}, {7'h34}, {7'h35}, {7'h36}, {7'h37}, {7'h38}, {7'h39}, {7'h3A}, {7'h3B}, {7'h3C}, {7'h3D}, {7'h3E}, {7'h3F}, {7'h40}, {7'h41}, {7'h42}, {7'h44}, {7'h45}, {7'h46}, {7'h47}, {7'h48}, {7'h4A}, {7'h4B}, {7'h4C}, {7'h4D}, {7'h4F}, {7'h50}, {7'h51}, {7'h53}, {7'h54}, {7'h55}, {7'h57}, {7'h58}, {7'h5A}, {7'h5B}, {7'h5D}, {7'h5E}, {7'h60}, {7'h61}, {7'h63}, {7'h64}, {7'h66}, {7'h68}, {7'h69}, {7'h6B}, {7'h6D}, {7'h6E}, {7'h70}, {7'h72}, {7'h74}, {7'h75}, {7'h77}, {7'h79}, {7'h7B}, {_recSigLookup1_T_2}, {_recSigLookup1_T_2}};	// @[Mux.scala:81:{58,61}]
  wire [6:0]        recSigLookup1 = _GEN_1[_recSigLookup1_T];	// @[Mux.scala:81:{58,61}, VFRec.scala:82:28]
  wire [5:0]        _rsqrtSigLookup0_WIRE_1 = (io_in_bits_uop_typeTag ? 6'h0 : _recSigLookup0_T[6:1]) | (io_in_bits_uop_typeTag ? _recSigLookup0_T_1[6:1] : 6'h0);	// @[Mux.scala:27:73, VFRec.scala:82:28, :95:28, :106:{44,70}]
  wire [6:0]        _rsqrtSigLookup0_odd_T_1 = {5'h1F, _rsqrtSigLookup0_WIRE_1 != 6'h1, 1'h1};	// @[Bitwise.scala:77:12, Mux.scala:27:73, :81:{58,61}, VFPUSubModule.scala:88:69]
  wire [63:0][6:0]  _GEN_2 = {{7'h35}, {7'h36}, {7'h37}, {7'h38}, {7'h38}, {7'h39}, {7'h3A}, {7'h3B}, {7'h3B}, {7'h3C}, {7'h3D}, {7'h3E}, {7'h3F}, {7'h3F}, {7'h40}, {7'h41}, {7'h42}, {7'h43}, {7'h44}, {7'h45}, {7'h46}, {7'h46}, {7'h47}, {7'h48}, {7'h49}, {7'h4A}, {7'h4B}, {7'h4C}, {7'h4D}, {7'h4E}, {7'h4F}, {7'h50}, {7'h52}, {7'h53}, {7'h54}, {7'h55}, {7'h56}, {7'h57}, {7'h58}, {7'h5A}, {7'h5B}, {7'h5C}, {7'h5D}, {7'h5F}, {7'h60}, {7'h61}, {7'h63}, {7'h64}, {7'h66}, {7'h67}, {7'h69}, {7'h6A}, {7'h6C}, {7'h6D}, {7'h6F}, {7'h71}, {7'h72}, {7'h74}, {7'h76}, {7'h77}, {7'h79}, {7'h7B}, {_rsqrtSigLookup0_odd_T_1}, {_rsqrtSigLookup0_odd_T_1}};	// @[Mux.scala:81:{58,61}]
  wire [6:0]        rsqrtSigLookup0 = ~io_in_bits_uop_typeTag & normExpInFP32_0[0] | io_in_bits_uop_typeTag & normExpInFP64_0[0] ? _GEN_2[_rsqrtSigLookup0_WIRE_1] : _GEN[_rsqrtSigLookup0_WIRE_1];	// @[Mux.scala:27:73, :81:{58,61}, VFRec.scala:73:48, :81:28, :94:28, :105:{39,67}, :224:8]
  wire [6:0]        _rsqrtSigLookup1_odd_T_1 = {5'h1F, _recSigLookup1_T[6:1] != 6'h1, 1'h1};	// @[Bitwise.scala:77:12, Mux.scala:81:{58,61}, VFPUSubModule.scala:88:69, VFRec.scala:82:28, :108:86]
  wire [11:0]       _GEN_3 = 12'hBFC - normExpInFP64_0;	// @[VFRec.scala:94:28, :115:65]
  wire [8:0]        _GEN_4 = 9'h17C - normExpInFP32_1;	// @[VFRec.scala:81:28, :113:65]
  wire [63:0][6:0]  _GEN_5 = {{7'h35}, {7'h36}, {7'h37}, {7'h38}, {7'h38}, {7'h39}, {7'h3A}, {7'h3B}, {7'h3B}, {7'h3C}, {7'h3D}, {7'h3E}, {7'h3F}, {7'h3F}, {7'h40}, {7'h41}, {7'h42}, {7'h43}, {7'h44}, {7'h45}, {7'h46}, {7'h46}, {7'h47}, {7'h48}, {7'h49}, {7'h4A}, {7'h4B}, {7'h4C}, {7'h4D}, {7'h4E}, {7'h4F}, {7'h50}, {7'h52}, {7'h53}, {7'h54}, {7'h55}, {7'h56}, {7'h57}, {7'h58}, {7'h5A}, {7'h5B}, {7'h5C}, {7'h5D}, {7'h5F}, {7'h60}, {7'h61}, {7'h63}, {7'h64}, {7'h66}, {7'h67}, {7'h69}, {7'h6A}, {7'h6C}, {7'h6D}, {7'h6F}, {7'h71}, {7'h72}, {7'h74}, {7'h76}, {7'h77}, {7'h79}, {7'h7B}, {_rsqrtSigLookup1_odd_T_1}, {_rsqrtSigLookup1_odd_T_1}};	// @[Mux.scala:81:{58,61}]
  wire [8:0]        _GEN_6 = 9'h17C - normExpInFP32_0;	// @[VFRec.scala:81:28, :113:65]
  wire              _io_out_bits_fflags_T_1 = io_in_valid & _WIRE;	// @[VFPUSubModule.scala:70:35, :88:49]
  always @(posedge clock) begin
    if (reset)
      REG <= 1'h0;	// @[VFPUSubModule.scala:59:60]
    else if (_io_out_bits_fflags_T_1)	// @[VFPUSubModule.scala:88:49]
      REG <= io_in_valid;	// @[VFPUSubModule.scala:59:60]
    else	// @[VFPUSubModule.scala:88:49]
      REG <= ~io_out_ready & REG;	// @[VFPUSubModule.scala:59:60, :77:41, :78:19]
    if (_io_out_bits_fflags_T_1) begin	// @[VFPUSubModule.scala:88:49]
      REG_1_ctrl_lsrc_0 <= io_in_bits_uop_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
      REG_1_ctrl_lsrc_1 <= io_in_bits_uop_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
      REG_1_ctrl_ldest <= io_in_bits_uop_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
      REG_1_ctrl_vm <= io_in_bits_uop_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
      REG_1_ctrl_funct6 <= io_in_bits_uop_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
      REG_1_ctrl_funct3 <= io_in_bits_uop_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
      REG_1_ctrl_widen <= io_in_bits_uop_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
      REG_1_ctrl_widen2 <= io_in_bits_uop_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
      REG_1_ctrl_narrow <= io_in_bits_uop_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
      REG_1_ctrl_narrow_to_1 <= io_in_bits_uop_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
      REG_1_info_vstart <= io_in_bits_uop_info_vstart;	// @[VFPUSubModule.scala:63:57]
      REG_1_info_vl <= io_in_bits_uop_info_vl;	// @[VFPUSubModule.scala:63:57]
      REG_1_info_vxrm <= io_in_bits_uop_info_vxrm;	// @[VFPUSubModule.scala:63:57]
      REG_1_info_frm <= io_in_bits_uop_info_frm;	// @[VFPUSubModule.scala:63:57]
      REG_1_info_vlmul <= io_in_bits_uop_info_vlmul;	// @[VFPUSubModule.scala:63:57]
      REG_1_info_vsew <= io_in_bits_uop_info_vsew;	// @[VFPUSubModule.scala:63:57]
      REG_1_info_ma <= io_in_bits_uop_info_ma;	// @[VFPUSubModule.scala:63:57]
      REG_1_info_ta <= io_in_bits_uop_info_ta;	// @[VFPUSubModule.scala:63:57]
      REG_1_info_destEew <= io_in_bits_uop_info_destEew;	// @[VFPUSubModule.scala:63:57]
      REG_1_expdIdx <= io_in_bits_uop_expdIdx;	// @[VFPUSubModule.scala:63:57]
      REG_1_expdEnd <= io_in_bits_uop_expdEnd;	// @[VFPUSubModule.scala:63:57]
      REG_1_sysUop_robIdx_flag <= io_in_bits_uop_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
      REG_1_sysUop_robIdx_value <= io_in_bits_uop_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
      REG_1_maskKeep <= io_in_bits_uop_maskKeep;	// @[VFPUSubModule.scala:63:57]
      REG_1_maskOff <= io_in_bits_uop_maskOff;	// @[VFPUSubModule.scala:63:57]
      if (io_in_bits_uop_vfpCtrl_isRec7) begin
        io_out_bits_vd_r <=
          (io_in_bits_uop_typeTag ? 64'h0 : {(_TypesFP32_1_recType_0 ? {io_in_bits_vs2[63], 8'hFD - normExpInFP32_1[7:0], recSigLookup1, 16'h0} : 32'h0) | (_TypesFP32_1_recType_1 ? {io_in_bits_vs2[63], 31'h0} : 32'h0) | (_TypesFP32_1_recType_2 ? {io_in_bits_vs2[63], 10'h1, recSigLookup1, 14'h0} : 32'h0) | (_TypesFP32_1_recType_3 ? {io_in_bits_vs2[63], 9'h1, recSigLookup1, 15'h0} : 32'h0) | (_TypesFP32_1_recType_4 ? 32'hFF7FFFFF : 32'h0) | (_TypesFP32_1_recType_5 ? 32'hFF800000 : 32'h0) | (_TypesFP32_1_recType_6 ? 32'h7F7FFFFF : 32'h0) | (_TypesFP32_1_recType_7 ? 32'h7F800000 : 32'h0) | (_TypesFP32_1_recType_8 ? {io_in_bits_vs2[63], 31'h7F800000} : 32'h0) | (_TypesFP32_1_recType_9 ? 32'h7FC00000 : 32'h0) | (_TypesFP32_1_recType_10 ? 32'h7FC00000 : 32'h0), (_TypesFP32_0_recType_0 ? {io_in_bits_vs2[31], 8'hFD - normExpInFP32_0[7:0], recSigLookup0, 16'h0} : 32'h0) | (_TypesFP32_0_recType_1 ? {io_in_bits_vs2[31], 31'h0} : 32'h0) | (_TypesFP32_0_recType_2 ? {io_in_bits_vs2[31], 10'h1, recSigLookup0, 14'h0} : 32'h0) | (_TypesFP32_0_recType_3 ? {io_in_bits_vs2[31], 9'h1, recSigLookup0, 15'h0} : 32'h0) | (_TypesFP32_0_recType_4 ? 32'hFF7FFFFF : 32'h0) | (_TypesFP32_0_recType_5 ? 32'hFF800000 : 32'h0) | (_TypesFP32_0_recType_6 ? 32'h7F7FFFFF : 32'h0) | (_TypesFP32_0_recType_7 ? 32'h7F800000 : 32'h0) | (_TypesFP32_0_recType_8 ? {io_in_bits_vs2[31], 31'h7F800000} : 32'h0) | (_TypesFP32_0_recType_9 ? 32'h7FC00000 : 32'h0) | (_TypesFP32_0_recType_10 ? 32'h7FC00000 : 32'h0)})
          | (io_in_bits_uop_typeTag ? (_TypesFP64_0_recType_0 ? {io_in_bits_vs2[63], 11'h7FD - normExpInFP64_0[10:0], recSigLookup0, 45'h0} : 64'h0) | (_TypesFP64_0_recType_1 ? {io_in_bits_vs2[63], 63'h0} : 64'h0) | (_TypesFP64_0_recType_2 ? {io_in_bits_vs2[63], 13'h1, recSigLookup0, 43'h0} : 64'h0) | (_TypesFP64_0_recType_3 ? {io_in_bits_vs2[63], 12'h1, recSigLookup0, 44'h0} : 64'h0) | (_TypesFP64_0_recType_4 ? 64'hFFEFFFFFFFFFFFFF : 64'h0) | (_TypesFP64_0_recType_5 ? 64'hFFF0000000000000 : 64'h0) | (_TypesFP64_0_recType_6 ? 64'h7FEFFFFFFFFFFFFF : 64'h0) | (_TypesFP64_0_recType_7 ? 64'h7FF0000000000000 : 64'h0) | (_TypesFP64_0_recType_8 ? {io_in_bits_vs2[63], 63'h7FF0000000000000} : 64'h0) | (_TypesFP64_0_recType_9 ? 64'h7FF8000000000000 : 64'h0) | (_TypesFP64_0_recType_10 ? 64'h7FF8000000000000 : 64'h0) : 64'h0);	// @[Cat.scala:33:92, Mux.scala:27:73, :81:58, Reg.scala:19:16, VFRec.scala:57:19, :67:49, :81:28, :94:28, :136:61, :138:61, package.scala:63:19]
        io_out_bits_fflags_r <= (io_in_bits_uop_typeTag ? 5'h0 : {_TypesFP32_0_recType_10, _TypesFP32_0_recType_8, (_TypesFP32_0_recType_4 ? 3'h5 : 3'h0) | (_TypesFP32_0_recType_5 ? 3'h5 : 3'h0) | (_TypesFP32_0_recType_6 ? 3'h5 : 3'h0) | (_TypesFP32_0_recType_7 ? 3'h5 : 3'h0)} & {5{eleActives_0}} | {_TypesFP32_1_recType_10, _TypesFP32_1_recType_8, (_TypesFP32_1_recType_4 ? 3'h5 : 3'h0) | (_TypesFP32_1_recType_5 ? 3'h5 : 3'h0) | (_TypesFP32_1_recType_6 ? 3'h5 : 3'h0) | (_TypesFP32_1_recType_7 ? 3'h5 : 3'h0)} & {5{eleActives_1}}) | (io_in_bits_uop_typeTag ? {_TypesFP64_0_recType_10, _TypesFP64_0_recType_8, (_TypesFP64_0_recType_4 ? 3'h5 : 3'h0) | (_TypesFP64_0_recType_5 ? 3'h5 : 3'h0) | (_TypesFP64_0_recType_6 ? 3'h5 : 3'h0) | (_TypesFP64_0_recType_7 ? 3'h5 : 3'h0)} & {5{eleActives_0}} : 5'h0);	// @[Bitwise.scala:77:12, Mux.scala:27:73, Reg.scala:19:16, VFPUSubModule.scala:23:75, VFRec.scala:57:19, :161:32, :213:8]
      end
      else begin
        io_out_bits_vd_r <= (io_in_bits_uop_typeTag ? 64'h0 : {(_TypesFP32_1_rsqrtType_0 ? 32'h7FC00000 : 32'h0) | (_TypesFP32_1_rsqrtType_1 ? 32'hFF800000 : 32'h0) | (_TypesFP32_1_rsqrtType_2 ? 32'h7F800000 : 32'h0) | (_TypesFP32_1_rsqrtType_3 ? {io_in_bits_vs2[63], _GEN_4[8:1], normExpInFP32_1[0] ? _GEN_5[_recSigLookup1_T[6:1]] : _GEN[_recSigLookup1_T[6:1]], 16'h0} : 32'h0) | (_TypesFP32_1_rsqrtType_5 ? 32'h7FC00000 : 32'h0) | (_TypesFP32_1_rsqrtType_6 ? 32'h7FC00000 : 32'h0), (_TypesFP32_0_rsqrtType_0 ? 32'h7FC00000 : 32'h0) | (_TypesFP32_0_rsqrtType_1 ? 32'hFF800000 : 32'h0) | (_TypesFP32_0_rsqrtType_2 ? 32'h7F800000 : 32'h0) | (_TypesFP32_0_rsqrtType_3 ? {io_in_bits_vs2[31], _GEN_6[8:1], rsqrtSigLookup0, 16'h0} : 32'h0) | (_TypesFP32_0_rsqrtType_5 ? 32'h7FC00000 : 32'h0) | (_TypesFP32_0_rsqrtType_6 ? 32'h7FC00000 : 32'h0)}) | (io_in_bits_uop_typeTag ? (_TypesFP64_0_rsqrtType_0 ? 64'h7FF8000000000000 : 64'h0) | (_TypesFP64_0_rsqrtType_1 ? 64'hFFF0000000000000 : 64'h0) | (_TypesFP64_0_rsqrtType_2 ? 64'h7FF0000000000000 : 64'h0) | (_TypesFP64_0_rsqrtType_3 ? {io_in_bits_vs2[63], _GEN_3[11:1], rsqrtSigLookup0, 45'h0} : 64'h0) | (_TypesFP64_0_rsqrtType_5 ? 64'h7FF8000000000000 : 64'h0) | (_TypesFP64_0_rsqrtType_6 ? 64'h7FF8000000000000 : 64'h0) : 64'h0);	// @[Cat.scala:33:92, Mux.scala:27:73, :81:{58,61}, Reg.scala:19:16, VFRec.scala:57:19, :67:49, :81:28, :82:28, :108:{53,86}, :113:{65,76}, :115:{65,76}, :224:8, package.scala:63:19]
        io_out_bits_fflags_r <= (io_in_bits_uop_typeTag ? 5'h0 : {_TypesFP32_0_rsqrtType_0 | _TypesFP32_0_rsqrtType_6, _TypesFP32_0_rsqrtType_1 | _TypesFP32_0_rsqrtType_2, 3'h0} & {5{eleActives_0}} | {_TypesFP32_1_rsqrtType_0 | _TypesFP32_1_rsqrtType_6, _TypesFP32_1_rsqrtType_1 | _TypesFP32_1_rsqrtType_2, 3'h0} & {5{eleActives_1}}) | (io_in_bits_uop_typeTag ? {_TypesFP64_0_rsqrtType_0 | _TypesFP64_0_rsqrtType_6, _TypesFP64_0_rsqrtType_1 | _TypesFP64_0_rsqrtType_2, 3'h0} & {5{eleActives_0}} : 5'h0);	// @[Bitwise.scala:77:12, Mux.scala:27:73, Reg.scala:19:16, VFPUSubModule.scala:23:75, VFRec.scala:57:19, :161:32, :184:8]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        REG = _RANDOM_0[0];	// @[VFPUSubModule.scala:59:60]
        REG_1_ctrl_lsrc_0 = _RANDOM_0[5:1];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_ctrl_lsrc_1 = _RANDOM_0[10:6];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_ctrl_ldest = _RANDOM_0[15:11];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_ctrl_vm = _RANDOM_0[16];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_ctrl_funct6 = _RANDOM_0[22:17];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_ctrl_funct3 = _RANDOM_0[25:23];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_ctrl_widen = _RANDOM_0[26];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_ctrl_widen2 = _RANDOM_0[27];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_ctrl_narrow = _RANDOM_0[28];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_ctrl_narrow_to_1 = _RANDOM_0[29];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_info_vstart = {_RANDOM_0[31:30], _RANDOM_1[4:0]};	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_1_info_vl = _RANDOM_1[12:5];	// @[VFPUSubModule.scala:63:57]
        REG_1_info_vxrm = _RANDOM_1[14:13];	// @[VFPUSubModule.scala:63:57]
        REG_1_info_frm = _RANDOM_1[17:15];	// @[VFPUSubModule.scala:63:57]
        REG_1_info_vlmul = _RANDOM_1[20:18];	// @[VFPUSubModule.scala:63:57]
        REG_1_info_vsew = _RANDOM_1[23:21];	// @[VFPUSubModule.scala:63:57]
        REG_1_info_ma = _RANDOM_1[24];	// @[VFPUSubModule.scala:63:57]
        REG_1_info_ta = _RANDOM_1[25];	// @[VFPUSubModule.scala:63:57]
        REG_1_info_destEew = _RANDOM_1[28:26];	// @[VFPUSubModule.scala:63:57]
        REG_1_expdIdx = _RANDOM_1[31:29];	// @[VFPUSubModule.scala:63:57]
        REG_1_expdEnd = _RANDOM_2[0];	// @[VFPUSubModule.scala:63:57]
        REG_1_sysUop_robIdx_flag = _RANDOM_2[2];	// @[VFPUSubModule.scala:63:57]
        REG_1_sysUop_robIdx_value = _RANDOM_2[10:3];	// @[VFPUSubModule.scala:63:57]
        REG_1_maskKeep = {_RANDOM_2[31:11], _RANDOM_3, _RANDOM_4[10:0]};	// @[VFPUSubModule.scala:63:57]
        REG_1_maskOff = {_RANDOM_4[31:11], _RANDOM_5, _RANDOM_6[10:0]};	// @[VFPUSubModule.scala:63:57]
        io_out_bits_vd_r = {_RANDOM_7[31:8], _RANDOM_8, _RANDOM_9[7:0]};	// @[Reg.scala:19:16]
        io_out_bits_fflags_r = _RANDOM_9[12:8];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  OutTypeClassify TypesFP32_0 (	// @[VFRec.scala:57:19]
    .fp_sign     (io_in_bits_vs2[31]),	// @[VFRec.scala:67:49, package.scala:63:19]
    .fp_exp      (io_in_bits_vs2[30:23]),	// @[VFRec.scala:67:49, package.scala:64:18]
    .fp_sig      (io_in_bits_vs2[22:0]),	// @[VFRec.scala:67:49, package.scala:65:18]
    .rm          (io_in_bits_uop_info_frm),
    .isSubnormal (_TypesFP32_0_isSubnormal),
    .rsqrtType_0 (_TypesFP32_0_rsqrtType_0),
    .rsqrtType_1 (_TypesFP32_0_rsqrtType_1),
    .rsqrtType_2 (_TypesFP32_0_rsqrtType_2),
    .rsqrtType_3 (_TypesFP32_0_rsqrtType_3),
    .rsqrtType_5 (_TypesFP32_0_rsqrtType_5),
    .rsqrtType_6 (_TypesFP32_0_rsqrtType_6),
    .recType_0   (_TypesFP32_0_recType_0),
    .recType_1   (_TypesFP32_0_recType_1),
    .recType_2   (_TypesFP32_0_recType_2),
    .recType_3   (_TypesFP32_0_recType_3),
    .recType_4   (_TypesFP32_0_recType_4),
    .recType_5   (_TypesFP32_0_recType_5),
    .recType_6   (_TypesFP32_0_recType_6),
    .recType_7   (_TypesFP32_0_recType_7),
    .recType_8   (_TypesFP32_0_recType_8),
    .recType_9   (_TypesFP32_0_recType_9),
    .recType_10  (_TypesFP32_0_recType_10)
  );
  OutTypeClassify TypesFP32_1 (	// @[VFRec.scala:57:19]
    .fp_sign     (io_in_bits_vs2[63]),	// @[VFRec.scala:67:49, package.scala:63:19]
    .fp_exp      (io_in_bits_vs2[62:55]),	// @[VFRec.scala:67:49, package.scala:64:18]
    .fp_sig      (io_in_bits_vs2[54:32]),	// @[VFRec.scala:67:49, package.scala:65:18]
    .rm          (io_in_bits_uop_info_frm),
    .isSubnormal (_TypesFP32_1_isSubnormal),
    .rsqrtType_0 (_TypesFP32_1_rsqrtType_0),
    .rsqrtType_1 (_TypesFP32_1_rsqrtType_1),
    .rsqrtType_2 (_TypesFP32_1_rsqrtType_2),
    .rsqrtType_3 (_TypesFP32_1_rsqrtType_3),
    .rsqrtType_5 (_TypesFP32_1_rsqrtType_5),
    .rsqrtType_6 (_TypesFP32_1_rsqrtType_6),
    .recType_0   (_TypesFP32_1_recType_0),
    .recType_1   (_TypesFP32_1_recType_1),
    .recType_2   (_TypesFP32_1_recType_2),
    .recType_3   (_TypesFP32_1_recType_3),
    .recType_4   (_TypesFP32_1_recType_4),
    .recType_5   (_TypesFP32_1_recType_5),
    .recType_6   (_TypesFP32_1_recType_6),
    .recType_7   (_TypesFP32_1_recType_7),
    .recType_8   (_TypesFP32_1_recType_8),
    .recType_9   (_TypesFP32_1_recType_9),
    .recType_10  (_TypesFP32_1_recType_10)
  );
  CLZ_12 leadingZeroCntFP32_clz (	// @[CLZ.scala:23:21]
    .io_in  (io_in_bits_vs2[22:0]),	// @[VFRec.scala:67:49, package.scala:65:18]
    .io_out (_leadingZeroCntFP32_clz_io_out)
  );
  CLZ_12 leadingZeroCntFP32_clz_1 (	// @[CLZ.scala:23:21]
    .io_in  (io_in_bits_vs2[54:32]),	// @[VFRec.scala:67:49, package.scala:65:18]
    .io_out (_leadingZeroCntFP32_clz_1_io_out)
  );
  OutTypeClassify_2 TypesFP64_0 (	// @[VFRec.scala:57:19]
    .fp_sign     (io_in_bits_vs2[63]),	// @[package.scala:63:19]
    .fp_exp      (io_in_bits_vs2[62:52]),	// @[package.scala:64:18]
    .fp_sig      (io_in_bits_vs2[51:0]),	// @[package.scala:65:18]
    .rm          (io_in_bits_uop_info_frm),
    .isSubnormal (_TypesFP64_0_isSubnormal),
    .rsqrtType_0 (_TypesFP64_0_rsqrtType_0),
    .rsqrtType_1 (_TypesFP64_0_rsqrtType_1),
    .rsqrtType_2 (_TypesFP64_0_rsqrtType_2),
    .rsqrtType_3 (_TypesFP64_0_rsqrtType_3),
    .rsqrtType_5 (_TypesFP64_0_rsqrtType_5),
    .rsqrtType_6 (_TypesFP64_0_rsqrtType_6),
    .recType_0   (_TypesFP64_0_recType_0),
    .recType_1   (_TypesFP64_0_recType_1),
    .recType_2   (_TypesFP64_0_recType_2),
    .recType_3   (_TypesFP64_0_recType_3),
    .recType_4   (_TypesFP64_0_recType_4),
    .recType_5   (_TypesFP64_0_recType_5),
    .recType_6   (_TypesFP64_0_recType_6),
    .recType_7   (_TypesFP64_0_recType_7),
    .recType_8   (_TypesFP64_0_recType_8),
    .recType_9   (_TypesFP64_0_recType_9),
    .recType_10  (_TypesFP64_0_recType_10)
  );
  CLZ_32 leadingZeroCntFP64_clz (	// @[CLZ.scala:23:21]
    .io_in  (io_in_bits_vs2[51:0]),	// @[package.scala:65:18]
    .io_out (_leadingZeroCntFP64_clz_io_out)
  );
  assign io_in_ready = _WIRE;	// @[VFPUSubModule.scala:70:35]
  assign io_out_valid = REG;	// @[VFPUSubModule.scala:59:60]
  assign io_out_bits_vd = io_out_bits_vd_r;	// @[Reg.scala:19:16]
  assign io_out_bits_fflags = io_out_bits_fflags_r;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_lsrc_0 = REG_1_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_lsrc_1 = REG_1_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_ldest = REG_1_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_vm = REG_1_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_funct6 = REG_1_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_funct3 = REG_1_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_widen = REG_1_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_widen2 = REG_1_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_narrow = REG_1_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_narrow_to_1 = REG_1_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vstart = REG_1_info_vstart;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vl = REG_1_info_vl;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vxrm = REG_1_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_frm = REG_1_info_frm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vlmul = REG_1_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vsew = REG_1_info_vsew;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_ma = REG_1_info_ma;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_ta = REG_1_info_ta;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_destEew = REG_1_info_destEew;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_expdIdx = REG_1_expdIdx;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_expdEnd = REG_1_expdEnd;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_sysUop_robIdx_flag = REG_1_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_sysUop_robIdx_value = REG_1_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_maskKeep = REG_1_maskKeep;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_maskOff = REG_1_maskOff;	// @[VFPUSubModule.scala:63:57]
endmodule

