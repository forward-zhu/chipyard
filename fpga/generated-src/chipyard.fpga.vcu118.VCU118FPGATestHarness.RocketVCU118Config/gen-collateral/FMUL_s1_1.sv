// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FMUL_s1_1(
  input  [63:0] io_a,
                io_b,
  input  [2:0]  io_rm,
  output        io_out_special_case_valid,
                io_out_special_case_bits_nan,
                io_out_special_case_bits_inf,
                io_out_special_case_bits_inv,
                io_out_special_case_bits_hasZero,
                io_out_early_overflow,
                io_out_prod_sign,
  output [11:0] io_out_shift_amt,
                io_out_exp_shifted,
  output        io_out_may_be_subnormal,
  output [2:0]  io_out_rm
);

  wire [6:0]  _lzc_clz_io_out;	// @[CLZ.scala:23:21]
  wire        decode_a_isNaN = (&(io_a[62:52])) & (|(io_a[51:0]));	// @[package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire        decode_b_isNaN = (&(io_b[62:52])) & (|(io_b[51:0]));	// @[package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire [11:0] exp_sum = {1'h0, io_a[62:52] | {10'h0, ~(|(io_a[62:52]))}} + {1'h0, io_b[62:52] | {10'h0, ~(|(io_b[62:52]))}};	// @[FMUL.scala:76:27, package.scala:36:31, :41:27, :64:18, :96:{27,29}]
  wire [12:0] _GEN = {1'h0, exp_sum} - 13'h3C8;	// @[FMUL.scala:76:27, :79:46, package.scala:41:27]
  wire [11:0] _GEN_0 = {5'h0, _lzc_clz_io_out};	// @[CLZ.scala:23:21, FMUL.scala:88:30]
  wire        exceed_lim = _GEN[11:0] <= _GEN_0;	// @[FMUL.scala:79:46, :81:37, :88:30]
  wire [11:0] shift_amt = _GEN[12] ? 12'h0 : exceed_lim ? _GEN[11:0] : _GEN_0;	// @[FMUL.scala:79:46, :80:39, :81:37, :88:30, :89:{22,44}]
  wire        hasZero = ~(|(io_a[62:52])) & ~(|(io_a[51:0])) | ~(|(io_b[62:52])) & ~(|(io_b[51:0]));	// @[FMUL.scala:103:33, package.scala:36:31, :38:31, :41:27, :44:27, :47:41, :64:18, :65:18]
  wire        hasNaN = decode_a_isNaN | decode_b_isNaN;	// @[FMUL.scala:104:31, package.scala:48:40]
  wire        hasInf = (&(io_a[62:52])) & ~(|(io_a[51:0])) | (&(io_b[62:52])) & ~(|(io_b[51:0]));	// @[FMUL.scala:106:31, package.scala:37:31, :38:31, :44:27, :46:40, :64:18, :65:18]
  wire        zero_mul_inf = hasZero & hasInf;	// @[FMUL.scala:103:33, :106:31, :109:30]
  CLZ_15 lzc_clz (	// @[CLZ.scala:23:21]
    .io_in  ({55'h0, (|(io_a[62:52])) ? {|(io_b[62:52]), io_b[51:0]} : {|(io_a[62:52]), io_a[51:0]}}),	// @[Cat.scala:33:92, FMUL.scala:86:26, package.scala:36:31, :64:18, :65:18]
    .io_out (_lzc_clz_io_out)
  );
  assign io_out_special_case_valid = hasZero | hasNaN | hasInf;	// @[FMUL.scala:103:33, :104:31, :106:31, :107:47]
  assign io_out_special_case_bits_nan = hasNaN | zero_mul_inf;	// @[FMUL.scala:104:31, :109:30, :110:27]
  assign io_out_special_case_bits_inf = hasInf;	// @[FMUL.scala:106:31]
  assign io_out_special_case_bits_inv = decode_a_isNaN & ~(io_a[51]) | decode_b_isNaN & ~(io_b[51]) | zero_mul_inf;	// @[FMUL.scala:109:30, :111:28, package.scala:48:40, :49:{37,40,49}]
  assign io_out_special_case_bits_hasZero = hasZero;	// @[FMUL.scala:103:33]
  assign io_out_early_overflow = exp_sum > 12'hBFD;	// @[FMUL.scala:76:27, :83:29]
  assign io_out_prod_sign = io_a[63] ^ io_b[63];	// @[FMUL.scala:59:29, package.scala:63:19]
  assign io_out_shift_amt = shift_amt;	// @[FMUL.scala:89:22]
  assign io_out_exp_shifted = exp_sum - 12'h3C7 - shift_amt;	// @[FMUL.scala:76:27, :77:26, :89:22, :91:30]
  assign io_out_may_be_subnormal = exceed_lim | _GEN[12];	// @[FMUL.scala:79:46, :80:39, :88:30, :97:41]
  assign io_out_rm = io_rm;
endmodule

