// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VFDivSqrt(
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_vs1,
                io_in_bits_vs2,
  input  [7:0]  io_in_bits_prestart,
                io_in_bits_mask,
                io_in_bits_tail,
  input         io_in_bits_uop_ctrl_vm,
  input  [2:0]  io_in_bits_uop_info_frm,
  input  [63:0] io_in_bits_uop_maskKeep,
                io_in_bits_uop_maskOff,
  input         io_in_bits_uop_vfpCtrl_isDivSqrt,
                io_in_bits_uop_vfpCtrl_isSqrt,
                io_in_bits_uop_vfpCtrl_divReverse,
                io_in_bits_uop_typeTag,
                io_out_ready,
  output        io_in_ready,
                io_out_valid,
  output [63:0] io_out_bits_vd,
  output [4:0]  io_out_bits_fflags,
  output [63:0] io_out_bits_uop_maskKeep,
                io_out_bits_uop_maskOff
);

  wire        _dataModule_io_in_ready;	// @[VFDivSqrt.scala:81:26]
  wire        _dataModule_io_out_valid;	// @[VFDivSqrt.scala:81:26]
  wire        _dataModule_io_in_valid_T = io_in_valid & io_in_bits_uop_vfpCtrl_isDivSqrt;	// @[VFDivSqrt.scala:87:41]
  reg         io_out_valid_REG;	// @[VFDivSqrt.scala:96:26]
  reg  [63:0] uopReg_maskKeep;	// @[Reg.scala:19:16]
  reg  [63:0] uopReg_maskOff;	// @[Reg.scala:19:16]
  always @(posedge clock) begin
    io_out_valid_REG <= _dataModule_io_out_valid;	// @[VFDivSqrt.scala:81:26, :96:26]
    if (_dataModule_io_in_valid_T & _dataModule_io_in_ready) begin	// @[VFDivSqrt.scala:81:26, :87:41, :98:65]
      uopReg_maskKeep <= io_in_bits_uop_maskKeep;	// @[Reg.scala:19:16]
      uopReg_maskOff <= io_in_bits_uop_maskOff;	// @[Reg.scala:19:16]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        io_out_valid_REG = _RANDOM_0[0];	// @[VFDivSqrt.scala:96:26]
        uopReg_maskKeep = {_RANDOM_2[31:11], _RANDOM_3, _RANDOM_4[10:0]};	// @[Reg.scala:19:16]
        uopReg_maskOff = {_RANDOM_4[31:11], _RANDOM_5, _RANDOM_6[10:0]};	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  VFDivSqrtDataModule dataModule (	// @[VFDivSqrt.scala:81:26]
    .clock                         (clock),
    .reset                         (reset),
    .io_in_valid                   (_dataModule_io_in_valid_T),	// @[VFDivSqrt.scala:87:41]
    .io_in_bits_vs1                (io_in_bits_uop_vfpCtrl_divReverse ? io_in_bits_vs2 : io_in_bits_vs1),	// @[VFDivSqrt.scala:83:20, :91:43, :92:31]
    .io_in_bits_vs2                (io_in_bits_uop_vfpCtrl_divReverse ? io_in_bits_vs1 : io_in_bits_vs2),	// @[VFDivSqrt.scala:83:20, :91:43, :93:31]
    .io_in_bits_prestart           (io_in_bits_prestart),
    .io_in_bits_mask               (io_in_bits_mask),
    .io_in_bits_tail               (io_in_bits_tail),
    .io_in_bits_uop_ctrl_vm        (io_in_bits_uop_ctrl_vm),
    .io_in_bits_uop_info_frm       (io_in_bits_uop_info_frm),
    .io_in_bits_uop_vfpCtrl_isSqrt (io_in_bits_uop_vfpCtrl_isSqrt),
    .io_in_bits_uop_typeTag        (io_in_bits_uop_typeTag),
    .io_out_ready                  (io_out_ready),
    .io_in_ready                   (_dataModule_io_in_ready),
    .io_out_valid                  (_dataModule_io_out_valid),
    .io_out_bits_vd                (io_out_bits_vd),
    .io_out_bits_fflags            (io_out_bits_fflags)
  );
  assign io_in_ready = _dataModule_io_in_ready;	// @[VFDivSqrt.scala:81:26]
  assign io_out_valid = io_out_valid_REG;	// @[VFDivSqrt.scala:96:26]
  assign io_out_bits_uop_maskKeep = uopReg_maskKeep;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_maskOff = uopReg_maskOff;	// @[Reg.scala:19:16]
endmodule

