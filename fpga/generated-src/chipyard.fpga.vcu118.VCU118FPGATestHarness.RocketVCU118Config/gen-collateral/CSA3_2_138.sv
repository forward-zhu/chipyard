// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module CSA3_2_138(
  input  [55:0] io_in_0,
                io_in_1,
                io_in_2,
  output [55:0] io_out_0,
                io_out_1
);

  wire a_xor_b = io_in_0[0] ^ io_in_1[0];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_1 = io_in_0[1] ^ io_in_1[1];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_2 = io_in_0[2] ^ io_in_1[2];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_3 = io_in_0[3] ^ io_in_1[3];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_4 = io_in_0[4] ^ io_in_1[4];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_5 = io_in_0[5] ^ io_in_1[5];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_6 = io_in_0[6] ^ io_in_1[6];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_7 = io_in_0[7] ^ io_in_1[7];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_8 = io_in_0[8] ^ io_in_1[8];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_9 = io_in_0[9] ^ io_in_1[9];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_10 = io_in_0[10] ^ io_in_1[10];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_11 = io_in_0[11] ^ io_in_1[11];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_12 = io_in_0[12] ^ io_in_1[12];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_13 = io_in_0[13] ^ io_in_1[13];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_14 = io_in_0[14] ^ io_in_1[14];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_15 = io_in_0[15] ^ io_in_1[15];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_16 = io_in_0[16] ^ io_in_1[16];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_17 = io_in_0[17] ^ io_in_1[17];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_18 = io_in_0[18] ^ io_in_1[18];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_19 = io_in_0[19] ^ io_in_1[19];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_20 = io_in_0[20] ^ io_in_1[20];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_21 = io_in_0[21] ^ io_in_1[21];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_22 = io_in_0[22] ^ io_in_1[22];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_23 = io_in_0[23] ^ io_in_1[23];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_24 = io_in_0[24] ^ io_in_1[24];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_25 = io_in_0[25] ^ io_in_1[25];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_26 = io_in_0[26] ^ io_in_1[26];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_27 = io_in_0[27] ^ io_in_1[27];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_28 = io_in_0[28] ^ io_in_1[28];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_29 = io_in_0[29] ^ io_in_1[29];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_30 = io_in_0[30] ^ io_in_1[30];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_31 = io_in_0[31] ^ io_in_1[31];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_32 = io_in_0[32] ^ io_in_1[32];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_33 = io_in_0[33] ^ io_in_1[33];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_34 = io_in_0[34] ^ io_in_1[34];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_35 = io_in_0[35] ^ io_in_1[35];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_36 = io_in_0[36] ^ io_in_1[36];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_37 = io_in_0[37] ^ io_in_1[37];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_38 = io_in_0[38] ^ io_in_1[38];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_39 = io_in_0[39] ^ io_in_1[39];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_40 = io_in_0[40] ^ io_in_1[40];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_41 = io_in_0[41] ^ io_in_1[41];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_42 = io_in_0[42] ^ io_in_1[42];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_43 = io_in_0[43] ^ io_in_1[43];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_44 = io_in_0[44] ^ io_in_1[44];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_45 = io_in_0[45] ^ io_in_1[45];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_46 = io_in_0[46] ^ io_in_1[46];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_47 = io_in_0[47] ^ io_in_1[47];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_48 = io_in_0[48] ^ io_in_1[48];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_49 = io_in_0[49] ^ io_in_1[49];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_50 = io_in_0[50] ^ io_in_1[50];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_51 = io_in_0[51] ^ io_in_1[51];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_52 = io_in_0[52] ^ io_in_1[52];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_53 = io_in_0[53] ^ io_in_1[53];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_54 = io_in_0[54] ^ io_in_1[54];	// @[FDIV.scala:677:{32,45}, :678:21]
  wire a_xor_b_55 = io_in_0[55] ^ io_in_1[55];	// @[FDIV.scala:677:{32,45}, :678:21]
  assign io_out_0 = {a_xor_b_55 ^ io_in_2[55], a_xor_b_54 ^ io_in_2[54], a_xor_b_53 ^ io_in_2[53], a_xor_b_52 ^ io_in_2[52], a_xor_b_51 ^ io_in_2[51], a_xor_b_50 ^ io_in_2[50], a_xor_b_49 ^ io_in_2[49], a_xor_b_48 ^ io_in_2[48], a_xor_b_47 ^ io_in_2[47], a_xor_b_46 ^ io_in_2[46], a_xor_b_45 ^ io_in_2[45], a_xor_b_44 ^ io_in_2[44], a_xor_b_43 ^ io_in_2[43], a_xor_b_42 ^ io_in_2[42], a_xor_b_41 ^ io_in_2[41], a_xor_b_40 ^ io_in_2[40], a_xor_b_39 ^ io_in_2[39], a_xor_b_38 ^ io_in_2[38], a_xor_b_37 ^ io_in_2[37], a_xor_b_36 ^ io_in_2[36], a_xor_b_35 ^ io_in_2[35], a_xor_b_34 ^ io_in_2[34], a_xor_b_33 ^ io_in_2[33], a_xor_b_32 ^ io_in_2[32], a_xor_b_31 ^ io_in_2[31], a_xor_b_30 ^ io_in_2[30], a_xor_b_29 ^ io_in_2[29], a_xor_b_28 ^ io_in_2[28], a_xor_b_27 ^ io_in_2[27], a_xor_b_26 ^ io_in_2[26], a_xor_b_25 ^ io_in_2[25], a_xor_b_24 ^ io_in_2[24], a_xor_b_23 ^ io_in_2[23], a_xor_b_22 ^ io_in_2[22], a_xor_b_21 ^ io_in_2[21], a_xor_b_20 ^ io_in_2[20], a_xor_b_19 ^ io_in_2[19], a_xor_b_18 ^ io_in_2[18], a_xor_b_17 ^ io_in_2[17], a_xor_b_16 ^ io_in_2[16], a_xor_b_15 ^ io_in_2[15], a_xor_b_14 ^ io_in_2[14], a_xor_b_13 ^ io_in_2[13], a_xor_b_12 ^ io_in_2[12], a_xor_b_11 ^ io_in_2[11], a_xor_b_10 ^ io_in_2[10], a_xor_b_9 ^ io_in_2[9], a_xor_b_8 ^ io_in_2[8], a_xor_b_7 ^ io_in_2[7], a_xor_b_6 ^ io_in_2[6], a_xor_b_5 ^ io_in_2[5], a_xor_b_4 ^ io_in_2[4], a_xor_b_3 ^ io_in_2[3], a_xor_b_2 ^ io_in_2[2], a_xor_b_1 ^ io_in_2[1], a_xor_b ^ io_in_2[0]};	// @[Cat.scala:33:92, FDIV.scala:677:58, :678:21, :680:23]
  assign io_out_1 =
    {io_in_0[55] & io_in_1[55] | a_xor_b_55 & io_in_2[55],
     io_in_0[54] & io_in_1[54] | a_xor_b_54 & io_in_2[54],
     io_in_0[53] & io_in_1[53] | a_xor_b_53 & io_in_2[53],
     io_in_0[52] & io_in_1[52] | a_xor_b_52 & io_in_2[52],
     io_in_0[51] & io_in_1[51] | a_xor_b_51 & io_in_2[51],
     io_in_0[50] & io_in_1[50] | a_xor_b_50 & io_in_2[50],
     io_in_0[49] & io_in_1[49] | a_xor_b_49 & io_in_2[49],
     io_in_0[48] & io_in_1[48] | a_xor_b_48 & io_in_2[48],
     io_in_0[47] & io_in_1[47] | a_xor_b_47 & io_in_2[47],
     io_in_0[46] & io_in_1[46] | a_xor_b_46 & io_in_2[46],
     io_in_0[45] & io_in_1[45] | a_xor_b_45 & io_in_2[45],
     io_in_0[44] & io_in_1[44] | a_xor_b_44 & io_in_2[44],
     io_in_0[43] & io_in_1[43] | a_xor_b_43 & io_in_2[43],
     io_in_0[42] & io_in_1[42] | a_xor_b_42 & io_in_2[42],
     io_in_0[41] & io_in_1[41] | a_xor_b_41 & io_in_2[41],
     io_in_0[40] & io_in_1[40] | a_xor_b_40 & io_in_2[40],
     io_in_0[39] & io_in_1[39] | a_xor_b_39 & io_in_2[39],
     io_in_0[38] & io_in_1[38] | a_xor_b_38 & io_in_2[38],
     io_in_0[37] & io_in_1[37] | a_xor_b_37 & io_in_2[37],
     io_in_0[36] & io_in_1[36] | a_xor_b_36 & io_in_2[36],
     io_in_0[35] & io_in_1[35] | a_xor_b_35 & io_in_2[35],
     io_in_0[34] & io_in_1[34] | a_xor_b_34 & io_in_2[34],
     io_in_0[33] & io_in_1[33] | a_xor_b_33 & io_in_2[33],
     io_in_0[32] & io_in_1[32] | a_xor_b_32 & io_in_2[32],
     io_in_0[31] & io_in_1[31] | a_xor_b_31 & io_in_2[31],
     io_in_0[30] & io_in_1[30] | a_xor_b_30 & io_in_2[30],
     io_in_0[29] & io_in_1[29] | a_xor_b_29 & io_in_2[29],
     io_in_0[28] & io_in_1[28] | a_xor_b_28 & io_in_2[28],
     io_in_0[27] & io_in_1[27] | a_xor_b_27 & io_in_2[27],
     io_in_0[26] & io_in_1[26] | a_xor_b_26 & io_in_2[26],
     io_in_0[25] & io_in_1[25] | a_xor_b_25 & io_in_2[25],
     io_in_0[24] & io_in_1[24] | a_xor_b_24 & io_in_2[24],
     io_in_0[23] & io_in_1[23] | a_xor_b_23 & io_in_2[23],
     io_in_0[22] & io_in_1[22] | a_xor_b_22 & io_in_2[22],
     io_in_0[21] & io_in_1[21] | a_xor_b_21 & io_in_2[21],
     io_in_0[20] & io_in_1[20] | a_xor_b_20 & io_in_2[20],
     io_in_0[19] & io_in_1[19] | a_xor_b_19 & io_in_2[19],
     io_in_0[18] & io_in_1[18] | a_xor_b_18 & io_in_2[18],
     io_in_0[17] & io_in_1[17] | a_xor_b_17 & io_in_2[17],
     io_in_0[16] & io_in_1[16] | a_xor_b_16 & io_in_2[16],
     io_in_0[15] & io_in_1[15] | a_xor_b_15 & io_in_2[15],
     io_in_0[14] & io_in_1[14] | a_xor_b_14 & io_in_2[14],
     io_in_0[13] & io_in_1[13] | a_xor_b_13 & io_in_2[13],
     io_in_0[12] & io_in_1[12] | a_xor_b_12 & io_in_2[12],
     io_in_0[11] & io_in_1[11] | a_xor_b_11 & io_in_2[11],
     io_in_0[10] & io_in_1[10] | a_xor_b_10 & io_in_2[10],
     io_in_0[9] & io_in_1[9] | a_xor_b_9 & io_in_2[9],
     io_in_0[8] & io_in_1[8] | a_xor_b_8 & io_in_2[8],
     io_in_0[7] & io_in_1[7] | a_xor_b_7 & io_in_2[7],
     io_in_0[6] & io_in_1[6] | a_xor_b_6 & io_in_2[6],
     io_in_0[5] & io_in_1[5] | a_xor_b_5 & io_in_2[5],
     io_in_0[4] & io_in_1[4] | a_xor_b_4 & io_in_2[4],
     io_in_0[3] & io_in_1[3] | a_xor_b_3 & io_in_2[3],
     io_in_0[2] & io_in_1[2] | a_xor_b_2 & io_in_2[2],
     io_in_0[1] & io_in_1[1] | a_xor_b_1 & io_in_2[1],
     io_in_0[0] & io_in_1[0] | a_xor_b & io_in_2[0]};	// @[Cat.scala:33:92, FDIV.scala:677:{32,45,58}, :678:21, :679:21, :681:{24,35}]
endmodule

