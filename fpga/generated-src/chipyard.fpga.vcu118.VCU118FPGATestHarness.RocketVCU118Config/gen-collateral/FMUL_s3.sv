// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FMUL_s3(
  input         io_in_special_case_valid,
                io_in_special_case_bits_nan,
                io_in_special_case_bits_inf,
                io_in_special_case_bits_inv,
                io_in_special_case_bits_hasZero,
                io_in_raw_out_sign,
  input  [8:0]  io_in_raw_out_exp,
  input  [73:0] io_in_raw_out_sig,
  input         io_in_early_overflow,
  input  [2:0]  io_in_rm,
  output [31:0] io_result,
  output [4:0]  io_fflags,
  output        io_to_fadd_fp_prod_sign,
  output [7:0]  io_to_fadd_fp_prod_exp,
  output [46:0] io_to_fadd_fp_prod_sig,
  output        io_to_fadd_inter_flags_isNaN,
                io_to_fadd_inter_flags_isInf,
                io_to_fadd_inter_flags_isInv,
                io_to_fadd_inter_flags_overflow
);

  wire [22:0] _rounder_io_out;	// @[RoundingUnit.scala:46:25]
  wire        _rounder_io_inexact;	// @[RoundingUnit.scala:46:25]
  wire        _rounder_io_cout;	// @[RoundingUnit.scala:46:25]
  wire        _tininess_rounder_io_tininess;	// @[FMUL.scala:187:32]
  wire        common_of = (_rounder_io_cout ? io_in_raw_out_exp[7:0] == 8'hFE : (&(io_in_raw_out_exp[7:0]))) | io_in_early_overflow;	// @[FMUL.scala:184:14, :202:22, :204:16, :205:16, :206:5, RoundingUnit.scala:46:25]
  wire        common_ix = _rounder_io_inexact | common_of;	// @[FMUL.scala:206:5, :207:38, RoundingUnit.scala:46:25]
  wire        rmin = io_in_rm == 3'h1 | io_in_rm == 3'h2 & ~io_in_raw_out_sign | io_in_rm == 3'h3 & io_in_raw_out_sign;	// @[RoundingUnit.scala:58:{8,23,31,34,41,48,56}]
  TininessRounder tininess_rounder (	// @[FMUL.scala:187:32]
    .io_in_sign  (io_in_raw_out_sign),
    .io_in_sig   ({io_in_raw_out_sig[73:48], |(io_in_raw_out_sig[47:0])}),	// @[Cat.scala:33:92, FMUL.scala:185:{37,70,86}]
    .io_rm       (io_in_rm),
    .io_tininess (_tininess_rounder_io_tininess)
  );
  RoundingUnit rounder (	// @[RoundingUnit.scala:46:25]
    .io_in       (io_in_raw_out_sig[72:50]),	// @[FMUL.scala:193:20, RoundingUnit.scala:47:33]
    .io_roundIn  (io_in_raw_out_sig[49]),	// @[FMUL.scala:193:20, RoundingUnit.scala:48:{38,50}]
    .io_stickyIn (|{io_in_raw_out_sig[48], |(io_in_raw_out_sig[47:0])}),	// @[FMUL.scala:185:{70,86}, :193:20, RoundingUnit.scala:49:{39,54}]
    .io_signIn   (io_in_raw_out_sign),
    .io_rm       (io_in_rm),
    .io_out      (_rounder_io_out),
    .io_inexact  (_rounder_io_inexact),
    .io_cout     (_rounder_io_cout)
  );
  assign io_result = io_in_special_case_valid ? (io_in_special_case_bits_nan ? 32'h7FC00000 : {io_in_raw_out_sign, io_in_special_case_bits_inf ? 31'h7F800000 : 31'h0}) : {io_in_raw_out_sign, common_of ? {7'h7F, ~rmin} : {7'h0, _rounder_io_cout} + io_in_raw_out_exp[7:0], common_of ? {23{rmin}} : _rounder_io_out};	// @[Cat.scala:33:92, FMUL.scala:184:14, :199:37, :206:5, :212:19, :216:23, :221:23, :223:8, :232:27, :234:8, :244:19, RoundingUnit.scala:46:25, :58:41]
  assign io_fflags = io_in_special_case_valid ? {io_in_special_case_bits_inv, 4'h0} : {2'h0, common_of, _tininess_rounder_io_tininess & common_ix, common_ix};	// @[Cat.scala:33:92, FMUL.scala:187:32, :206:5, :207:38, :208:28, :245:19]
  assign io_to_fadd_fp_prod_sign = io_in_raw_out_sign;
  assign io_to_fadd_fp_prod_exp = io_in_special_case_bits_hasZero ? 8'h0 : io_in_raw_out_exp[7:0];	// @[FMUL.scala:248:32]
  assign io_to_fadd_fp_prod_sig = io_in_special_case_bits_hasZero ? 47'h0 : io_in_raw_out_sig[72:26] | {46'h0, |(io_in_raw_out_sig[25:0])};	// @[FMUL.scala:249:32, :251:{21,29,49,67,86}]
  assign io_to_fadd_inter_flags_isNaN = io_in_special_case_bits_nan;
  assign io_to_fadd_inter_flags_isInf = io_in_special_case_bits_inf & ~io_in_special_case_bits_nan;	// @[FMUL.scala:254:{57,60}]
  assign io_to_fadd_inter_flags_isInv = io_in_special_case_bits_inv;
  assign io_to_fadd_inter_flags_overflow = io_in_raw_out_exp[8];	// @[FMUL.scala:256:52]
endmodule

