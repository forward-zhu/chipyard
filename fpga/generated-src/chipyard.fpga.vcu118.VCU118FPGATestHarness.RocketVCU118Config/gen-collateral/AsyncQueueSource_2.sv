// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module AsyncQueueSource_2(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [31:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_burst,
  input         io_enq_bits_lock,
  input  [3:0]  io_enq_bits_cache,
  input  [2:0]  io_enq_bits_prot,
  input  [3:0]  io_enq_bits_qos,
                io_async_ridx,
  input         io_async_safe_ridx_valid,
                io_async_safe_sink_reset_n,
  output        io_enq_ready,
  output [3:0]  io_async_mem_0_id,
  output [31:0] io_async_mem_0_addr,
  output [7:0]  io_async_mem_0_len,
  output [2:0]  io_async_mem_0_size,
  output [1:0]  io_async_mem_0_burst,
  output        io_async_mem_0_lock,
  output [3:0]  io_async_mem_0_cache,
  output [2:0]  io_async_mem_0_prot,
  output [3:0]  io_async_mem_0_qos,
                io_async_mem_1_id,
  output [31:0] io_async_mem_1_addr,
  output [7:0]  io_async_mem_1_len,
  output [2:0]  io_async_mem_1_size,
  output [1:0]  io_async_mem_1_burst,
  output        io_async_mem_1_lock,
  output [3:0]  io_async_mem_1_cache,
  output [2:0]  io_async_mem_1_prot,
  output [3:0]  io_async_mem_1_qos,
                io_async_mem_2_id,
  output [31:0] io_async_mem_2_addr,
  output [7:0]  io_async_mem_2_len,
  output [2:0]  io_async_mem_2_size,
  output [1:0]  io_async_mem_2_burst,
  output        io_async_mem_2_lock,
  output [3:0]  io_async_mem_2_cache,
  output [2:0]  io_async_mem_2_prot,
  output [3:0]  io_async_mem_2_qos,
                io_async_mem_3_id,
  output [31:0] io_async_mem_3_addr,
  output [7:0]  io_async_mem_3_len,
  output [2:0]  io_async_mem_3_size,
  output [1:0]  io_async_mem_3_burst,
  output        io_async_mem_3_lock,
  output [3:0]  io_async_mem_3_cache,
  output [2:0]  io_async_mem_3_prot,
  output [3:0]  io_async_mem_3_qos,
                io_async_mem_4_id,
  output [31:0] io_async_mem_4_addr,
  output [7:0]  io_async_mem_4_len,
  output [2:0]  io_async_mem_4_size,
  output [1:0]  io_async_mem_4_burst,
  output        io_async_mem_4_lock,
  output [3:0]  io_async_mem_4_cache,
  output [2:0]  io_async_mem_4_prot,
  output [3:0]  io_async_mem_4_qos,
                io_async_mem_5_id,
  output [31:0] io_async_mem_5_addr,
  output [7:0]  io_async_mem_5_len,
  output [2:0]  io_async_mem_5_size,
  output [1:0]  io_async_mem_5_burst,
  output        io_async_mem_5_lock,
  output [3:0]  io_async_mem_5_cache,
  output [2:0]  io_async_mem_5_prot,
  output [3:0]  io_async_mem_5_qos,
                io_async_mem_6_id,
  output [31:0] io_async_mem_6_addr,
  output [7:0]  io_async_mem_6_len,
  output [2:0]  io_async_mem_6_size,
  output [1:0]  io_async_mem_6_burst,
  output        io_async_mem_6_lock,
  output [3:0]  io_async_mem_6_cache,
  output [2:0]  io_async_mem_6_prot,
  output [3:0]  io_async_mem_6_qos,
                io_async_mem_7_id,
  output [31:0] io_async_mem_7_addr,
  output [7:0]  io_async_mem_7_len,
  output [2:0]  io_async_mem_7_size,
  output [1:0]  io_async_mem_7_burst,
  output        io_async_mem_7_lock,
  output [3:0]  io_async_mem_7_cache,
  output [2:0]  io_async_mem_7_prot,
  output [3:0]  io_async_mem_7_qos,
                io_async_widx,
  output        io_async_safe_widx_valid,
                io_async_safe_source_reset_n
);

  wire        _io_enq_ready_output;	// @[AsyncQueue.scala:89:29]
  wire        _sink_valid_io_out;	// @[AsyncQueue.scala:104:30]
  wire        _sink_extend_io_out;	// @[AsyncQueue.scala:103:30]
  wire        _source_valid_0_io_out;	// @[AsyncQueue.scala:100:32]
  wire [3:0]  _ridx_ridx_gray_io_q;	// @[ShiftReg.scala:45:23]
  reg  [3:0]  mem_0_id;	// @[AsyncQueue.scala:80:16]
  reg  [31:0] mem_0_addr;	// @[AsyncQueue.scala:80:16]
  reg  [7:0]  mem_0_len;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_0_size;	// @[AsyncQueue.scala:80:16]
  reg  [1:0]  mem_0_burst;	// @[AsyncQueue.scala:80:16]
  reg         mem_0_lock;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_0_cache;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_0_prot;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_0_qos;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_1_id;	// @[AsyncQueue.scala:80:16]
  reg  [31:0] mem_1_addr;	// @[AsyncQueue.scala:80:16]
  reg  [7:0]  mem_1_len;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_1_size;	// @[AsyncQueue.scala:80:16]
  reg  [1:0]  mem_1_burst;	// @[AsyncQueue.scala:80:16]
  reg         mem_1_lock;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_1_cache;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_1_prot;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_1_qos;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_2_id;	// @[AsyncQueue.scala:80:16]
  reg  [31:0] mem_2_addr;	// @[AsyncQueue.scala:80:16]
  reg  [7:0]  mem_2_len;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_2_size;	// @[AsyncQueue.scala:80:16]
  reg  [1:0]  mem_2_burst;	// @[AsyncQueue.scala:80:16]
  reg         mem_2_lock;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_2_cache;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_2_prot;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_2_qos;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_3_id;	// @[AsyncQueue.scala:80:16]
  reg  [31:0] mem_3_addr;	// @[AsyncQueue.scala:80:16]
  reg  [7:0]  mem_3_len;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_3_size;	// @[AsyncQueue.scala:80:16]
  reg  [1:0]  mem_3_burst;	// @[AsyncQueue.scala:80:16]
  reg         mem_3_lock;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_3_cache;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_3_prot;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_3_qos;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_4_id;	// @[AsyncQueue.scala:80:16]
  reg  [31:0] mem_4_addr;	// @[AsyncQueue.scala:80:16]
  reg  [7:0]  mem_4_len;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_4_size;	// @[AsyncQueue.scala:80:16]
  reg  [1:0]  mem_4_burst;	// @[AsyncQueue.scala:80:16]
  reg         mem_4_lock;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_4_cache;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_4_prot;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_4_qos;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_5_id;	// @[AsyncQueue.scala:80:16]
  reg  [31:0] mem_5_addr;	// @[AsyncQueue.scala:80:16]
  reg  [7:0]  mem_5_len;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_5_size;	// @[AsyncQueue.scala:80:16]
  reg  [1:0]  mem_5_burst;	// @[AsyncQueue.scala:80:16]
  reg         mem_5_lock;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_5_cache;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_5_prot;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_5_qos;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_6_id;	// @[AsyncQueue.scala:80:16]
  reg  [31:0] mem_6_addr;	// @[AsyncQueue.scala:80:16]
  reg  [7:0]  mem_6_len;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_6_size;	// @[AsyncQueue.scala:80:16]
  reg  [1:0]  mem_6_burst;	// @[AsyncQueue.scala:80:16]
  reg         mem_6_lock;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_6_cache;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_6_prot;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_6_qos;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_7_id;	// @[AsyncQueue.scala:80:16]
  reg  [31:0] mem_7_addr;	// @[AsyncQueue.scala:80:16]
  reg  [7:0]  mem_7_len;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_7_size;	// @[AsyncQueue.scala:80:16]
  reg  [1:0]  mem_7_burst;	// @[AsyncQueue.scala:80:16]
  reg         mem_7_lock;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_7_cache;	// @[AsyncQueue.scala:80:16]
  reg  [2:0]  mem_7_prot;	// @[AsyncQueue.scala:80:16]
  reg  [3:0]  mem_7_qos;	// @[AsyncQueue.scala:80:16]
  wire        _T = _io_enq_ready_output & io_enq_valid;	// @[AsyncQueue.scala:89:29, Decoupled.scala:51:35]
  reg  [3:0]  widx_widx_bin;	// @[AsyncQueue.scala:52:25]
  reg         ready_reg;	// @[AsyncQueue.scala:88:56]
  assign _io_enq_ready_output = ready_reg & _sink_valid_io_out;	// @[AsyncQueue.scala:88:56, :89:29, :104:30]
  reg  [3:0]  widx_gray;	// @[AsyncQueue.scala:91:55]
  wire [2:0]  index = widx_gray[2:0] ^ {widx_gray[3], 2'h0};	// @[AsyncQueue.scala:85:{52,64,80,93}, :91:55]
  always @(posedge clock) begin
    if (_T & index == 3'h0) begin	// @[AsyncQueue.scala:52:25, :80:16, :85:64, :86:{24,37}, Decoupled.scala:51:35]
      mem_0_id <= io_enq_bits_id;	// @[AsyncQueue.scala:80:16]
      mem_0_addr <= io_enq_bits_addr;	// @[AsyncQueue.scala:80:16]
      mem_0_len <= io_enq_bits_len;	// @[AsyncQueue.scala:80:16]
      mem_0_size <= io_enq_bits_size;	// @[AsyncQueue.scala:80:16]
      mem_0_burst <= io_enq_bits_burst;	// @[AsyncQueue.scala:80:16]
      mem_0_lock <= io_enq_bits_lock;	// @[AsyncQueue.scala:80:16]
      mem_0_cache <= io_enq_bits_cache;	// @[AsyncQueue.scala:80:16]
      mem_0_prot <= io_enq_bits_prot;	// @[AsyncQueue.scala:80:16]
      mem_0_qos <= io_enq_bits_qos;	// @[AsyncQueue.scala:80:16]
    end
    if (_T & index == 3'h1) begin	// @[AsyncQueue.scala:80:16, :85:64, :86:{24,37}, Decoupled.scala:51:35]
      mem_1_id <= io_enq_bits_id;	// @[AsyncQueue.scala:80:16]
      mem_1_addr <= io_enq_bits_addr;	// @[AsyncQueue.scala:80:16]
      mem_1_len <= io_enq_bits_len;	// @[AsyncQueue.scala:80:16]
      mem_1_size <= io_enq_bits_size;	// @[AsyncQueue.scala:80:16]
      mem_1_burst <= io_enq_bits_burst;	// @[AsyncQueue.scala:80:16]
      mem_1_lock <= io_enq_bits_lock;	// @[AsyncQueue.scala:80:16]
      mem_1_cache <= io_enq_bits_cache;	// @[AsyncQueue.scala:80:16]
      mem_1_prot <= io_enq_bits_prot;	// @[AsyncQueue.scala:80:16]
      mem_1_qos <= io_enq_bits_qos;	// @[AsyncQueue.scala:80:16]
    end
    if (_T & index == 3'h2) begin	// @[AsyncQueue.scala:80:16, :85:64, :86:{24,37}, Decoupled.scala:51:35]
      mem_2_id <= io_enq_bits_id;	// @[AsyncQueue.scala:80:16]
      mem_2_addr <= io_enq_bits_addr;	// @[AsyncQueue.scala:80:16]
      mem_2_len <= io_enq_bits_len;	// @[AsyncQueue.scala:80:16]
      mem_2_size <= io_enq_bits_size;	// @[AsyncQueue.scala:80:16]
      mem_2_burst <= io_enq_bits_burst;	// @[AsyncQueue.scala:80:16]
      mem_2_lock <= io_enq_bits_lock;	// @[AsyncQueue.scala:80:16]
      mem_2_cache <= io_enq_bits_cache;	// @[AsyncQueue.scala:80:16]
      mem_2_prot <= io_enq_bits_prot;	// @[AsyncQueue.scala:80:16]
      mem_2_qos <= io_enq_bits_qos;	// @[AsyncQueue.scala:80:16]
    end
    if (_T & index == 3'h3) begin	// @[AsyncQueue.scala:80:16, :85:64, :86:{24,37}, Decoupled.scala:51:35]
      mem_3_id <= io_enq_bits_id;	// @[AsyncQueue.scala:80:16]
      mem_3_addr <= io_enq_bits_addr;	// @[AsyncQueue.scala:80:16]
      mem_3_len <= io_enq_bits_len;	// @[AsyncQueue.scala:80:16]
      mem_3_size <= io_enq_bits_size;	// @[AsyncQueue.scala:80:16]
      mem_3_burst <= io_enq_bits_burst;	// @[AsyncQueue.scala:80:16]
      mem_3_lock <= io_enq_bits_lock;	// @[AsyncQueue.scala:80:16]
      mem_3_cache <= io_enq_bits_cache;	// @[AsyncQueue.scala:80:16]
      mem_3_prot <= io_enq_bits_prot;	// @[AsyncQueue.scala:80:16]
      mem_3_qos <= io_enq_bits_qos;	// @[AsyncQueue.scala:80:16]
    end
    if (_T & index == 3'h4) begin	// @[AsyncQueue.scala:80:16, :85:64, :86:{24,37}, Decoupled.scala:51:35]
      mem_4_id <= io_enq_bits_id;	// @[AsyncQueue.scala:80:16]
      mem_4_addr <= io_enq_bits_addr;	// @[AsyncQueue.scala:80:16]
      mem_4_len <= io_enq_bits_len;	// @[AsyncQueue.scala:80:16]
      mem_4_size <= io_enq_bits_size;	// @[AsyncQueue.scala:80:16]
      mem_4_burst <= io_enq_bits_burst;	// @[AsyncQueue.scala:80:16]
      mem_4_lock <= io_enq_bits_lock;	// @[AsyncQueue.scala:80:16]
      mem_4_cache <= io_enq_bits_cache;	// @[AsyncQueue.scala:80:16]
      mem_4_prot <= io_enq_bits_prot;	// @[AsyncQueue.scala:80:16]
      mem_4_qos <= io_enq_bits_qos;	// @[AsyncQueue.scala:80:16]
    end
    if (_T & index == 3'h5) begin	// @[AsyncQueue.scala:80:16, :85:64, :86:{24,37}, Decoupled.scala:51:35]
      mem_5_id <= io_enq_bits_id;	// @[AsyncQueue.scala:80:16]
      mem_5_addr <= io_enq_bits_addr;	// @[AsyncQueue.scala:80:16]
      mem_5_len <= io_enq_bits_len;	// @[AsyncQueue.scala:80:16]
      mem_5_size <= io_enq_bits_size;	// @[AsyncQueue.scala:80:16]
      mem_5_burst <= io_enq_bits_burst;	// @[AsyncQueue.scala:80:16]
      mem_5_lock <= io_enq_bits_lock;	// @[AsyncQueue.scala:80:16]
      mem_5_cache <= io_enq_bits_cache;	// @[AsyncQueue.scala:80:16]
      mem_5_prot <= io_enq_bits_prot;	// @[AsyncQueue.scala:80:16]
      mem_5_qos <= io_enq_bits_qos;	// @[AsyncQueue.scala:80:16]
    end
    if (_T & index == 3'h6) begin	// @[AsyncQueue.scala:80:16, :85:64, :86:{24,37}, Decoupled.scala:51:35]
      mem_6_id <= io_enq_bits_id;	// @[AsyncQueue.scala:80:16]
      mem_6_addr <= io_enq_bits_addr;	// @[AsyncQueue.scala:80:16]
      mem_6_len <= io_enq_bits_len;	// @[AsyncQueue.scala:80:16]
      mem_6_size <= io_enq_bits_size;	// @[AsyncQueue.scala:80:16]
      mem_6_burst <= io_enq_bits_burst;	// @[AsyncQueue.scala:80:16]
      mem_6_lock <= io_enq_bits_lock;	// @[AsyncQueue.scala:80:16]
      mem_6_cache <= io_enq_bits_cache;	// @[AsyncQueue.scala:80:16]
      mem_6_prot <= io_enq_bits_prot;	// @[AsyncQueue.scala:80:16]
      mem_6_qos <= io_enq_bits_qos;	// @[AsyncQueue.scala:80:16]
    end
    if (_T & (&index)) begin	// @[AsyncQueue.scala:80:16, :85:64, :86:{24,37}, Decoupled.scala:51:35]
      mem_7_id <= io_enq_bits_id;	// @[AsyncQueue.scala:80:16]
      mem_7_addr <= io_enq_bits_addr;	// @[AsyncQueue.scala:80:16]
      mem_7_len <= io_enq_bits_len;	// @[AsyncQueue.scala:80:16]
      mem_7_size <= io_enq_bits_size;	// @[AsyncQueue.scala:80:16]
      mem_7_burst <= io_enq_bits_burst;	// @[AsyncQueue.scala:80:16]
      mem_7_lock <= io_enq_bits_lock;	// @[AsyncQueue.scala:80:16]
      mem_7_cache <= io_enq_bits_cache;	// @[AsyncQueue.scala:80:16]
      mem_7_prot <= io_enq_bits_prot;	// @[AsyncQueue.scala:80:16]
      mem_7_qos <= io_enq_bits_qos;	// @[AsyncQueue.scala:80:16]
    end
  end // always @(posedge)
  wire [3:0]  _widx_incremented_T_1 = widx_widx_bin + {3'h0, _T};	// @[AsyncQueue.scala:52:25, :53:43, Decoupled.scala:51:35]
  wire [3:0]  widx_incremented = _sink_valid_io_out ? _widx_incremented_T_1 : 4'h0;	// @[AsyncQueue.scala:53:{23,43}, :104:30]
  wire [3:0]  widx = widx_incremented ^ {1'h0, widx_incremented[3:1]};	// @[AsyncQueue.scala:53:23, :54:{17,32}, :80:16]
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_widx_bin <= 4'h0;	// @[AsyncQueue.scala:52:25, :53:23]
      ready_reg <= 1'h0;	// @[AsyncQueue.scala:80:16, :88:56]
      widx_gray <= 4'h0;	// @[AsyncQueue.scala:53:23, :91:55]
    end
    else begin
      if (_sink_valid_io_out)	// @[AsyncQueue.scala:104:30]
        widx_widx_bin <= _widx_incremented_T_1;	// @[AsyncQueue.scala:52:25, :53:43]
      else	// @[AsyncQueue.scala:104:30]
        widx_widx_bin <= 4'h0;	// @[AsyncQueue.scala:52:25, :53:23]
      ready_reg <= _sink_valid_io_out & widx != (_ridx_ridx_gray_io_q ^ 4'hC);	// @[AsyncQueue.scala:54:17, :83:{26,34,44}, :88:56, :104:30, ShiftReg.scala:45:23]
      widx_gray <= widx;	// @[AsyncQueue.scala:54:17, :91:55]
    end
  end // always @(posedge, posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        mem_0_id = _RANDOM_0[3:0];	// @[AsyncQueue.scala:80:16]
        mem_0_addr = {_RANDOM_0[31:4], _RANDOM_1[3:0]};	// @[AsyncQueue.scala:80:16]
        mem_0_len = _RANDOM_1[11:4];	// @[AsyncQueue.scala:80:16]
        mem_0_size = _RANDOM_1[14:12];	// @[AsyncQueue.scala:80:16]
        mem_0_burst = _RANDOM_1[16:15];	// @[AsyncQueue.scala:80:16]
        mem_0_lock = _RANDOM_1[17];	// @[AsyncQueue.scala:80:16]
        mem_0_cache = _RANDOM_1[21:18];	// @[AsyncQueue.scala:80:16]
        mem_0_prot = _RANDOM_1[24:22];	// @[AsyncQueue.scala:80:16]
        mem_0_qos = _RANDOM_1[28:25];	// @[AsyncQueue.scala:80:16]
        mem_1_id = {_RANDOM_1[31:29], _RANDOM_2[0]};	// @[AsyncQueue.scala:80:16]
        mem_1_addr = {_RANDOM_2[31:1], _RANDOM_3[0]};	// @[AsyncQueue.scala:80:16]
        mem_1_len = _RANDOM_3[8:1];	// @[AsyncQueue.scala:80:16]
        mem_1_size = _RANDOM_3[11:9];	// @[AsyncQueue.scala:80:16]
        mem_1_burst = _RANDOM_3[13:12];	// @[AsyncQueue.scala:80:16]
        mem_1_lock = _RANDOM_3[14];	// @[AsyncQueue.scala:80:16]
        mem_1_cache = _RANDOM_3[18:15];	// @[AsyncQueue.scala:80:16]
        mem_1_prot = _RANDOM_3[21:19];	// @[AsyncQueue.scala:80:16]
        mem_1_qos = _RANDOM_3[25:22];	// @[AsyncQueue.scala:80:16]
        mem_2_id = _RANDOM_3[29:26];	// @[AsyncQueue.scala:80:16]
        mem_2_addr = {_RANDOM_3[31:30], _RANDOM_4[29:0]};	// @[AsyncQueue.scala:80:16]
        mem_2_len = {_RANDOM_4[31:30], _RANDOM_5[5:0]};	// @[AsyncQueue.scala:80:16]
        mem_2_size = _RANDOM_5[8:6];	// @[AsyncQueue.scala:80:16]
        mem_2_burst = _RANDOM_5[10:9];	// @[AsyncQueue.scala:80:16]
        mem_2_lock = _RANDOM_5[11];	// @[AsyncQueue.scala:80:16]
        mem_2_cache = _RANDOM_5[15:12];	// @[AsyncQueue.scala:80:16]
        mem_2_prot = _RANDOM_5[18:16];	// @[AsyncQueue.scala:80:16]
        mem_2_qos = _RANDOM_5[22:19];	// @[AsyncQueue.scala:80:16]
        mem_3_id = _RANDOM_5[26:23];	// @[AsyncQueue.scala:80:16]
        mem_3_addr = {_RANDOM_5[31:27], _RANDOM_6[26:0]};	// @[AsyncQueue.scala:80:16]
        mem_3_len = {_RANDOM_6[31:27], _RANDOM_7[2:0]};	// @[AsyncQueue.scala:80:16]
        mem_3_size = _RANDOM_7[5:3];	// @[AsyncQueue.scala:80:16]
        mem_3_burst = _RANDOM_7[7:6];	// @[AsyncQueue.scala:80:16]
        mem_3_lock = _RANDOM_7[8];	// @[AsyncQueue.scala:80:16]
        mem_3_cache = _RANDOM_7[12:9];	// @[AsyncQueue.scala:80:16]
        mem_3_prot = _RANDOM_7[15:13];	// @[AsyncQueue.scala:80:16]
        mem_3_qos = _RANDOM_7[19:16];	// @[AsyncQueue.scala:80:16]
        mem_4_id = _RANDOM_7[23:20];	// @[AsyncQueue.scala:80:16]
        mem_4_addr = {_RANDOM_7[31:24], _RANDOM_8[23:0]};	// @[AsyncQueue.scala:80:16]
        mem_4_len = _RANDOM_8[31:24];	// @[AsyncQueue.scala:80:16]
        mem_4_size = _RANDOM_9[2:0];	// @[AsyncQueue.scala:80:16]
        mem_4_burst = _RANDOM_9[4:3];	// @[AsyncQueue.scala:80:16]
        mem_4_lock = _RANDOM_9[5];	// @[AsyncQueue.scala:80:16]
        mem_4_cache = _RANDOM_9[9:6];	// @[AsyncQueue.scala:80:16]
        mem_4_prot = _RANDOM_9[12:10];	// @[AsyncQueue.scala:80:16]
        mem_4_qos = _RANDOM_9[16:13];	// @[AsyncQueue.scala:80:16]
        mem_5_id = _RANDOM_9[20:17];	// @[AsyncQueue.scala:80:16]
        mem_5_addr = {_RANDOM_9[31:21], _RANDOM_10[20:0]};	// @[AsyncQueue.scala:80:16]
        mem_5_len = _RANDOM_10[28:21];	// @[AsyncQueue.scala:80:16]
        mem_5_size = _RANDOM_10[31:29];	// @[AsyncQueue.scala:80:16]
        mem_5_burst = _RANDOM_11[1:0];	// @[AsyncQueue.scala:80:16]
        mem_5_lock = _RANDOM_11[2];	// @[AsyncQueue.scala:80:16]
        mem_5_cache = _RANDOM_11[6:3];	// @[AsyncQueue.scala:80:16]
        mem_5_prot = _RANDOM_11[9:7];	// @[AsyncQueue.scala:80:16]
        mem_5_qos = _RANDOM_11[13:10];	// @[AsyncQueue.scala:80:16]
        mem_6_id = _RANDOM_11[17:14];	// @[AsyncQueue.scala:80:16]
        mem_6_addr = {_RANDOM_11[31:18], _RANDOM_12[17:0]};	// @[AsyncQueue.scala:80:16]
        mem_6_len = _RANDOM_12[25:18];	// @[AsyncQueue.scala:80:16]
        mem_6_size = _RANDOM_12[28:26];	// @[AsyncQueue.scala:80:16]
        mem_6_burst = _RANDOM_12[30:29];	// @[AsyncQueue.scala:80:16]
        mem_6_lock = _RANDOM_12[31];	// @[AsyncQueue.scala:80:16]
        mem_6_cache = _RANDOM_13[3:0];	// @[AsyncQueue.scala:80:16]
        mem_6_prot = _RANDOM_13[6:4];	// @[AsyncQueue.scala:80:16]
        mem_6_qos = _RANDOM_13[10:7];	// @[AsyncQueue.scala:80:16]
        mem_7_id = _RANDOM_13[14:11];	// @[AsyncQueue.scala:80:16]
        mem_7_addr = {_RANDOM_13[31:15], _RANDOM_14[14:0]};	// @[AsyncQueue.scala:80:16]
        mem_7_len = _RANDOM_14[22:15];	// @[AsyncQueue.scala:80:16]
        mem_7_size = _RANDOM_14[25:23];	// @[AsyncQueue.scala:80:16]
        mem_7_burst = _RANDOM_14[27:26];	// @[AsyncQueue.scala:80:16]
        mem_7_lock = _RANDOM_14[28];	// @[AsyncQueue.scala:80:16]
        mem_7_cache = {_RANDOM_14[31:29], _RANDOM_15[0]};	// @[AsyncQueue.scala:80:16]
        mem_7_prot = _RANDOM_15[3:1];	// @[AsyncQueue.scala:80:16]
        mem_7_qos = _RANDOM_15[7:4];	// @[AsyncQueue.scala:80:16]
        widx_widx_bin = _RANDOM_15[11:8];	// @[AsyncQueue.scala:52:25, :80:16]
        ready_reg = _RANDOM_15[12];	// @[AsyncQueue.scala:80:16, :88:56]
        widx_gray = _RANDOM_15[16:13];	// @[AsyncQueue.scala:80:16, :91:55]
      `endif // RANDOMIZE_REG_INIT
      `ifdef RANDOMIZE
        if (reset) begin
          widx_widx_bin = 4'h0;	// @[AsyncQueue.scala:52:25, :53:23]
          ready_reg = 1'h0;	// @[AsyncQueue.scala:80:16, :88:56]
          widx_gray = 4'h0;	// @[AsyncQueue.scala:53:23, :91:55]
        end
      `endif // RANDOMIZE
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  AsyncResetSynchronizerShiftReg_w4_d3_i0 ridx_ridx_gray (	// @[ShiftReg.scala:45:23]
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_ridx),
    .io_q  (_ridx_ridx_gray_io_q)
  );
  AsyncValidSync source_valid_0 (	// @[AsyncQueue.scala:100:32]
    .io_in  (1'h1),	// @[AsyncQueue.scala:79:28]
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),	// @[AsyncQueue.scala:105:{43,46}]
    .io_out (_source_valid_0_io_out)
  );
  AsyncValidSync source_valid_1 (	// @[AsyncQueue.scala:101:32]
    .io_in  (_source_valid_0_io_out),	// @[AsyncQueue.scala:100:32]
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),	// @[AsyncQueue.scala:105:46, :106:43]
    .io_out (io_async_safe_widx_valid)
  );
  AsyncValidSync sink_extend (	// @[AsyncQueue.scala:103:30]
    .io_in  (io_async_safe_ridx_valid),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),	// @[AsyncQueue.scala:105:46, :107:43]
    .io_out (_sink_extend_io_out)
  );
  AsyncValidSync sink_valid (	// @[AsyncQueue.scala:104:30]
    .io_in  (_sink_extend_io_out),	// @[AsyncQueue.scala:103:30]
    .clock  (clock),
    .reset  (reset),
    .io_out (_sink_valid_io_out)
  );
  assign io_enq_ready = _io_enq_ready_output;	// @[AsyncQueue.scala:89:29]
  assign io_async_mem_0_id = mem_0_id;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_0_addr = mem_0_addr;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_0_len = mem_0_len;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_0_size = mem_0_size;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_0_burst = mem_0_burst;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_0_lock = mem_0_lock;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_0_cache = mem_0_cache;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_0_prot = mem_0_prot;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_0_qos = mem_0_qos;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_1_id = mem_1_id;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_1_addr = mem_1_addr;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_1_len = mem_1_len;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_1_size = mem_1_size;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_1_burst = mem_1_burst;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_1_lock = mem_1_lock;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_1_cache = mem_1_cache;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_1_prot = mem_1_prot;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_1_qos = mem_1_qos;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_2_id = mem_2_id;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_2_addr = mem_2_addr;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_2_len = mem_2_len;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_2_size = mem_2_size;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_2_burst = mem_2_burst;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_2_lock = mem_2_lock;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_2_cache = mem_2_cache;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_2_prot = mem_2_prot;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_2_qos = mem_2_qos;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_3_id = mem_3_id;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_3_addr = mem_3_addr;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_3_len = mem_3_len;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_3_size = mem_3_size;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_3_burst = mem_3_burst;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_3_lock = mem_3_lock;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_3_cache = mem_3_cache;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_3_prot = mem_3_prot;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_3_qos = mem_3_qos;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_4_id = mem_4_id;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_4_addr = mem_4_addr;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_4_len = mem_4_len;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_4_size = mem_4_size;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_4_burst = mem_4_burst;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_4_lock = mem_4_lock;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_4_cache = mem_4_cache;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_4_prot = mem_4_prot;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_4_qos = mem_4_qos;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_5_id = mem_5_id;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_5_addr = mem_5_addr;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_5_len = mem_5_len;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_5_size = mem_5_size;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_5_burst = mem_5_burst;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_5_lock = mem_5_lock;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_5_cache = mem_5_cache;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_5_prot = mem_5_prot;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_5_qos = mem_5_qos;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_6_id = mem_6_id;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_6_addr = mem_6_addr;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_6_len = mem_6_len;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_6_size = mem_6_size;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_6_burst = mem_6_burst;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_6_lock = mem_6_lock;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_6_cache = mem_6_cache;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_6_prot = mem_6_prot;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_6_qos = mem_6_qos;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_7_id = mem_7_id;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_7_addr = mem_7_addr;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_7_len = mem_7_len;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_7_size = mem_7_size;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_7_burst = mem_7_burst;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_7_lock = mem_7_lock;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_7_cache = mem_7_cache;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_7_prot = mem_7_prot;	// @[AsyncQueue.scala:80:16]
  assign io_async_mem_7_qos = mem_7_qos;	// @[AsyncQueue.scala:80:16]
  assign io_async_widx = widx_gray;	// @[AsyncQueue.scala:91:55]
  assign io_async_safe_source_reset_n = ~reset;	// @[AsyncQueue.scala:121:27]
endmodule

