// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VIllegalInstrn(
  input        clock,
  input  [4:0] io_ctrl_lsrc_0,
               io_ctrl_lsrc_1,
               io_ctrl_ldest,
  input        io_ctrl_vm,
  input  [5:0] io_ctrl_funct6,
  input  [2:0] io_ctrl_funct3,
  input        io_ctrl_illegal,
               io_ctrl_lsrcVal_0,
               io_ctrl_lsrcVal_1,
               io_ctrl_lsrcVal_2,
               io_ctrl_ldestVal,
               io_ctrl_rdVal,
               io_ctrl_load,
               io_ctrl_store,
               io_ctrl_arith,
               io_ctrl_alu,
               io_ctrl_fp,
               io_ctrl_redu,
               io_ctrl_mask,
               io_ctrl_perm,
               io_ctrl_widen,
               io_ctrl_widen2,
               io_ctrl_narrow,
               io_ctrl_narrow_to_1,
  input  [7:0] io_csr_vstart,
  input  [2:0] io_csr_frm,
               io_csr_vlmul,
               io_csr_vsew,
  input        io_csr_vill,
  input  [2:0] io_infoAll_veewVs1,
               io_infoAll_veewVs2,
               io_infoAll_veewVd,
               io_infoAll_vemulVs1,
               io_infoAll_vemulVs2,
               io_infoAll_vemulVd,
  input  [3:0] io_infoAll_emulVs1,
               io_infoAll_emulVs2,
               io_infoAll_emulVd,
  input        io_validIn,
               io_extraInfo_for_VIllegal_ldst,
               io_extraInfo_for_VIllegal_ldstCtrl_mask,
               io_extraInfo_for_VIllegal_ldstCtrl_indexed,
               io_extraInfo_for_VIllegal_ldstCtrl_segment,
               io_extraInfo_for_VIllegal_ldstCtrl_wholeReg,
  input  [3:0] io_extraInfo_for_VIllegal_vemul_ldst,
  input        io_extraInfo_for_VIllegal_ext2,
               io_extraInfo_for_VIllegal_ext4,
               io_extraInfo_for_VIllegal_ext8,
               io_extraInfo_for_VIllegal_wholeRegMv,
  input  [3:0] io_extraInfo_for_VIllegal_nreg,
  output       io_ill_valid
);

  reg        io_ill_valid_REG;	// @[VIllegalInstrn.scala:192:26]
  reg        io_ill_valid_REG_1;	// @[VIllegalInstrn.scala:192:81]
  wire       _ill_widenNarrow_lmul_T_1 = io_ctrl_widen | io_ctrl_narrow;	// @[VIllegalInstrn.scala:54:59]
  wire       _ill_gatherE16_T_3 = io_csr_vlmul == 3'h3;	// @[VIllegalInstrn.scala:54:35, :55:37]
  wire       _vrgather_T_2 = io_ctrl_funct3 == 3'h0;	// @[VIllegalInstrn.scala:55:124]
  wire       _isFp_T = io_ctrl_funct3 == 3'h1;	// @[VIllegalInstrn.scala:55:152]
  wire       _vrgather_T_1 = io_ctrl_funct6 == 6'hE;	// @[VIllegalInstrn.scala:60:59]
  wire       _ill_sewFP_T = io_csr_vsew == 3'h0;	// @[VIllegalInstrn.scala:55:124, :60:100]
  wire [3:0] nfield = {1'h0, io_ctrl_funct6[5:3]} + 4'h1;	// @[VIllegalInstrn.scala:54:35, :67:{27,34}]
  wire [7:0] emul_x_nfield = {4'h0, io_extraInfo_for_VIllegal_ldstCtrl_indexed ? {~(io_csr_vlmul[2]) & io_csr_vlmul[1] & io_csr_vlmul[0], ~(io_csr_vlmul[2]) & io_csr_vlmul[1] & ~(io_csr_vlmul[0]), ~(io_csr_vlmul[2]) & ~(io_csr_vlmul[1]) & io_csr_vlmul[0], ~(io_csr_vlmul[1]) & ~(io_csr_vlmul[0]) | io_csr_vlmul[2]} : {~(io_extraInfo_for_VIllegal_vemul_ldst[2]) & io_extraInfo_for_VIllegal_vemul_ldst[1] & io_extraInfo_for_VIllegal_vemul_ldst[0], ~(io_extraInfo_for_VIllegal_vemul_ldst[2]) & io_extraInfo_for_VIllegal_vemul_ldst[1] & ~(io_extraInfo_for_VIllegal_vemul_ldst[0]), ~(io_extraInfo_for_VIllegal_vemul_ldst[2]) & ~(io_extraInfo_for_VIllegal_vemul_ldst[1]) & io_extraInfo_for_VIllegal_vemul_ldst[0], ~(io_extraInfo_for_VIllegal_vemul_ldst[1]) & ~(io_extraInfo_for_VIllegal_vemul_ldst[0]) | io_extraInfo_for_VIllegal_vemul_ldst[2]}} * {4'h0, nfield};	// @[Cat.scala:33:92, VIllegalInstrn.scala:67:34, :73:43, :74:22, :75:33, VecUtil.scala:26:{14,20,24,27,33,37,45}, :27:{14,27,37}, :28:{14,36,39}, :29:{14,36}]
  wire       _ill_seg_past31_T = io_extraInfo_for_VIllegal_ldst & io_extraInfo_for_VIllegal_ldstCtrl_segment;	// @[VIllegalInstrn.scala:76:22]
  wire [7:0] vdEnd_seg = {3'h0, io_ctrl_ldest} + emul_x_nfield - 8'h1;	// @[VIllegalInstrn.scala:55:124, :75:33, :78:{25,41}]
  wire       _ill_ext4_T = io_csr_vlmul == 3'h5;	// @[VIllegalInstrn.scala:69:62, :85:59]
  wire       isFp = io_ctrl_fp | _isFp_T | io_ctrl_funct3 == 3'h5 & ~(io_ctrl_load | io_ctrl_store);	// @[Bundle.scala:102:21, VIllegalInstrn.scala:55:152, :69:62, :98:{50,66,79,82}]
  wire       _vfwcvt_f_x_T = io_ctrl_funct6 == 6'h12;	// @[VIllegalInstrn.scala:99:44]
  wire       _viota_T_2 = io_ctrl_lsrc_0 == 5'h10;	// @[VIllegalInstrn.scala:99:76]
  wire       vrgather = io_ctrl_perm & (io_ctrl_funct6 == 6'hC | _vrgather_T_1 & _vrgather_T_2);	// @[VIllegalInstrn.scala:55:124, :60:59, :109:{28,44,60,91}]
  wire       _vmsxf_T = io_ctrl_funct6 == 6'h14;	// @[VIllegalInstrn.scala:110:43]
  wire       viota = io_ctrl_mask & _vmsxf_T & _viota_T_2;	// @[VIllegalInstrn.scala:99:76, :110:{43,59}]
  wire [5:0] _GEN = {1'h0, io_ctrl_ldest};	// @[VIllegalInstrn.scala:54:35, :135:35]
  wire [5:0] vdEnd = _GEN + {2'h0, io_infoAll_emulVd} - 6'h1;	// @[VIllegalInstrn.scala:55:152, :135:{35,45}]
  wire [5:0] _GEN_0 = {1'h0, io_ctrl_lsrc_0};	// @[VIllegalInstrn.scala:54:35, :136:41]
  wire [5:0] vs1End = _GEN_0 + {2'h0, io_infoAll_emulVs1} - 6'h1;	// @[VIllegalInstrn.scala:55:152, :136:{41,52}]
  wire [5:0] _GEN_1 = {1'h0, io_ctrl_lsrc_1};	// @[VIllegalInstrn.scala:54:35, :137:41]
  wire [5:0] vs2End = _GEN_1 + {2'h0, io_infoAll_emulVs2} - 6'h1;	// @[VIllegalInstrn.scala:55:152, :137:{41,52}]
  wire       _ill_segOverlap_T_3 = vs2End < _GEN;	// @[VIllegalInstrn.scala:135:35, :137:52, :143:13]
  wire       _ill_vd_vs2_T = io_ctrl_lsrc_1 == io_ctrl_ldest;	// @[VIllegalInstrn.scala:152:53]
  wire       _ill_vd_v0_T = io_ctrl_ldest == 5'h0;	// @[VIllegalInstrn.scala:164:29]
  always @(posedge clock) begin
    io_ill_valid_REG <=
      io_csr_vsew[2] | io_csr_vlmul == 3'h4 | io_csr_vsew == 3'h3 & (_ill_widenNarrow_lmul_T_1 | io_ctrl_widen2) | _ill_gatherE16_T_3 & (_ill_widenNarrow_lmul_T_1 | io_ctrl_widen2) & ~(io_ctrl_redu & (_vrgather_T_2 | _isFp_T)) | (|io_csr_vstart) & io_ctrl_arith | _vrgather_T_2 & _vrgather_T_1 & _ill_gatherE16_T_3 & _ill_sewFP_T | io_extraInfo_for_VIllegal_ldst & ($signed(io_extraInfo_for_VIllegal_vemul_ldst) > 4'sh3 | $signed(io_extraInfo_for_VIllegal_vemul_ldst) < -4'sh3) & ~io_extraInfo_for_VIllegal_ldstCtrl_mask & ~io_extraInfo_for_VIllegal_ldstCtrl_wholeReg | _ill_seg_past31_T & emul_x_nfield > 8'h8 | _ill_seg_past31_T & (|(vdEnd_seg[7:5])) | io_extraInfo_for_VIllegal_ldst & io_extraInfo_for_VIllegal_ldstCtrl_wholeReg & ~(nfield == 4'h1 | nfield == 4'h2 | nfield == 4'h4 | nfield == 4'h8) | io_extraInfo_for_VIllegal_ext2 & (_ill_ext4_T | _ill_sewFP_T) | io_extraInfo_for_VIllegal_ext4 & (_ill_ext4_T | io_csr_vlmul == 3'h6 | io_csr_vsew[2:1] == 2'h0) | io_extraInfo_for_VIllegal_ext8 & (io_csr_vlmul[2] | io_csr_vsew != 3'h3) | io_extraInfo_for_VIllegal_wholeRegMv & ~(io_extraInfo_for_VIllegal_nreg == 4'h1 | io_extraInfo_for_VIllegal_nreg == 4'h2 | io_extraInfo_for_VIllegal_nreg == 4'h4 | io_extraInfo_for_VIllegal_nreg == 4'h8) | io_csr_frm[2] & (|(io_csr_frm[1:0])) & isFp | _ill_sewFP_T & isFp | io_csr_vsew == 3'h1 & isFp & ~(io_ctrl_fp & _vfwcvt_f_x_T & _viota_T_2 | io_ctrl_fp & _vfwcvt_f_x_T & io_ctrl_lsrc_0 == 5'h11 | io_ctrl_fp & _vfwcvt_f_x_T & io_ctrl_lsrc_0 == 5'h16 | io_ctrl_fp & _vfwcvt_f_x_T & io_ctrl_lsrc_0 == 5'h17) & ~(io_ctrl_fp & _vfwcvt_f_x_T & io_ctrl_widen & (io_ctrl_lsrc_0 == 5'hA | io_ctrl_lsrc_0 == 5'hB)) | (io_infoAll_vemulVd == 3'h1 & io_ctrl_ldest[0] | io_infoAll_vemulVd == 3'h2 & (|(io_ctrl_ldest[1:0])) | io_infoAll_vemulVd == 3'h3 & (|(io_ctrl_ldest[2:0]))) & (io_ctrl_ldestVal | io_ctrl_lsrcVal_2) & ~io_ctrl_redu | (io_infoAll_vemulVs1 == 3'h1 & io_ctrl_lsrc_0[0] | io_infoAll_vemulVs1 == 3'h2 & (|(io_ctrl_lsrc_0[1:0])) | io_infoAll_vemulVs1 == 3'h3 & (|(io_ctrl_lsrc_0[2:0])))
      & io_ctrl_lsrcVal_0 & ~io_ctrl_redu | (io_infoAll_vemulVs2 == 3'h1 & io_ctrl_lsrc_1[0] | io_infoAll_vemulVs2 == 3'h2 & (|(io_ctrl_lsrc_1[1:0])) | io_infoAll_vemulVs2 == 3'h3 & (|(io_ctrl_lsrc_1[2:0]))) & io_ctrl_lsrcVal_1 | vs1End[5] & io_ctrl_lsrcVal_0 | vs2End[5] & io_ctrl_lsrcVal_1 | vdEnd[5] & io_ctrl_ldestVal | (~(vs1End < _GEN | vdEnd < _GEN_0) & io_ctrl_lsrcVal_0 & io_ctrl_ldestVal & (~(io_infoAll_veewVs1 == io_infoAll_veewVd | $signed(io_infoAll_veewVd) < $signed(io_infoAll_veewVs1) & io_ctrl_lsrc_0 == io_ctrl_ldest | $signed(io_infoAll_veewVd) > $signed(io_infoAll_veewVs1) & ~(io_infoAll_vemulVs1[2]) & vs1End == vdEnd) | vrgather | viota) | ~(_ill_segOverlap_T_3 | vdEnd < _GEN_1) & io_ctrl_lsrcVal_1 & io_ctrl_ldestVal & (~(io_infoAll_veewVs2 == io_infoAll_veewVd | $signed(io_infoAll_veewVd) < $signed(io_infoAll_veewVs2) & _ill_vd_vs2_T | $signed(io_infoAll_veewVd) > $signed(io_infoAll_veewVs2) & ~(io_infoAll_vemulVs2[2]) & vs2End == vdEnd) | vrgather | viota) | _ill_vd_v0_T & ~io_ctrl_vm & ~(io_ctrl_mask & ~(io_ctrl_funct6[3:2] == 2'h1 & io_ctrl_lsrc_0[4])) & ~(io_ctrl_alu & ((&(io_ctrl_funct6[5:4])) | io_ctrl_funct6 == 6'h11 | io_ctrl_funct6 == 6'h13)) & ~io_ctrl_narrow_to_1) & ~io_ctrl_redu | io_ctrl_load & io_extraInfo_for_VIllegal_ldstCtrl_segment & io_extraInfo_for_VIllegal_ldstCtrl_indexed & ~(_ill_segOverlap_T_3 | vdEnd_seg[5:0] < _GEN_1) & io_ctrl_lsrcVal_1 & io_ctrl_ldestVal | _ill_vd_vs2_T & (io_ctrl_funct6[5:2] == 4'h3 & io_ctrl_funct6[1:0] != 2'h3 | _vmsxf_T & ~(io_ctrl_lsrc_0[4]) | io_ctrl_funct6 == 6'h17 & io_ctrl_funct3[1:0] == 2'h2) | _ill_vd_v0_T & io_ctrl_ldestVal & ~io_ctrl_vm & ~(io_ctrl_redu | io_ctrl_mask & io_ctrl_rdVal | io_ctrl_funct6[5:3] == 3'h3 | io_ctrl_funct6[5:2] == 4'h4 & io_ctrl_funct6[0] & io_ctrl_funct3[0] == io_ctrl_funct3[1]) | io_ctrl_illegal | io_csr_vill;	// @[Bundle.scala:104:{19,23,33}, :105:{19,26}, VIllegalInstrn.scala:50:22, :52:25, :54:{35,44,59,74}, :55:{37,77,93,96,108,124,137,152}, :58:{31,39}, :60:{59,92,100}, :67:{27,34}, :69:{42,48,62}, :70:{22,37,40}, :75:33, :76:{22,42,59}, :78:41, :79:{49,62}, :81:{46,49,58,76,94,102,112}, :85:{49,59,67}, :86:{49,76,84,91,98}, :87:{49,62,70}, :92:{29,32,39,55,71,79,87}, :98:50, :99:{44,60,76}, :100:{60,76}, :101:{64,80}, :102:{64,80}, :107:73, :108:{34,49,65}, :109:28, :110:{43,59}, :112:{35,38,51,58,70,85}, :113:{27,42,48,75,91,106}, :115:67, :117:{24,38,45,53}, :119:{33,53,61,73,90}, :123:{11,19,30}, :124:{11,19,30,37,45}, :125:{11,19,30,37}, :127:{74,94,97}, :128:78, :129:59, :135:{35,45}, :136:{41,52}, :137:{41,52}, :139:{29,33,61,65,92,96}, :143:{5,13,18,27}, :148:24, :152:{31,47,53}, :156:{31,50,58,62,71}, :157:20, :160:90, :161:{26,106}, :162:90, :163:{26,106}, :164:{29,40,52,72,82,85}, :165:{62,83}, :168:{74,128}, :173:{35,42,56,70,77}, :174:{43,46}, :175:{31,47}, :176:{48,76}, :182:{67,70}, :183:29, :184:{37,50}, :185:{37,65,69}, :192:{26,55}, VecUtil.scala:26:45]
    io_ill_valid_REG_1 <= io_validIn;	// @[VIllegalInstrn.scala:192:81]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        io_ill_valid_REG = _RANDOM_0[0];	// @[VIllegalInstrn.scala:192:26]
        io_ill_valid_REG_1 = _RANDOM_0[1];	// @[VIllegalInstrn.scala:192:{26,81}]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_ill_valid = io_ill_valid_REG & io_ill_valid_REG_1;	// @[VIllegalInstrn.scala:192:{26,71,81}]
endmodule

