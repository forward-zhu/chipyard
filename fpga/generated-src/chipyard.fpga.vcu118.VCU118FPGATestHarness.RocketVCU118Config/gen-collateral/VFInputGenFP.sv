// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VFInputGenFP(
  input         clock,
                reset,
                io_in_valid,
  input  [4:0]  io_in_bits_uop_ctrl_lsrc_0,
                io_in_bits_uop_ctrl_lsrc_1,
                io_in_bits_uop_ctrl_ldest,
  input         io_in_bits_uop_ctrl_vm,
  input  [5:0]  io_in_bits_uop_ctrl_funct6,
  input  [2:0]  io_in_bits_uop_ctrl_funct3,
  input         io_in_bits_uop_ctrl_widen,
                io_in_bits_uop_ctrl_widen2,
                io_in_bits_uop_ctrl_narrow,
                io_in_bits_uop_ctrl_narrow_to_1,
  input  [6:0]  io_in_bits_uop_info_vstart,
  input  [7:0]  io_in_bits_uop_info_vl,
  input  [1:0]  io_in_bits_uop_info_vxrm,
  input  [2:0]  io_in_bits_uop_info_frm,
                io_in_bits_uop_info_vlmul,
                io_in_bits_uop_info_vsew,
  input         io_in_bits_uop_info_ma,
                io_in_bits_uop_info_ta,
  input  [2:0]  io_in_bits_uop_info_destEew,
                io_in_bits_uop_expdIdx,
  input         io_in_bits_uop_expdEnd,
                io_in_bits_uop_sysUop_robIdx_flag,
  input  [7:0]  io_in_bits_uop_sysUop_robIdx_value,
  input  [63:0] io_in_bits_vs1,
                io_in_bits_vs2,
                io_in_bits_old_vd,
                io_in_bits_rs1,
  input  [7:0]  io_in_bits_prestart,
                io_in_bits_mask,
                io_in_bits_tail,
  input         io_out_ready,
  output        io_in_ready,
                io_out_valid,
  output [63:0] io_out_bits_vs1,
                io_out_bits_vs2,
                io_out_bits_old_vd,
  output [7:0]  io_out_bits_prestart,
                io_out_bits_mask,
                io_out_bits_tail,
  output [4:0]  io_out_bits_uop_ctrl_lsrc_0,
                io_out_bits_uop_ctrl_lsrc_1,
                io_out_bits_uop_ctrl_ldest,
  output        io_out_bits_uop_ctrl_vm,
  output [5:0]  io_out_bits_uop_ctrl_funct6,
  output [2:0]  io_out_bits_uop_ctrl_funct3,
  output        io_out_bits_uop_ctrl_widen,
                io_out_bits_uop_ctrl_widen2,
                io_out_bits_uop_ctrl_narrow,
                io_out_bits_uop_ctrl_narrow_to_1,
  output [6:0]  io_out_bits_uop_info_vstart,
  output [7:0]  io_out_bits_uop_info_vl,
  output [1:0]  io_out_bits_uop_info_vxrm,
  output [2:0]  io_out_bits_uop_info_frm,
                io_out_bits_uop_info_vlmul,
                io_out_bits_uop_info_vsew,
  output        io_out_bits_uop_info_ma,
                io_out_bits_uop_info_ta,
  output [2:0]  io_out_bits_uop_info_destEew,
                io_out_bits_uop_expdIdx,
  output        io_out_bits_uop_expdEnd,
                io_out_bits_uop_sysUop_robIdx_flag,
  output [7:0]  io_out_bits_uop_sysUop_robIdx_value,
  output [63:0] io_out_bits_uop_maskKeep,
                io_out_bits_uop_maskOff,
  output [1:0]  io_out_bits_uop_vfpCtrl_fmaCmd,
  output        io_out_bits_uop_vfpCtrl_negVs1,
                io_out_bits_uop_vfpCtrl_negVs2,
                io_out_bits_uop_vfpCtrl_negVd,
                io_out_bits_uop_vfpCtrl_switchVdVs2,
                io_out_bits_uop_vfpCtrl_isCvt,
                io_out_bits_uop_vfpCtrl_cvtSigned,
  output [2:0]  io_out_bits_uop_vfpCtrl_cvtCmd,
  output [1:0]  io_out_bits_uop_vfpCtrl_cvtRm,
  output        io_out_bits_uop_vfpCtrl_isMisc,
  output [4:0]  io_out_bits_uop_vfpCtrl_miscCmd,
  output [2:0]  io_out_bits_uop_vfpCtrl_miscSubCmd,
  output        io_out_bits_uop_vfpCtrl_isRec7,
                io_out_bits_uop_vfpCtrl_isRecSqrt7,
                io_out_bits_uop_typeTag
);

  wire [63:0] _maskGen_io_maskKeep;	// @[VFPUTop.scala:241:23]
  wire [63:0] _maskGen_io_maskOff;	// @[VFPUTop.scala:241:23]
  wire [7:0]  _maskGen_io_maskKeep_cmp;	// @[VFPUTop.scala:241:23]
  wire [7:0]  _maskGen_io_maskOff_cmp;	// @[VFPUTop.scala:241:23]
  wire [1:0]  _vfpCtrl_d_io_fpCtrl_fmaCmd;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_negVs1;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_negVs2;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_negVd;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_switchVdVs2;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_isCvt;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_cvtSigned;	// @[VFDecoder.scala:166:19]
  wire [2:0]  _vfpCtrl_d_io_fpCtrl_cvtCmd;	// @[VFDecoder.scala:166:19]
  wire [1:0]  _vfpCtrl_d_io_fpCtrl_cvtRm;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_isMisc;	// @[VFDecoder.scala:166:19]
  wire [4:0]  _vfpCtrl_d_io_fpCtrl_miscCmd;	// @[VFDecoder.scala:166:19]
  wire [2:0]  _vfpCtrl_d_io_fpCtrl_miscSubCmd;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_isRec7;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_isRecSqrt7;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_isDivSqrt;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_isSqrt;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_divReverse;	// @[VFDecoder.scala:166:19]
  reg         REG;	// @[VFPUTop.scala:214:60]
  wire        _WIRE = ~REG | io_out_ready;	// @[VFPUTop.scala:214:60, :222:{18,35}]
  wire        vstart_gte_vl = {1'h0, io_in_bits_uop_info_vstart} >= io_in_bits_uop_info_vl;	// @[VFPUTop.scala:238:50]
  reg  [63:0] fuop_vs2;	// @[VFPUTop.scala:250:17]
  reg  [63:0] fuop_old_vd;	// @[VFPUTop.scala:250:17]
  reg  [7:0]  fuop_prestart;	// @[VFPUTop.scala:250:17]
  reg  [7:0]  fuop_mask;	// @[VFPUTop.scala:250:17]
  reg  [7:0]  fuop_tail;	// @[VFPUTop.scala:250:17]
  reg  [4:0]  fuop_uop_ctrl_lsrc_0;	// @[VFPUTop.scala:250:17]
  reg  [4:0]  fuop_uop_ctrl_lsrc_1;	// @[VFPUTop.scala:250:17]
  reg  [4:0]  fuop_uop_ctrl_ldest;	// @[VFPUTop.scala:250:17]
  reg         fuop_uop_ctrl_vm;	// @[VFPUTop.scala:250:17]
  reg  [5:0]  fuop_uop_ctrl_funct6;	// @[VFPUTop.scala:250:17]
  reg  [2:0]  fuop_uop_ctrl_funct3;	// @[VFPUTop.scala:250:17]
  reg         fuop_uop_ctrl_widen;	// @[VFPUTop.scala:250:17]
  reg         fuop_uop_ctrl_widen2;	// @[VFPUTop.scala:250:17]
  reg         fuop_uop_ctrl_narrow;	// @[VFPUTop.scala:250:17]
  reg         fuop_uop_ctrl_narrow_to_1;	// @[VFPUTop.scala:250:17]
  reg  [6:0]  fuop_uop_info_vstart;	// @[VFPUTop.scala:250:17]
  reg  [7:0]  fuop_uop_info_vl;	// @[VFPUTop.scala:250:17]
  reg  [1:0]  fuop_uop_info_vxrm;	// @[VFPUTop.scala:250:17]
  reg  [2:0]  fuop_uop_info_frm;	// @[VFPUTop.scala:250:17]
  reg  [2:0]  fuop_uop_info_vlmul;	// @[VFPUTop.scala:250:17]
  reg  [2:0]  fuop_uop_info_vsew;	// @[VFPUTop.scala:250:17]
  reg         fuop_uop_info_ma;	// @[VFPUTop.scala:250:17]
  reg         fuop_uop_info_ta;	// @[VFPUTop.scala:250:17]
  reg  [2:0]  fuop_uop_info_destEew;	// @[VFPUTop.scala:250:17]
  reg  [2:0]  fuop_uop_expdIdx;	// @[VFPUTop.scala:250:17]
  reg         fuop_uop_expdEnd;	// @[VFPUTop.scala:250:17]
  reg         fuop_uop_sysUop_robIdx_flag;	// @[VFPUTop.scala:250:17]
  reg  [7:0]  fuop_uop_sysUop_robIdx_value;	// @[VFPUTop.scala:250:17]
  reg         io_out_bits_uop_typeTag_r;	// @[Reg.scala:19:16]
  reg  [1:0]  io_out_bits_uop_vfpCtrl_r_fmaCmd;	// @[Reg.scala:19:16]
  reg         io_out_bits_uop_vfpCtrl_r_negVs1;	// @[Reg.scala:19:16]
  reg         io_out_bits_uop_vfpCtrl_r_negVs2;	// @[Reg.scala:19:16]
  reg         io_out_bits_uop_vfpCtrl_r_negVd;	// @[Reg.scala:19:16]
  reg         io_out_bits_uop_vfpCtrl_r_switchVdVs2;	// @[Reg.scala:19:16]
  reg         io_out_bits_uop_vfpCtrl_r_isCvt;	// @[Reg.scala:19:16]
  reg         io_out_bits_uop_vfpCtrl_r_cvtSigned;	// @[Reg.scala:19:16]
  reg  [2:0]  io_out_bits_uop_vfpCtrl_r_cvtCmd;	// @[Reg.scala:19:16]
  reg  [1:0]  io_out_bits_uop_vfpCtrl_r_cvtRm;	// @[Reg.scala:19:16]
  reg         io_out_bits_uop_vfpCtrl_r_isMisc;	// @[Reg.scala:19:16]
  reg  [4:0]  io_out_bits_uop_vfpCtrl_r_miscCmd;	// @[Reg.scala:19:16]
  reg  [2:0]  io_out_bits_uop_vfpCtrl_r_miscSubCmd;	// @[Reg.scala:19:16]
  reg         io_out_bits_uop_vfpCtrl_r_isRec7;	// @[Reg.scala:19:16]
  reg         io_out_bits_uop_vfpCtrl_r_isRecSqrt7;	// @[Reg.scala:19:16]
  reg  [63:0] io_out_bits_vs1_r;	// @[Reg.scala:19:16]
  reg  [63:0] io_out_bits_uop_maskKeep_r;	// @[Reg.scala:19:16]
  reg  [63:0] io_out_bits_uop_maskOff_r;	// @[Reg.scala:19:16]
  wire        _GEN = io_in_bits_uop_info_vsew != 3'h2;	// @[VFPU.scala:28:14]
  wire        _io_out_bits_uop_maskOff_T_3 = io_in_valid & _WIRE;	// @[VFPUTop.scala:219:49, :222:35]
  always @(posedge clock) begin
    if (reset)
      REG <= 1'h0;	// @[VFPUTop.scala:214:60]
    else if (_io_out_bits_uop_maskOff_T_3)	// @[VFPUTop.scala:219:49]
      REG <= io_in_valid;	// @[VFPUTop.scala:214:60]
    else	// @[VFPUTop.scala:219:49]
      REG <= ~io_out_ready & REG;	// @[VFPUTop.scala:214:60, :229:42, :230:19]
    if (_io_out_bits_uop_maskOff_T_3) begin	// @[VFPUTop.scala:219:49]
      fuop_vs2 <= io_in_bits_vs2;	// @[VFPUTop.scala:250:17]
      fuop_old_vd <= io_in_bits_old_vd;	// @[VFPUTop.scala:250:17]
      fuop_prestart <= io_in_bits_prestart;	// @[VFPUTop.scala:250:17]
      fuop_mask <= io_in_bits_mask;	// @[VFPUTop.scala:250:17]
      fuop_tail <= io_in_bits_tail;	// @[VFPUTop.scala:250:17]
      fuop_uop_ctrl_lsrc_0 <= io_in_bits_uop_ctrl_lsrc_0;	// @[VFPUTop.scala:250:17]
      fuop_uop_ctrl_lsrc_1 <= io_in_bits_uop_ctrl_lsrc_1;	// @[VFPUTop.scala:250:17]
      fuop_uop_ctrl_ldest <= io_in_bits_uop_ctrl_ldest;	// @[VFPUTop.scala:250:17]
      fuop_uop_ctrl_vm <= io_in_bits_uop_ctrl_vm;	// @[VFPUTop.scala:250:17]
      fuop_uop_ctrl_funct6 <= io_in_bits_uop_ctrl_funct6;	// @[VFPUTop.scala:250:17]
      fuop_uop_ctrl_funct3 <= io_in_bits_uop_ctrl_funct3;	// @[VFPUTop.scala:250:17]
      fuop_uop_ctrl_widen <= io_in_bits_uop_ctrl_widen;	// @[VFPUTop.scala:250:17]
      fuop_uop_ctrl_widen2 <= io_in_bits_uop_ctrl_widen2;	// @[VFPUTop.scala:250:17]
      fuop_uop_ctrl_narrow <= io_in_bits_uop_ctrl_narrow;	// @[VFPUTop.scala:250:17]
      fuop_uop_ctrl_narrow_to_1 <= io_in_bits_uop_ctrl_narrow_to_1;	// @[VFPUTop.scala:250:17]
      fuop_uop_info_vstart <= io_in_bits_uop_info_vstart;	// @[VFPUTop.scala:250:17]
      fuop_uop_info_vl <= io_in_bits_uop_info_vl;	// @[VFPUTop.scala:250:17]
      fuop_uop_info_vxrm <= io_in_bits_uop_info_vxrm;	// @[VFPUTop.scala:250:17]
      fuop_uop_info_frm <= io_in_bits_uop_info_frm;	// @[VFPUTop.scala:250:17]
      fuop_uop_info_vlmul <= io_in_bits_uop_info_vlmul;	// @[VFPUTop.scala:250:17]
      fuop_uop_info_vsew <= io_in_bits_uop_info_vsew;	// @[VFPUTop.scala:250:17]
      fuop_uop_info_ma <= io_in_bits_uop_info_ma;	// @[VFPUTop.scala:250:17]
      fuop_uop_info_ta <= io_in_bits_uop_info_ta;	// @[VFPUTop.scala:250:17]
      fuop_uop_info_destEew <= io_in_bits_uop_info_destEew;	// @[VFPUTop.scala:250:17]
      fuop_uop_expdIdx <= io_in_bits_uop_expdIdx;	// @[VFPUTop.scala:250:17]
      fuop_uop_expdEnd <= io_in_bits_uop_expdEnd;	// @[VFPUTop.scala:250:17]
      fuop_uop_sysUop_robIdx_flag <= io_in_bits_uop_sysUop_robIdx_flag;	// @[VFPUTop.scala:250:17]
      fuop_uop_sysUop_robIdx_value <= io_in_bits_uop_sysUop_robIdx_value;	// @[VFPUTop.scala:250:17]
      io_out_bits_uop_typeTag_r <= _GEN;	// @[Reg.scala:19:16, VFPU.scala:28:14]
      io_out_bits_uop_vfpCtrl_r_fmaCmd <= _vfpCtrl_d_io_fpCtrl_fmaCmd;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_negVs1 <= _vfpCtrl_d_io_fpCtrl_negVs1;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_negVs2 <= _vfpCtrl_d_io_fpCtrl_negVs2;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_negVd <= _vfpCtrl_d_io_fpCtrl_negVd;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_switchVdVs2 <= _vfpCtrl_d_io_fpCtrl_switchVdVs2;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_isCvt <= _vfpCtrl_d_io_fpCtrl_isCvt;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_cvtSigned <= _vfpCtrl_d_io_fpCtrl_cvtSigned;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_cvtCmd <= _vfpCtrl_d_io_fpCtrl_cvtCmd;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_cvtRm <= _vfpCtrl_d_io_fpCtrl_cvtRm;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_isMisc <= _vfpCtrl_d_io_fpCtrl_isMisc;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_miscCmd <= _vfpCtrl_d_io_fpCtrl_miscCmd;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_miscSubCmd <= _vfpCtrl_d_io_fpCtrl_miscSubCmd;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_isRec7 <= _vfpCtrl_d_io_fpCtrl_isRec7;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      io_out_bits_uop_vfpCtrl_r_isRecSqrt7 <= _vfpCtrl_d_io_fpCtrl_isRecSqrt7;	// @[Reg.scala:19:16, VFDecoder.scala:166:19]
      if (io_in_bits_uop_ctrl_funct3[2] & ~_GEN)	// @[VFPU.scala:28:14, VFPUTop.scala:203:{13,24}, VFuBundles.scala:151:18]
        io_out_bits_vs1_r <= {2{io_in_bits_rs1[31:0]}};	// @[Cat.scala:33:92, Reg.scala:19:16, VFPUTop.scala:204:40]
      else if (io_in_bits_uop_ctrl_funct3[2] & _GEN)	// @[VFPU.scala:28:14, VFPUTop.scala:205:17, VFuBundles.scala:151:18]
        io_out_bits_vs1_r <= io_in_bits_rs1;	// @[Reg.scala:19:16]
      else	// @[VFPUTop.scala:205:17]
        io_out_bits_vs1_r <= io_in_bits_vs1;	// @[Reg.scala:19:16]
      if (io_in_bits_uop_ctrl_narrow_to_1 & ~vstart_gte_vl)	// @[VFPUTop.scala:238:50, :260:{57,59}]
        io_out_bits_uop_maskKeep_r <= {56'h0, _maskGen_io_maskKeep_cmp};	// @[Reg.scala:19:16, VFPUTop.scala:241:23, :260:44]
      else	// @[VFPUTop.scala:260:57]
        io_out_bits_uop_maskKeep_r <= _maskGen_io_maskKeep;	// @[Reg.scala:19:16, VFPUTop.scala:241:23]
      if (io_in_bits_uop_ctrl_narrow_to_1 & ~vstart_gte_vl)	// @[VFPUTop.scala:238:50, :260:59, :261:56]
        io_out_bits_uop_maskOff_r <= {56'h0, _maskGen_io_maskOff_cmp};	// @[Reg.scala:19:16, VFPUTop.scala:241:23, :260:44, :261:43]
      else	// @[VFPUTop.scala:261:56]
        io_out_bits_uop_maskOff_r <= _maskGen_io_maskOff;	// @[Reg.scala:19:16, VFPUTop.scala:241:23]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    logic [31:0] _RANDOM_22;
    logic [31:0] _RANDOM_23;
    logic [31:0] _RANDOM_24;
    logic [31:0] _RANDOM_25;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        REG = _RANDOM_0[0];	// @[VFPUTop.scala:214:60]
        fuop_vs2 = {_RANDOM_4[31:11], _RANDOM_5, _RANDOM_6[10:0]};	// @[VFPUTop.scala:250:17]
        fuop_old_vd = {_RANDOM_6[31:11], _RANDOM_7, _RANDOM_8[10:0]};	// @[VFPUTop.scala:250:17]
        fuop_prestart = _RANDOM_10[18:11];	// @[VFPUTop.scala:250:17]
        fuop_mask = _RANDOM_10[26:19];	// @[VFPUTop.scala:250:17]
        fuop_tail = {_RANDOM_10[31:27], _RANDOM_11[2:0]};	// @[VFPUTop.scala:250:17]
        fuop_uop_ctrl_lsrc_0 = _RANDOM_11[7:3];	// @[VFPUTop.scala:250:17]
        fuop_uop_ctrl_lsrc_1 = _RANDOM_11[12:8];	// @[VFPUTop.scala:250:17]
        fuop_uop_ctrl_ldest = _RANDOM_11[17:13];	// @[VFPUTop.scala:250:17]
        fuop_uop_ctrl_vm = _RANDOM_11[18];	// @[VFPUTop.scala:250:17]
        fuop_uop_ctrl_funct6 = _RANDOM_11[24:19];	// @[VFPUTop.scala:250:17]
        fuop_uop_ctrl_funct3 = _RANDOM_11[27:25];	// @[VFPUTop.scala:250:17]
        fuop_uop_ctrl_widen = _RANDOM_11[28];	// @[VFPUTop.scala:250:17]
        fuop_uop_ctrl_widen2 = _RANDOM_11[29];	// @[VFPUTop.scala:250:17]
        fuop_uop_ctrl_narrow = _RANDOM_11[30];	// @[VFPUTop.scala:250:17]
        fuop_uop_ctrl_narrow_to_1 = _RANDOM_11[31];	// @[VFPUTop.scala:250:17]
        fuop_uop_info_vstart = _RANDOM_12[6:0];	// @[VFPUTop.scala:250:17]
        fuop_uop_info_vl = _RANDOM_12[14:7];	// @[VFPUTop.scala:250:17]
        fuop_uop_info_vxrm = _RANDOM_12[16:15];	// @[VFPUTop.scala:250:17]
        fuop_uop_info_frm = _RANDOM_12[19:17];	// @[VFPUTop.scala:250:17]
        fuop_uop_info_vlmul = _RANDOM_12[22:20];	// @[VFPUTop.scala:250:17]
        fuop_uop_info_vsew = _RANDOM_12[25:23];	// @[VFPUTop.scala:250:17]
        fuop_uop_info_ma = _RANDOM_12[26];	// @[VFPUTop.scala:250:17]
        fuop_uop_info_ta = _RANDOM_12[27];	// @[VFPUTop.scala:250:17]
        fuop_uop_info_destEew = _RANDOM_12[30:28];	// @[VFPUTop.scala:250:17]
        fuop_uop_expdIdx = {_RANDOM_12[31], _RANDOM_13[1:0]};	// @[VFPUTop.scala:250:17]
        fuop_uop_expdEnd = _RANDOM_13[2];	// @[VFPUTop.scala:250:17]
        fuop_uop_sysUop_robIdx_flag = _RANDOM_13[4];	// @[VFPUTop.scala:250:17]
        fuop_uop_sysUop_robIdx_value = _RANDOM_13[12:5];	// @[VFPUTop.scala:250:17]
        io_out_bits_uop_typeTag_r = _RANDOM_18[10];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_fmaCmd = _RANDOM_18[12:11];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_negVs1 = _RANDOM_18[13];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_negVs2 = _RANDOM_18[14];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_negVd = _RANDOM_18[15];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_switchVdVs2 = _RANDOM_18[16];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_isCvt = _RANDOM_18[17];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_cvtSigned = _RANDOM_18[18];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_cvtCmd = _RANDOM_18[21:19];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_cvtRm = _RANDOM_18[23:22];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_isMisc = _RANDOM_18[24];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_miscCmd = _RANDOM_18[29:25];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_miscSubCmd = {_RANDOM_18[31:30], _RANDOM_19[0]};	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_isRec7 = _RANDOM_19[1];	// @[Reg.scala:19:16]
        io_out_bits_uop_vfpCtrl_r_isRecSqrt7 = _RANDOM_19[2];	// @[Reg.scala:19:16]
        io_out_bits_vs1_r = {_RANDOM_19[31:6], _RANDOM_20, _RANDOM_21[5:0]};	// @[Reg.scala:19:16]
        io_out_bits_uop_maskKeep_r = {_RANDOM_21[31:6], _RANDOM_22, _RANDOM_23[5:0]};	// @[Reg.scala:19:16]
        io_out_bits_uop_maskOff_r = {_RANDOM_23[31:6], _RANDOM_24, _RANDOM_25[5:0]};	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  VFDecoder vfpCtrl_d (	// @[VFDecoder.scala:166:19]
    .io_instr              ({io_in_bits_uop_ctrl_funct6, io_in_bits_uop_ctrl_vm, io_in_bits_uop_ctrl_lsrc_1, io_in_bits_uop_ctrl_lsrc_0, io_in_bits_uop_ctrl_funct3, io_in_bits_uop_ctrl_ldest}),	// @[Cat.scala:33:92]
    .io_fpCtrl_fmaCmd      (_vfpCtrl_d_io_fpCtrl_fmaCmd),
    .io_fpCtrl_negVs1      (_vfpCtrl_d_io_fpCtrl_negVs1),
    .io_fpCtrl_negVs2      (_vfpCtrl_d_io_fpCtrl_negVs2),
    .io_fpCtrl_negVd       (_vfpCtrl_d_io_fpCtrl_negVd),
    .io_fpCtrl_switchVdVs2 (_vfpCtrl_d_io_fpCtrl_switchVdVs2),
    .io_fpCtrl_isCvt       (_vfpCtrl_d_io_fpCtrl_isCvt),
    .io_fpCtrl_cvtSigned   (_vfpCtrl_d_io_fpCtrl_cvtSigned),
    .io_fpCtrl_cvtCmd      (_vfpCtrl_d_io_fpCtrl_cvtCmd),
    .io_fpCtrl_cvtRm       (_vfpCtrl_d_io_fpCtrl_cvtRm),
    .io_fpCtrl_isMisc      (_vfpCtrl_d_io_fpCtrl_isMisc),
    .io_fpCtrl_miscCmd     (_vfpCtrl_d_io_fpCtrl_miscCmd),
    .io_fpCtrl_miscSubCmd  (_vfpCtrl_d_io_fpCtrl_miscSubCmd),
    .io_fpCtrl_isRec7      (_vfpCtrl_d_io_fpCtrl_isRec7),
    .io_fpCtrl_isRecSqrt7  (_vfpCtrl_d_io_fpCtrl_isRecSqrt7),
    .io_fpCtrl_isDivSqrt   (_vfpCtrl_d_io_fpCtrl_isDivSqrt),
    .io_fpCtrl_isSqrt      (_vfpCtrl_d_io_fpCtrl_isSqrt),
    .io_fpCtrl_divReverse  (_vfpCtrl_d_io_fpCtrl_divReverse)
  );
  MaskTailData maskGen (	// @[VFPUTop.scala:241:23]
    .io_mask                 (io_in_bits_mask),
    .io_tail                 (io_in_bits_tail),
    .io_prestart             (io_in_bits_prestart),
    .io_vstart_gte_vl        (vstart_gte_vl),	// @[VFPUTop.scala:238:50]
    .io_oldVd                (io_in_bits_old_vd),
    .io_uop_ctrl_vm          (io_in_bits_uop_ctrl_vm),
    .io_uop_ctrl_funct6      (io_in_bits_uop_ctrl_funct6),
    .io_uop_ctrl_narrow_to_1 (io_in_bits_uop_ctrl_narrow_to_1),
    .io_uop_info_ma          (io_in_bits_uop_info_ma),
    .io_uop_info_ta          (io_in_bits_uop_info_ta),
    .io_maskKeep             (_maskGen_io_maskKeep),
    .io_maskOff              (_maskGen_io_maskOff),
    .io_maskKeep_cmp         (_maskGen_io_maskKeep_cmp),
    .io_maskOff_cmp          (_maskGen_io_maskOff_cmp)
  );
  assign io_in_ready = _WIRE;	// @[VFPUTop.scala:222:35]
  assign io_out_valid = REG;	// @[VFPUTop.scala:214:60]
  assign io_out_bits_vs1 = io_out_bits_vs1_r;	// @[Reg.scala:19:16]
  assign io_out_bits_vs2 = fuop_vs2;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_old_vd = fuop_old_vd;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_prestart = fuop_prestart;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_mask = fuop_mask;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_tail = fuop_tail;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_ctrl_lsrc_0 = fuop_uop_ctrl_lsrc_0;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_ctrl_lsrc_1 = fuop_uop_ctrl_lsrc_1;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_ctrl_ldest = fuop_uop_ctrl_ldest;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_ctrl_vm = fuop_uop_ctrl_vm;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_ctrl_funct6 = fuop_uop_ctrl_funct6;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_ctrl_funct3 = fuop_uop_ctrl_funct3;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_ctrl_widen = fuop_uop_ctrl_widen;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_ctrl_widen2 = fuop_uop_ctrl_widen2;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_ctrl_narrow = fuop_uop_ctrl_narrow;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_ctrl_narrow_to_1 = fuop_uop_ctrl_narrow_to_1;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_info_vstart = fuop_uop_info_vstart;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_info_vl = fuop_uop_info_vl;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_info_vxrm = fuop_uop_info_vxrm;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_info_frm = fuop_uop_info_frm;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_info_vlmul = fuop_uop_info_vlmul;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_info_vsew = fuop_uop_info_vsew;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_info_ma = fuop_uop_info_ma;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_info_ta = fuop_uop_info_ta;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_info_destEew = fuop_uop_info_destEew;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_expdIdx = fuop_uop_expdIdx;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_expdEnd = fuop_uop_expdEnd;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_sysUop_robIdx_flag = fuop_uop_sysUop_robIdx_flag;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_sysUop_robIdx_value = fuop_uop_sysUop_robIdx_value;	// @[VFPUTop.scala:250:17]
  assign io_out_bits_uop_maskKeep = io_out_bits_uop_maskKeep_r;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_maskOff = io_out_bits_uop_maskOff_r;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_fmaCmd = io_out_bits_uop_vfpCtrl_r_fmaCmd;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_negVs1 = io_out_bits_uop_vfpCtrl_r_negVs1;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_negVs2 = io_out_bits_uop_vfpCtrl_r_negVs2;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_negVd = io_out_bits_uop_vfpCtrl_r_negVd;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_switchVdVs2 = io_out_bits_uop_vfpCtrl_r_switchVdVs2;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_isCvt = io_out_bits_uop_vfpCtrl_r_isCvt;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_cvtSigned = io_out_bits_uop_vfpCtrl_r_cvtSigned;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_cvtCmd = io_out_bits_uop_vfpCtrl_r_cvtCmd;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_cvtRm = io_out_bits_uop_vfpCtrl_r_cvtRm;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_isMisc = io_out_bits_uop_vfpCtrl_r_isMisc;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_miscCmd = io_out_bits_uop_vfpCtrl_r_miscCmd;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_miscSubCmd = io_out_bits_uop_vfpCtrl_r_miscSubCmd;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_isRec7 = io_out_bits_uop_vfpCtrl_r_isRec7;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_vfpCtrl_isRecSqrt7 = io_out_bits_uop_vfpCtrl_r_isRecSqrt7;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_typeTag = io_out_bits_uop_typeTag_r;	// @[Reg.scala:19:16]
endmodule

