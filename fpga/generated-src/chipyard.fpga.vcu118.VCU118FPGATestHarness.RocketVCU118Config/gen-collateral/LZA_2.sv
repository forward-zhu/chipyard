// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module LZA_2(
  input  [106:0] io_a,
                 io_b,
  output [106:0] io_f
);

  assign io_f =
    {io_a[106] ^ io_b[106] ^ ~(~(io_a[105]) & ~(io_b[105])),
     io_a[105] ^ io_b[105] ^ ~(~(io_a[104]) & ~(io_b[104])),
     io_a[104] ^ io_b[104] ^ ~(~(io_a[103]) & ~(io_b[103])),
     io_a[103] ^ io_b[103] ^ ~(~(io_a[102]) & ~(io_b[102])),
     io_a[102] ^ io_b[102] ^ ~(~(io_a[101]) & ~(io_b[101])),
     io_a[101] ^ io_b[101] ^ ~(~(io_a[100]) & ~(io_b[100])),
     io_a[100] ^ io_b[100] ^ ~(~(io_a[99]) & ~(io_b[99])),
     io_a[99] ^ io_b[99] ^ ~(~(io_a[98]) & ~(io_b[98])),
     io_a[98] ^ io_b[98] ^ ~(~(io_a[97]) & ~(io_b[97])),
     io_a[97] ^ io_b[97] ^ ~(~(io_a[96]) & ~(io_b[96])),
     io_a[96] ^ io_b[96] ^ ~(~(io_a[95]) & ~(io_b[95])),
     io_a[95] ^ io_b[95] ^ ~(~(io_a[94]) & ~(io_b[94])),
     io_a[94] ^ io_b[94] ^ ~(~(io_a[93]) & ~(io_b[93])),
     io_a[93] ^ io_b[93] ^ ~(~(io_a[92]) & ~(io_b[92])),
     io_a[92] ^ io_b[92] ^ ~(~(io_a[91]) & ~(io_b[91])),
     io_a[91] ^ io_b[91] ^ ~(~(io_a[90]) & ~(io_b[90])),
     io_a[90] ^ io_b[90] ^ ~(~(io_a[89]) & ~(io_b[89])),
     io_a[89] ^ io_b[89] ^ ~(~(io_a[88]) & ~(io_b[88])),
     io_a[88] ^ io_b[88] ^ ~(~(io_a[87]) & ~(io_b[87])),
     io_a[87] ^ io_b[87] ^ ~(~(io_a[86]) & ~(io_b[86])),
     io_a[86] ^ io_b[86] ^ ~(~(io_a[85]) & ~(io_b[85])),
     io_a[85] ^ io_b[85] ^ ~(~(io_a[84]) & ~(io_b[84])),
     io_a[84] ^ io_b[84] ^ ~(~(io_a[83]) & ~(io_b[83])),
     io_a[83] ^ io_b[83] ^ ~(~(io_a[82]) & ~(io_b[82])),
     io_a[82] ^ io_b[82] ^ ~(~(io_a[81]) & ~(io_b[81])),
     io_a[81] ^ io_b[81] ^ ~(~(io_a[80]) & ~(io_b[80])),
     io_a[80] ^ io_b[80] ^ ~(~(io_a[79]) & ~(io_b[79])),
     io_a[79] ^ io_b[79] ^ ~(~(io_a[78]) & ~(io_b[78])),
     io_a[78] ^ io_b[78] ^ ~(~(io_a[77]) & ~(io_b[77])),
     io_a[77] ^ io_b[77] ^ ~(~(io_a[76]) & ~(io_b[76])),
     io_a[76] ^ io_b[76] ^ ~(~(io_a[75]) & ~(io_b[75])),
     io_a[75] ^ io_b[75] ^ ~(~(io_a[74]) & ~(io_b[74])),
     io_a[74] ^ io_b[74] ^ ~(~(io_a[73]) & ~(io_b[73])),
     io_a[73] ^ io_b[73] ^ ~(~(io_a[72]) & ~(io_b[72])),
     io_a[72] ^ io_b[72] ^ ~(~(io_a[71]) & ~(io_b[71])),
     io_a[71] ^ io_b[71] ^ ~(~(io_a[70]) & ~(io_b[70])),
     io_a[70] ^ io_b[70] ^ ~(~(io_a[69]) & ~(io_b[69])),
     io_a[69] ^ io_b[69] ^ ~(~(io_a[68]) & ~(io_b[68])),
     io_a[68] ^ io_b[68] ^ ~(~(io_a[67]) & ~(io_b[67])),
     io_a[67] ^ io_b[67] ^ ~(~(io_a[66]) & ~(io_b[66])),
     io_a[66] ^ io_b[66] ^ ~(~(io_a[65]) & ~(io_b[65])),
     io_a[65] ^ io_b[65] ^ ~(~(io_a[64]) & ~(io_b[64])),
     io_a[64] ^ io_b[64] ^ ~(~(io_a[63]) & ~(io_b[63])),
     io_a[63] ^ io_b[63] ^ ~(~(io_a[62]) & ~(io_b[62])),
     io_a[62] ^ io_b[62] ^ ~(~(io_a[61]) & ~(io_b[61])),
     io_a[61] ^ io_b[61] ^ ~(~(io_a[60]) & ~(io_b[60])),
     io_a[60] ^ io_b[60] ^ ~(~(io_a[59]) & ~(io_b[59])),
     io_a[59] ^ io_b[59] ^ ~(~(io_a[58]) & ~(io_b[58])),
     io_a[58] ^ io_b[58] ^ ~(~(io_a[57]) & ~(io_b[57])),
     io_a[57] ^ io_b[57] ^ ~(~(io_a[56]) & ~(io_b[56])),
     io_a[56] ^ io_b[56] ^ ~(~(io_a[55]) & ~(io_b[55])),
     io_a[55] ^ io_b[55] ^ ~(~(io_a[54]) & ~(io_b[54])),
     io_a[54] ^ io_b[54] ^ ~(~(io_a[53]) & ~(io_b[53])),
     io_a[53] ^ io_b[53] ^ ~(~(io_a[52]) & ~(io_b[52])),
     io_a[52] ^ io_b[52] ^ ~(~(io_a[51]) & ~(io_b[51])),
     io_a[51] ^ io_b[51] ^ ~(~(io_a[50]) & ~(io_b[50])),
     io_a[50] ^ io_b[50] ^ ~(~(io_a[49]) & ~(io_b[49])),
     io_a[49] ^ io_b[49] ^ ~(~(io_a[48]) & ~(io_b[48])),
     io_a[48] ^ io_b[48] ^ ~(~(io_a[47]) & ~(io_b[47])),
     io_a[47] ^ io_b[47] ^ ~(~(io_a[46]) & ~(io_b[46])),
     io_a[46] ^ io_b[46] ^ ~(~(io_a[45]) & ~(io_b[45])),
     io_a[45] ^ io_b[45] ^ ~(~(io_a[44]) & ~(io_b[44])),
     io_a[44] ^ io_b[44] ^ ~(~(io_a[43]) & ~(io_b[43])),
     io_a[43] ^ io_b[43] ^ ~(~(io_a[42]) & ~(io_b[42])),
     io_a[42] ^ io_b[42] ^ ~(~(io_a[41]) & ~(io_b[41])),
     io_a[41] ^ io_b[41] ^ ~(~(io_a[40]) & ~(io_b[40])),
     io_a[40] ^ io_b[40] ^ ~(~(io_a[39]) & ~(io_b[39])),
     io_a[39] ^ io_b[39] ^ ~(~(io_a[38]) & ~(io_b[38])),
     io_a[38] ^ io_b[38] ^ ~(~(io_a[37]) & ~(io_b[37])),
     io_a[37] ^ io_b[37] ^ ~(~(io_a[36]) & ~(io_b[36])),
     io_a[36] ^ io_b[36] ^ ~(~(io_a[35]) & ~(io_b[35])),
     io_a[35] ^ io_b[35] ^ ~(~(io_a[34]) & ~(io_b[34])),
     io_a[34] ^ io_b[34] ^ ~(~(io_a[33]) & ~(io_b[33])),
     io_a[33] ^ io_b[33] ^ ~(~(io_a[32]) & ~(io_b[32])),
     io_a[32] ^ io_b[32] ^ ~(~(io_a[31]) & ~(io_b[31])),
     io_a[31] ^ io_b[31] ^ ~(~(io_a[30]) & ~(io_b[30])),
     io_a[30] ^ io_b[30] ^ ~(~(io_a[29]) & ~(io_b[29])),
     io_a[29] ^ io_b[29] ^ ~(~(io_a[28]) & ~(io_b[28])),
     io_a[28] ^ io_b[28] ^ ~(~(io_a[27]) & ~(io_b[27])),
     io_a[27] ^ io_b[27] ^ ~(~(io_a[26]) & ~(io_b[26])),
     io_a[26] ^ io_b[26] ^ ~(~(io_a[25]) & ~(io_b[25])),
     io_a[25] ^ io_b[25] ^ ~(~(io_a[24]) & ~(io_b[24])),
     io_a[24] ^ io_b[24] ^ ~(~(io_a[23]) & ~(io_b[23])),
     io_a[23] ^ io_b[23] ^ ~(~(io_a[22]) & ~(io_b[22])),
     io_a[22] ^ io_b[22] ^ ~(~(io_a[21]) & ~(io_b[21])),
     io_a[21] ^ io_b[21] ^ ~(~(io_a[20]) & ~(io_b[20])),
     io_a[20] ^ io_b[20] ^ ~(~(io_a[19]) & ~(io_b[19])),
     io_a[19] ^ io_b[19] ^ ~(~(io_a[18]) & ~(io_b[18])),
     io_a[18] ^ io_b[18] ^ ~(~(io_a[17]) & ~(io_b[17])),
     io_a[17] ^ io_b[17] ^ ~(~(io_a[16]) & ~(io_b[16])),
     io_a[16] ^ io_b[16] ^ ~(~(io_a[15]) & ~(io_b[15])),
     io_a[15] ^ io_b[15] ^ ~(~(io_a[14]) & ~(io_b[14])),
     io_a[14] ^ io_b[14] ^ ~(~(io_a[13]) & ~(io_b[13])),
     io_a[13] ^ io_b[13] ^ ~(~(io_a[12]) & ~(io_b[12])),
     io_a[12] ^ io_b[12] ^ ~(~(io_a[11]) & ~(io_b[11])),
     io_a[11] ^ io_b[11] ^ ~(~(io_a[10]) & ~(io_b[10])),
     io_a[10] ^ io_b[10] ^ ~(~(io_a[9]) & ~(io_b[9])),
     io_a[9] ^ io_b[9] ^ ~(~(io_a[8]) & ~(io_b[8])),
     io_a[8] ^ io_b[8] ^ ~(~(io_a[7]) & ~(io_b[7])),
     io_a[7] ^ io_b[7] ^ ~(~(io_a[6]) & ~(io_b[6])),
     io_a[6] ^ io_b[6] ^ ~(~(io_a[5]) & ~(io_b[5])),
     io_a[5] ^ io_b[5] ^ ~(~(io_a[4]) & ~(io_b[4])),
     io_a[4] ^ io_b[4] ^ ~(~(io_a[3]) & ~(io_b[3])),
     io_a[3] ^ io_b[3] ^ ~(~(io_a[2]) & ~(io_b[2])),
     io_a[2] ^ io_b[2] ^ ~(~(io_a[1]) & ~(io_b[1])),
     io_a[1] ^ io_b[1] ^ ~(~(io_a[0]) & ~(io_b[0])),
     1'h0};	// @[Cat.scala:33:92, LZA.scala:19:{14,21}, :20:{14,21,24}, :24:20]
endmodule

