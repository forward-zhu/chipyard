// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module Vsplit(
  input          clock,
                 reset,
                 io_in_decodeIn_valid,
  input  [4:0]   io_in_decodeIn_bits_vCtrl_lsrc_0,
                 io_in_decodeIn_bits_vCtrl_lsrc_1,
                 io_in_decodeIn_bits_vCtrl_ldest,
  input          io_in_decodeIn_bits_vCtrl_vm,
  input  [5:0]   io_in_decodeIn_bits_vCtrl_funct6,
  input  [2:0]   io_in_decodeIn_bits_vCtrl_funct3,
  input          io_in_decodeIn_bits_vCtrl_illegal,
                 io_in_decodeIn_bits_vCtrl_lsrcVal_0,
                 io_in_decodeIn_bits_vCtrl_lsrcVal_1,
                 io_in_decodeIn_bits_vCtrl_ldestVal,
                 io_in_decodeIn_bits_vCtrl_rdVal,
                 io_in_decodeIn_bits_vCtrl_load,
                 io_in_decodeIn_bits_vCtrl_store,
                 io_in_decodeIn_bits_vCtrl_alu,
                 io_in_decodeIn_bits_vCtrl_mul,
                 io_in_decodeIn_bits_vCtrl_fp,
                 io_in_decodeIn_bits_vCtrl_div,
                 io_in_decodeIn_bits_vCtrl_redu,
                 io_in_decodeIn_bits_vCtrl_mask,
                 io_in_decodeIn_bits_vCtrl_perm,
                 io_in_decodeIn_bits_vCtrl_widen,
                 io_in_decodeIn_bits_vCtrl_widen2,
                 io_in_decodeIn_bits_vCtrl_narrow,
                 io_in_decodeIn_bits_vCtrl_narrow_to_1,
  input  [63:0]  io_in_decodeIn_bits_scalar_opnd_1,
                 io_in_decodeIn_bits_scalar_opnd_2,
                 io_in_decodeIn_bits_float_opnd_1,
  input  [7:0]   io_in_decodeIn_bits_vInfo_vl,
  input  [6:0]   io_in_decodeIn_bits_vInfo_vstart,
  input          io_in_decodeIn_bits_vInfo_vma,
                 io_in_decodeIn_bits_vInfo_vta,
  input  [2:0]   io_in_decodeIn_bits_vInfo_vsew,
                 io_in_decodeIn_bits_vInfo_vlmul,
  input  [1:0]   io_in_decodeIn_bits_vInfo_vxrm,
  input  [2:0]   io_in_decodeIn_bits_vInfo_frm,
                 io_in_decodeIn_bits_eewEmulInfo_veewVs2,
                 io_in_decodeIn_bits_eewEmulInfo_veewVd,
  input  [3:0]   io_in_decodeIn_bits_eewEmulInfo_emulVs1,
                 io_in_decodeIn_bits_eewEmulInfo_emulVs2,
                 io_in_decodeIn_bits_eewEmulInfo_emulVd,
  input          io_in_decodeIn_bits_floatRed,
                 io_in_regFileIn_readVld_0,
                 io_in_regFileIn_readVld_1,
                 io_in_regFileIn_readVld_2,
                 io_in_regFileIn_readVld_3,
  input  [127:0] io_in_regFileIn_readData_0,
                 io_in_regFileIn_readData_1,
                 io_in_regFileIn_readData_2,
                 io_in_regFileIn_readData_3,
  input          io_scoreBoardReadIO_readBypassed1,
                 io_scoreBoardReadIO_readBypassed1N,
                 io_scoreBoardReadIO_readBypassed2,
                 io_scoreBoardReadIO_readBypassed2N,
                 io_scoreBoardReadIO_readBypassed3,
                 io_scoreBoardReadIO_readBypassed3N,
                 io_scoreBoardReadIO_readBypassed4,
                 io_lsuStallSplit,
                 io_iexNeedStall,
                 io_vLSUXcpt_exception_vld,
                 io_vLSUXcpt_update_vl,
  input  [7:0]   io_vLSUXcpt_update_data,
  input          io_vLSUXcpt_xcpt_cause_ma_ld,
                 io_vLSUXcpt_xcpt_cause_ma_st,
                 io_vLSUXcpt_xcpt_cause_pf_ld,
                 io_vLSUXcpt_xcpt_cause_pf_st,
                 io_vLSUXcpt_xcpt_cause_gf_ld,
                 io_vLSUXcpt_xcpt_cause_gf_st,
                 io_vLSUXcpt_xcpt_cause_ae_ld,
                 io_vLSUXcpt_xcpt_cause_ae_st,
  input  [63:0]  io_vLSUXcpt_xcpt_addr,
  output         io_in_decodeIn_ready,
                 io_out_mUop_valid,
  output [5:0]   io_out_mUop_bits_uop_ctrl_funct6,
  output [2:0]   io_out_mUop_bits_uop_ctrl_funct3,
  output         io_out_mUop_bits_uop_ctrl_vm,
  output [4:0]   io_out_mUop_bits_uop_ctrl_vs1_imm,
                 io_out_mUop_bits_uop_ctrl_vs2,
  output         io_out_mUop_bits_uop_ctrl_widen,
                 io_out_mUop_bits_uop_ctrl_widen2,
                 io_out_mUop_bits_uop_ctrl_narrow,
                 io_out_mUop_bits_uop_ctrl_narrow_to_1,
                 io_out_mUop_bits_uop_ctrl_load,
                 io_out_mUop_bits_uop_ctrl_store,
                 io_out_mUop_bits_uop_ctrl_alu,
                 io_out_mUop_bits_uop_ctrl_mul,
                 io_out_mUop_bits_uop_ctrl_fp,
                 io_out_mUop_bits_uop_ctrl_div,
                 io_out_mUop_bits_uop_ctrl_redu,
                 io_out_mUop_bits_uop_ctrl_mask,
                 io_out_mUop_bits_uop_ctrl_perm,
                 io_out_mUop_bits_uop_ctrl_floatRed,
                 io_out_mUop_bits_uop_ctrl_vGatherEi16EEW8,
                 io_out_mUop_bits_uop_ctrl_vGatherEi16EEW32,
                 io_out_mUop_bits_uop_ctrl_vGatherEi16EEW64,
  output [4:0]   io_out_mUop_bits_uop_ctrl_lsrc_0,
                 io_out_mUop_bits_uop_ctrl_lsrc_1,
                 io_out_mUop_bits_uop_ctrl_ldest,
  output         io_out_mUop_bits_uop_info_ma,
                 io_out_mUop_bits_uop_info_ta,
  output [2:0]   io_out_mUop_bits_uop_info_vsew,
                 io_out_mUop_bits_uop_info_vlmul,
  output [7:0]   io_out_mUop_bits_uop_info_vl,
  output [6:0]   io_out_mUop_bits_uop_info_vstart,
  output [1:0]   io_out_mUop_bits_uop_info_vxrm,
  output [2:0]   io_out_mUop_bits_uop_info_frm,
  output [6:0]   io_out_mUop_bits_uop_uopIdx,
  output [2:0]   io_out_mUop_bits_uop_segIndex,
  output         io_out_mUop_bits_uop_uopEnd,
  output [63:0]  io_out_mUop_bits_scalar_opnd_1,
                 io_out_mUop_bits_scalar_opnd_2,
  output [127:0] io_out_mUop_bits_uopRegInfo_vs1,
                 io_out_mUop_bits_uopRegInfo_vs2,
                 io_out_mUop_bits_uopRegInfo_mask,
                 io_out_mUop_bits_uopRegInfo_old_vd,
  output         io_out_toRegFileRead_rfReadEn_0,
                 io_out_toRegFileRead_rfReadEn_1,
                 io_out_toRegFileRead_rfReadEn_2,
                 io_out_toRegFileRead_rfReadEn_3,
  output [4:0]   io_out_toRegFileRead_rfReadIdx_0,
                 io_out_toRegFileRead_rfReadIdx_1,
                 io_out_toRegFileRead_rfReadIdx_3,
  output         io_out_mUopMergeAttr_valid,
                 io_out_mUopMergeAttr_bits_scalarRegWriteEn,
                 io_out_mUopMergeAttr_bits_floatRegWriteEn,
                 io_out_mUopMergeAttr_bits_rfWriteEn,
  output [4:0]   io_out_mUopMergeAttr_bits_ldest,
  output         io_out_mUopMergeAttr_bits_muopEnd,
  output [3:0]   io_out_mUopMergeAttr_bits_permExpdLen,
  output [4:0]   io_out_mUopMergeAttr_bits_regDstIdx,
  output [3:0]   io_out_mUopMergeAttr_bits_regCount,
  output [2:0]   io_out_mUopMergeAttr_bits_regBackWidth,
  output [3:0]   io_out_mUopMergeAttr_bits_regWriteMuopIdx,
  output         io_scoreBoardSetIO_setEn,
  output [4:0]   io_scoreBoardSetIO_setAddr,
  output         io_scoreBoardSetIO_setMultiEn,
  output [4:0]   io_scoreBoardSetIO_setNum,
                 io_scoreBoardReadIO_readAddr1,
                 io_scoreBoardReadIO_readAddr2,
                 io_scoreBoardReadIO_readAddr3,
  output [2:0]   io_scoreBoardReadIO_readNum1,
                 io_scoreBoardReadIO_readNum2,
  output         io_excpInfo_exception_vld,
                 io_excpInfo_update_vl,
  output [7:0]   io_excpInfo_update_data,
  output         io_excpInfo_xcpt_cause_ma_ld,
                 io_excpInfo_xcpt_cause_ma_st,
                 io_excpInfo_xcpt_cause_pf_ld,
                 io_excpInfo_xcpt_cause_pf_st,
                 io_excpInfo_xcpt_cause_gf_ld,
                 io_excpInfo_xcpt_cause_gf_st,
                 io_excpInfo_xcpt_cause_ae_ld,
                 io_excpInfo_xcpt_cause_ae_st,
  output [63:0]  io_excpInfo_xcpt_addr,
  output         io_excpInfo_illegalInst,
                 io_excpInfo_update_float,
  output [4:0]   io_excpInfo_reg_idx
);

  wire         fire2PipeReg;	// @[Vsplit.scala:580:41]
  wire         pipeRegReady;	// @[Vsplit.scala:579:37]
  wire [7:0]   expdLen;	// @[Vsplit.scala:530:19]
  wire         ldstCtrl_wholeReg;	// @[VLsuBundle.scala:74:43]
  reg  [127:0] uopRegInfo_0_vs1;	// @[Vsplit.scala:139:28]
  reg  [127:0] uopRegInfo_0_vs2;	// @[Vsplit.scala:139:28]
  reg  [127:0] uopRegInfo_0_mask;	// @[Vsplit.scala:139:28]
  reg  [127:0] uopRegInfo_0_old_vd;	// @[Vsplit.scala:139:28]
  reg  [7:0]   idx;	// @[Vsplit.scala:141:32]
  reg          currentState;	// @[Vsplit.scala:145:31]
  wire         instDecodeIn = io_in_decodeIn_valid & ~currentState;	// @[Vsplit.scala:145:31, :148:{45,61}]
  wire         exuReady = ~io_lsuStallSplit & ~io_iexNeedStall;	// @[Vsplit.scala:153:{27,45,48}]
  wire         _lsrc0_inc_T_2 = io_in_decodeIn_bits_vCtrl_funct3 == 3'h2;	// @[Mux.scala:81:58, Vsplit.scala:194:45]
  wire         v_ext_out = io_in_decodeIn_bits_vCtrl_alu & _lsrc0_inc_T_2 & io_in_decodeIn_bits_vCtrl_funct6 == 6'h12;	// @[Vsplit.scala:194:{45,58,73}]
  wire         ldst = io_in_decodeIn_bits_vCtrl_load | io_in_decodeIn_bits_vCtrl_store;	// @[Bundle.scala:102:21]
  wire         isfloat = ~ldst & (io_in_decodeIn_bits_vCtrl_funct3 == 3'h5 | io_in_decodeIn_bits_vCtrl_funct3 == 3'h1);	// @[Bundle.scala:102:21, Mux.scala:81:58, Vsplit.scala:196:{19,32,48,61,76}]
  wire         _log2DestElen_T_4 = io_in_decodeIn_bits_eewEmulInfo_veewVd == 3'h2;	// @[Mux.scala:81:58, Vsplit.scala:200:63]
  wire         _log2DestElen_T_6 = io_in_decodeIn_bits_eewEmulInfo_veewVd == 3'h3;	// @[Mux.scala:81:58, Vsplit.scala:201:63]
  wire         ldstCtrl_segment = (|(io_in_decodeIn_bits_vCtrl_funct6[5:3])) & ~ldstCtrl_wholeReg;	// @[VLsuBundle.scala:64:20, :73:{24,32,35}, :74:43]
  assign ldstCtrl_wholeReg = io_in_decodeIn_bits_vCtrl_lsrc_1 == 5'h8 & io_in_decodeIn_bits_vCtrl_funct6[1:0] == 2'h0;	// @[VLsuBundle.scala:65:21, :68:28, :74:{28,43}, Vsplit.scala:576:47]
  wire [3:0]   nfield = {1'h0, io_in_decodeIn_bits_vCtrl_funct6[5:3]} + 4'h1;	// @[VLsuBundle.scala:64:20, Vsplit.scala:139:28, :205:36, :525:24]
  wire [3:0]   mUopMergeAttrIn_bits_permExpdLen = {~(io_in_decodeIn_bits_vInfo_vlmul[2]) & io_in_decodeIn_bits_vInfo_vlmul[1] & io_in_decodeIn_bits_vInfo_vlmul[0], ~(io_in_decodeIn_bits_vInfo_vlmul[2]) & io_in_decodeIn_bits_vInfo_vlmul[1] & ~(io_in_decodeIn_bits_vInfo_vlmul[0]), ~(io_in_decodeIn_bits_vInfo_vlmul[2]) & ~(io_in_decodeIn_bits_vInfo_vlmul[1]) & io_in_decodeIn_bits_vInfo_vlmul[0], ~(io_in_decodeIn_bits_vInfo_vlmul[1]) & ~(io_in_decodeIn_bits_vInfo_vlmul[0]) | io_in_decodeIn_bits_vInfo_vlmul[2]};	// @[Cat.scala:33:92, VecUtil.scala:26:{14,20,24,27,33,37,45}, :27:{14,27,37}, :28:{14,36,39}, :29:{14,36}]
  wire         _io_out_toRegFileRead_rfReadEn_3_T = io_in_decodeIn_bits_vCtrl_ldestVal | io_in_decodeIn_bits_vCtrl_store;	// @[Vsplit.scala:209:37]
  wire [3:0]   emulVd = _io_out_toRegFileRead_rfReadEn_3_T ? io_in_decodeIn_bits_eewEmulInfo_emulVd : 4'h0;	// @[Vsplit.scala:209:{22,37}]
  wire [3:0]   emulVs1 = io_in_decodeIn_bits_vCtrl_lsrcVal_0 ? io_in_decodeIn_bits_eewEmulInfo_emulVs1 : 4'h0;	// @[Vsplit.scala:209:22, :210:22]
  wire [3:0]   emulVs2 = io_in_decodeIn_bits_vCtrl_lsrcVal_1 ? io_in_decodeIn_bits_eewEmulInfo_emulVs2 : 4'h0;	// @[Vsplit.scala:209:22, :211:22]
  reg  [7:0]   expdLenReg;	// @[Vsplit.scala:215:27]
  wire         _vmv_vfmv_T_5 = io_in_decodeIn_bits_vCtrl_funct6 == 6'h10;	// @[Vsplit.scala:224:45]
  wire         _viota_T_2 = io_in_decodeIn_bits_vCtrl_lsrc_0 == 5'h10;	// @[VLsuBundle.scala:72:23, Vsplit.scala:224:77]
  wire         vcpop = io_in_decodeIn_bits_vCtrl_mask & _vmv_vfmv_T_5 & _viota_T_2;	// @[Vsplit.scala:224:{45,61,77}]
  wire         _T_32 = io_in_decodeIn_bits_vCtrl_funct6 == 6'h14;	// @[Vsplit.scala:225:45]
  wire         vid = io_in_decodeIn_bits_vCtrl_mask & _T_32 & io_in_decodeIn_bits_vCtrl_lsrc_0 == 5'h11;	// @[Vsplit.scala:225:45, :226:{61,77}]
  wire         _expdLenIn_T_1 = vcpop | io_in_decodeIn_bits_vCtrl_mask & _T_32 & _viota_T_2;	// @[Vsplit.scala:224:{61,77}, :225:{45,61}, :227:27]
  wire         vmaskExcp = _expdLenIn_T_1 | vid;	// @[Vsplit.scala:226:61, :227:{27,36}]
  wire [7:0]   _GEN = {4'h0, nfield};	// @[Vsplit.scala:205:36, :209:22, :230:24]
  wire [7:0]   segIndex = idx % _GEN;	// @[Vsplit.scala:141:32, :230:24]
  wire         _expdLenLdSt_T = ldst & ldstCtrl_segment;	// @[Bundle.scala:102:21, VLsuBundle.scala:73:32, Vsplit.scala:231:29]
  wire [7:0]   uopIdx = _expdLenLdSt_T ? (idx - {4'h0, segIndex[3:0]}) / _GEN : idx;	// @[Vsplit.scala:141:32, :209:22, :230:24, :231:{23,29,55,66}]
  wire [2:0]   log2DestElen = _log2DestElen_T_6 ? 3'h1 : _log2DestElen_T_4 ? 3'h2 : io_in_decodeIn_bits_eewEmulInfo_veewVd == 3'h1 ? 3'h3 : 3'h4;	// @[Mux.scala:81:58, Vsplit.scala:199:63, :200:63, :201:63]
  wire [7:0]   _ldest_inc_T_1 = uopIdx >> log2DestElen;	// @[Mux.scala:81:58, Vsplit.scala:231:23, :255:51]
  wire [3:0]   _T_10 = emulVs2 / emulVd;	// @[Vsplit.scala:209:22, :211:22, :260:19]
  wire [3:0]   _T_12 = emulVd / emulVs2;	// @[Vsplit.scala:209:22, :211:22, :260:46]
  wire         _T_36 = io_in_decodeIn_bits_vCtrl_redu | io_in_decodeIn_bits_floatRed;	// @[Vsplit.scala:275:25]
  wire [7:0]   _lsrc1_inc_T_1 = idx / _GEN >> (io_in_decodeIn_bits_eewEmulInfo_veewVs2 == 3'h3 ? 3'h1 : io_in_decodeIn_bits_eewEmulInfo_veewVs2 == 3'h2 ? 3'h2 : io_in_decodeIn_bits_eewEmulInfo_veewVs2 == 3'h1 ? 3'h3 : 3'h4);	// @[Mux.scala:81:{58,61}, Vsplit.scala:141:32, :230:24, :281:{25,35}]
  wire [7:0]   _GEN_0 = {5'h0, _T_10 == 4'h8 | _T_12 == 4'h8 ? 3'h3 : _T_10 == 4'h4 | _T_12 == 4'h4 ? 3'h2 : {2'h0, _T_10 == 4'h2 | _T_12 == 4'h2}};	// @[Mux.scala:81:{58,61}, VLsuBundle.scala:74:28, Vsplit.scala:260:{19,28,36,46,56,64}, :261:22, :262:{33,41,61,69}, :263:22, :264:{33,41,61,69}, :265:22, :267:22, :283:40, :576:47]
  wire [7:0]   _GEN_1 = {4'h0, emulVs2};	// @[Vsplit.scala:209:22, :211:22, :283:57]
  wire [7:0]   _lsrc1_inc_T_3 = (idx >> _GEN_0) % _GEN_1;	// @[Vsplit.scala:141:32, :283:{40,57}]
  wire [7:0]   _lsrc1_inc_T_4 = idx % _GEN_1;	// @[Vsplit.scala:141:32, :283:{57,72}]
  wire [6:0]   _GEN_2 = {5'h0, emulVd == 4'h8 ? 2'h3 : emulVd == 4'h4 ? 2'h2 : {1'h0, emulVd == 4'h2 | emulVd != 4'h1}};	// @[Mux.scala:81:{58,61}, VLsuBundle.scala:74:28, Vsplit.scala:139:28, :194:45, :201:63, :209:22, :299:30, :525:24, :576:47]
  wire [6:0]   _ldest_inc_T = {3'h0, segIndex[3:0]} << _GEN_2;	// @[Vsplit.scala:230:24, :299:30, :576:47]
  wire [3:0]   _GEN_3 = _ldest_inc_T[3:0] + _ldest_inc_T_1[3:0];	// @[Vsplit.scala:255:51, :299:{30,45}]
  wire         _T_35 = ldst & io_in_decodeIn_bits_vCtrl_funct6[0];	// @[Bundle.scala:102:21, VLsuBundle.scala:65:21, :71:24, Vsplit.scala:300:22]
  wire [7:0]   _ldest_inc_T_4 = idx >> _GEN_0;	// @[Vsplit.scala:141:32, :283:40, :301:38]
  wire [3:0]   _GEN_4 = emulVs2 >= emulVd ? _ldest_inc_T_4[3:0] : idx[3:0];	// @[Vsplit.scala:141:32, :209:22, :211:22, :257:26, :301:{23,38}]
  wire         _T_38 = _T_36 | io_in_decodeIn_bits_vCtrl_narrow_to_1 | vcpop;	// @[Vsplit.scala:224:61, :275:25, :304:60]
  wire [3:0]   ldest_inc = _expdLenLdSt_T ? _GEN_3 : _T_35 ? _GEN_4 : io_in_decodeIn_bits_vCtrl_narrow ? idx[4:1] : _T_38 ? 4'h0 : idx[3:0];	// @[Vsplit.scala:141:32, :209:22, :231:29, :276:61, :298:37, :299:{17,45}, :300:{22,42}, :301:{17,23}, :302:29, :303:17, :304:{60,70}, :305:17, :307:17]
  wire         mUopMergeAttrIn_bits_floatRegWriteEn = io_in_decodeIn_bits_vCtrl_rdVal & isfloat;	// @[Vsplit.scala:196:32, :331:57]
  wire [4:0]   mUopMergeAttrIn_bits_ldest = io_in_decodeIn_bits_vCtrl_ldest + {1'h0, ldest_inc};	// @[Vsplit.scala:139:28, :298:37, :299:17, :300:42, :332:57]
  reg  [3:0]   ldest_inc_last;	// @[Vsplit.scala:359:33]
  wire         _io_scoreBoardSetIO_setEn_T_2 = ldstCtrl_segment & (|({7'h0, uopIdx} - ({7'h0, _ldest_inc_T_1} << log2DestElen)));	// @[Mux.scala:81:58, VLsuBundle.scala:73:32, Vsplit.scala:231:23, :255:{41,51,67,84}, :361:27, :576:47]
  wire [7:0]   vs1Idx = {3'h0, io_in_decodeIn_bits_vCtrl_lsrc_0} + (_T_36 | io_in_decodeIn_bits_vCtrl_funct6 == 6'h17 & _lsrc0_inc_T_2 | vmaskExcp ? 8'h0 : io_in_decodeIn_bits_vCtrl_widen | io_in_decodeIn_bits_vCtrl_widen2 | io_in_decodeIn_bits_vCtrl_narrow ? {1'h0, idx[7:1]} : idx);	// @[Vsplit.scala:139:28, :141:32, :194:45, :227:36, :275:{14,25,53,69,93}, :276:{14,41,61}, :378:35, :491:53, :576:47]
  wire [4:0]   vs2Idx = io_in_decodeIn_bits_vCtrl_lsrc_1 + {2'h0, _expdLenLdSt_T & io_in_decodeIn_bits_vCtrl_funct6[0] ? _lsrc1_inc_T_1[2:0] : ldst & io_in_decodeIn_bits_vCtrl_funct6[0] ? (emulVs2 < emulVd ? _lsrc1_inc_T_3[2:0] : _lsrc1_inc_T_4[2:0]) : io_in_decodeIn_bits_vCtrl_widen & ~io_in_decodeIn_bits_vCtrl_redu & ~io_in_decodeIn_bits_floatRed | v_ext_out & (&(io_in_decodeIn_bits_vCtrl_lsrc_0[2:1])) ? idx[3:1] : v_ext_out & io_in_decodeIn_bits_vCtrl_lsrc_0[2:1] == 2'h2 ? idx[4:2] : v_ext_out & io_in_decodeIn_bits_vCtrl_lsrc_0[2:1] == 2'h1 ? idx[5:3] : _T_32 | vmaskExcp ? 3'h0 : idx[2:0]};	// @[Bundle.scala:102:21, VLsuBundle.scala:65:21, :71:24, Vsplit.scala:141:32, :194:{45,58}, :209:22, :211:22, :225:45, :227:36, :231:29, :258:26, :276:61, :280:{35,56}, :281:{17,35}, :282:{22,42}, :283:{17,23,57,72}, :284:{30,41,44,54,67,82,88,97}, :285:17, :286:{27,48,57}, :287:{17,24}, :288:{27,48,57}, :289:{17,24}, :290:{45,59}, :291:17, :293:17, :379:35, :576:47]
  wire         regConf = ~(~io_in_decodeIn_bits_vCtrl_lsrcVal_0 | vs1Idx == {3'h0, mUopMergeAttrIn_bits_ldest}) & (io_in_decodeIn_bits_vCtrl_perm ? io_scoreBoardReadIO_readBypassed1N : io_scoreBoardReadIO_readBypassed1) | io_in_decodeIn_bits_vCtrl_lsrcVal_1 & (io_in_decodeIn_bits_vCtrl_perm ? io_scoreBoardReadIO_readBypassed2N : io_scoreBoardReadIO_readBypassed2) | _io_out_toRegFileRead_rfReadEn_3_T & ~(_io_scoreBoardSetIO_setEn_T_2 | ldest_inc == ldest_inc_last) & (io_in_decodeIn_bits_vCtrl_perm ? io_scoreBoardReadIO_readBypassed3N : io_scoreBoardReadIO_readBypassed3) | ~(io_in_decodeIn_bits_vCtrl_vm | ~io_scoreBoardReadIO_readBypassed4);	// @[Vsplit.scala:209:37, :298:37, :299:17, :300:42, :332:57, :359:33, :361:{27,54}, :362:19, :363:{26,45}, :376:54, :378:35, :391:{10,21,31,58}, :392:23, :393:26, :394:23, :395:52, :401:21, :402:23, :403:26, :404:23, :405:52, :411:21, :412:23, :413:26, :414:23, :415:52, :421:22, :422:23, :423:{17,52}, :424:23, :426:23, :431:67, :576:47]
  reg          io_scoreBoardSetIO_setEn_REG;	// @[Vsplit.scala:442:45]
  reg          io_scoreBoardSetIO_setMultiEn_REG;	// @[Vsplit.scala:443:45]
  reg  [3:0]   io_scoreBoardSetIO_setNum_REG;	// @[Vsplit.scala:444:45]
  reg  [4:0]   io_scoreBoardSetIO_setAddr_REG;	// @[Vsplit.scala:445:45]
  wire         hasExcp = io_in_decodeIn_bits_vCtrl_illegal | io_vLSUXcpt_exception_vld | io_vLSUXcpt_update_vl;	// @[Vsplit.scala:450:61]
  wire [7:0]   _mUopIn_bits_uop_uopEnd_T_1 = idx + 8'h1;	// @[Vsplit.scala:141:32, :454:38, :538:48]
  wire         mUopMergeAttrIn_bits_muopEnd = _mUopIn_bits_uop_uopEnd_T_1 == expdLen;	// @[Vsplit.scala:454:{38,44}, :530:19]
  wire         mUopIn_valid = (instDecodeIn | currentState) & ~regConf & ~hasExcp;	// @[Vsplit.scala:145:31, :148:45, :431:67, :450:61, :503:{24,55,64,66}]
  wire [11:0]  _expdLenSeg_T_2 = {4'h0, io_in_decodeIn_bits_vInfo_vl} * {8'h0, nfield};	// @[Vsplit.scala:205:36, :209:22, :491:53, :514:39]
  wire [7:0]   expdLenSeg = _expdLenSeg_T_2 < 12'h2 ? 8'h1 : _expdLenSeg_T_2[7:0];	// @[Vsplit.scala:514:{23,28,39}, :538:48]
  wire [7:0]   _expdLenLdSt_T_3 = {4'h0, ldstCtrl_wholeReg | ~(ldst & io_in_decodeIn_bits_vCtrl_funct6[0]) | io_in_decodeIn_bits_eewEmulInfo_emulVd >= io_in_decodeIn_bits_eewEmulInfo_emulVs2 ? io_in_decodeIn_bits_eewEmulInfo_emulVd : io_in_decodeIn_bits_eewEmulInfo_emulVs2};	// @[Bundle.scala:102:21, VLsuBundle.scala:65:21, :71:24, :74:43, Vsplit.scala:209:22, :515:35, :517:28, :518:{28,34}]
  wire [7:0]   _GEN_5 = {4'h0, io_in_decodeIn_bits_vCtrl_perm | io_in_decodeIn_bits_vCtrl_alu & io_in_decodeIn_bits_vCtrl_funct3[0] != io_in_decodeIn_bits_vCtrl_funct3[1] & _vmv_vfmv_T_5 ? 4'h1 : _expdLenIn_T_1 | vid ? mUopMergeAttrIn_bits_permExpdLen : emulVd >= emulVs1 ? (emulVd >= emulVs2 ? emulVd : emulVs2) : emulVs1 >= emulVs2 ? emulVs1 : emulVs2};	// @[Bundle.scala:104:{19,23,33}, Cat.scala:33:92, Vsplit.scala:209:22, :210:22, :211:22, :224:45, :226:61, :227:27, :520:{26,34,49,57,90,99}, :521:45, :524:21, :525:{24,35,57,73}]
  assign expdLen = instDecodeIn ? (ldst ? (_expdLenLdSt_T ? expdLenSeg : _expdLenLdSt_T_3) : _GEN_5) : expdLenReg;	// @[Bundle.scala:102:21, Vsplit.scala:148:45, :215:27, :231:29, :514:23, :516:23, :517:28, :524:21, :530:19]
  wire         _GEN_6 = ~hasExcp & (instDecodeIn & (regConf | ~pipeRegReady) | ~(instDecodeIn & expdLen == 8'h1) & instDecodeIn & expdLen != 8'h1);	// @[Vsplit.scala:148:45, :431:67, :450:61, :530:19, :534:26, :535:34, :536:{37,49,52,67}, :537:34, :538:{37,48,56}, :539:34, :540:{48,56}, :579:37]
  wire         _GEN_7 = currentState & ~hasExcp & (regConf | ~pipeRegReady | _mUopIn_bits_uop_uopEnd_T_1 != expdLen & _mUopIn_bits_uop_uopEnd_T_1 < expdLen);	// @[Vsplit.scala:145:31, :146:39, :431:67, :450:61, :454:38, :530:19, :532:25, :534:26, :535:34, :536:67, :547:26, :549:{35,49}, :550:34, :551:{37,50}, :552:34, :553:{36,46}, :579:37]
  wire         currentStateNext = currentState ? _GEN_7 : _GEN_6;	// @[Vsplit.scala:145:31, :146:39, :532:25, :534:26, :535:34, :536:67, :547:26]
  reg          validReg;	// @[Vsplit.scala:575:34]
  reg  [5:0]   bitsReg_uop_ctrl_funct6;	// @[Vsplit.scala:576:34]
  reg  [2:0]   bitsReg_uop_ctrl_funct3;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_vm;	// @[Vsplit.scala:576:34]
  reg  [4:0]   bitsReg_uop_ctrl_vs1_imm;	// @[Vsplit.scala:576:34]
  reg  [4:0]   bitsReg_uop_ctrl_vs2;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_widen;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_widen2;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_narrow;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_narrow_to_1;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_load;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_store;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_alu;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_mul;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_fp;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_div;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_redu;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_mask;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_perm;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_floatRed;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_vGatherEi16EEW8;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_vGatherEi16EEW32;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_ctrl_vGatherEi16EEW64;	// @[Vsplit.scala:576:34]
  reg  [4:0]   bitsReg_uop_ctrl_lsrc_0;	// @[Vsplit.scala:576:34]
  reg  [4:0]   bitsReg_uop_ctrl_lsrc_1;	// @[Vsplit.scala:576:34]
  reg  [4:0]   bitsReg_uop_ctrl_ldest;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_info_ma;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_info_ta;	// @[Vsplit.scala:576:34]
  reg  [2:0]   bitsReg_uop_info_vsew;	// @[Vsplit.scala:576:34]
  reg  [2:0]   bitsReg_uop_info_vlmul;	// @[Vsplit.scala:576:34]
  reg  [7:0]   bitsReg_uop_info_vl;	// @[Vsplit.scala:576:34]
  reg  [6:0]   bitsReg_uop_info_vstart;	// @[Vsplit.scala:576:34]
  reg  [1:0]   bitsReg_uop_info_vxrm;	// @[Vsplit.scala:576:34]
  reg  [2:0]   bitsReg_uop_info_frm;	// @[Vsplit.scala:576:34]
  reg  [6:0]   bitsReg_uop_uopIdx;	// @[Vsplit.scala:576:34]
  reg  [2:0]   bitsReg_uop_segIndex;	// @[Vsplit.scala:576:34]
  reg          bitsReg_uop_uopEnd;	// @[Vsplit.scala:576:34]
  reg  [63:0]  bitsReg_scalar_opnd_1;	// @[Vsplit.scala:576:34]
  reg  [63:0]  bitsReg_scalar_opnd_2;	// @[Vsplit.scala:576:34]
  reg  [127:0] bitsReg_uopRegInfo_vs1;	// @[Vsplit.scala:576:34]
  reg  [127:0] bitsReg_uopRegInfo_vs2;	// @[Vsplit.scala:576:34]
  reg  [127:0] bitsReg_uopRegInfo_mask;	// @[Vsplit.scala:576:34]
  reg  [127:0] bitsReg_uopRegInfo_old_vd;	// @[Vsplit.scala:576:34]
  reg          mergeAttrReg_scalarRegWriteEn;	// @[Vsplit.scala:577:34]
  reg          mergeAttrReg_floatRegWriteEn;	// @[Vsplit.scala:577:34]
  reg          mergeAttrReg_rfWriteEn;	// @[Vsplit.scala:577:34]
  reg  [4:0]   mergeAttrReg_ldest;	// @[Vsplit.scala:577:34]
  reg          mergeAttrReg_muopEnd;	// @[Vsplit.scala:577:34]
  reg  [3:0]   mergeAttrReg_permExpdLen;	// @[Vsplit.scala:577:34]
  reg  [4:0]   mergeAttrReg_regDstIdx;	// @[Vsplit.scala:577:34]
  reg  [3:0]   mergeAttrReg_regCount;	// @[Vsplit.scala:577:34]
  reg  [2:0]   mergeAttrReg_regBackWidth;	// @[Vsplit.scala:577:34]
  reg  [3:0]   mergeAttrReg_regWriteMuopIdx;	// @[Vsplit.scala:577:34]
  assign pipeRegReady = exuReady | ~validReg;	// @[Vsplit.scala:153:45, :575:34, :579:{37,41}]
  assign fire2PipeReg = pipeRegReady & mUopIn_valid;	// @[Vsplit.scala:503:64, :579:37, :580:41]
  wire         _muopOutValid_T = io_vLSUXcpt_exception_vld | io_vLSUXcpt_update_vl;	// @[Vsplit.scala:590:37]
  wire         muopOutValid = exuReady & validReg & ~_muopOutValid_T;	// @[Vsplit.scala:153:45, :575:34, :590:37, :600:{45,48}]
  wire         vGatherEi16 = io_in_decodeIn_bits_vCtrl_perm & io_in_decodeIn_bits_vCtrl_funct6 == 6'hE & io_in_decodeIn_bits_vCtrl_funct3 == 3'h0;	// @[Vsplit.scala:197:{48,64,79}, :576:47]
  wire [6:0]   _mUopMergeAttrIn_bits_regCount_T_1 = {3'h0, nfield} << _GEN_2;	// @[Vsplit.scala:205:36, :299:30, :346:79, :576:47]
  wire         _io_scoreBoardSetIO_setMultiEn_T = fire2PipeReg & io_in_decodeIn_bits_vCtrl_ldestVal;	// @[Vsplit.scala:442:59, :580:41]
  always @(posedge clock) begin
    if (io_in_regFileIn_readVld_0)
      uopRegInfo_0_vs1 <= io_in_regFileIn_readData_0;	// @[Vsplit.scala:139:28]
    if (io_in_regFileIn_readVld_1)
      uopRegInfo_0_vs2 <= io_in_regFileIn_readData_1;	// @[Vsplit.scala:139:28]
    if (io_in_regFileIn_readVld_2)
      uopRegInfo_0_mask <= io_in_regFileIn_readData_2;	// @[Vsplit.scala:139:28]
    if (io_in_regFileIn_readVld_3)
      uopRegInfo_0_old_vd <= io_in_regFileIn_readData_3;	// @[Vsplit.scala:139:28]
    if (instDecodeIn) begin	// @[Vsplit.scala:148:45]
      if (ldst) begin	// @[Bundle.scala:102:21]
        if (_expdLenLdSt_T)	// @[Vsplit.scala:231:29]
          expdLenReg <= expdLenSeg;	// @[Vsplit.scala:215:27, :514:23]
        else	// @[Vsplit.scala:231:29]
          expdLenReg <= _expdLenLdSt_T_3;	// @[Vsplit.scala:215:27, :517:28]
      end
      else	// @[Bundle.scala:102:21]
        expdLenReg <= _GEN_5;	// @[Vsplit.scala:215:27, :524:21]
    end
    io_scoreBoardSetIO_setEn_REG <= _io_scoreBoardSetIO_setMultiEn_T & (~io_in_decodeIn_bits_vCtrl_perm | ~_io_scoreBoardSetIO_setEn_T_2);	// @[Vsplit.scala:361:27, :442:{45,59,76,80,91,94}]
    io_scoreBoardSetIO_setMultiEn_REG <= _io_scoreBoardSetIO_setMultiEn_T & io_in_decodeIn_bits_vCtrl_perm;	// @[Vsplit.scala:442:59, :443:{45,76}]
    if (_io_out_toRegFileRead_rfReadEn_3_T)	// @[Vsplit.scala:209:37]
      io_scoreBoardSetIO_setNum_REG <= io_in_decodeIn_bits_eewEmulInfo_emulVd;	// @[Vsplit.scala:444:45]
    else	// @[Vsplit.scala:209:37]
      io_scoreBoardSetIO_setNum_REG <= 4'h0;	// @[Vsplit.scala:209:22, :444:45]
    io_scoreBoardSetIO_setAddr_REG <= mUopMergeAttrIn_bits_ldest;	// @[Vsplit.scala:332:57, :445:45]
    if (reset) begin
      idx <= 8'h0;	// @[Vsplit.scala:141:32, :491:53]
      currentState <= 1'h0;	// @[Vsplit.scala:139:28, :145:31]
      ldest_inc_last <= 4'hF;	// @[Vsplit.scala:359:33]
      validReg <= 1'h0;	// @[Vsplit.scala:139:28, :575:34]
      bitsReg_uop_ctrl_funct6 <= 6'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_ctrl_funct3 <= 3'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_ctrl_vm <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_vs1_imm <= 5'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_ctrl_vs2 <= 5'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_ctrl_widen <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_widen2 <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_narrow <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_narrow_to_1 <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_load <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_store <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_alu <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_mul <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_fp <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_div <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_redu <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_mask <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_perm <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_floatRed <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_vGatherEi16EEW8 <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_vGatherEi16EEW32 <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_vGatherEi16EEW64 <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_ctrl_lsrc_0 <= 5'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_ctrl_lsrc_1 <= 5'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_ctrl_ldest <= 5'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_info_ma <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_info_ta <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_uop_info_vsew <= 3'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_info_vlmul <= 3'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_info_vl <= 8'h0;	// @[Vsplit.scala:491:53, :576:34]
      bitsReg_uop_info_vstart <= 7'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_info_vxrm <= 2'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_info_frm <= 3'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_uopIdx <= 7'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_segIndex <= 3'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uop_uopEnd <= 1'h0;	// @[Vsplit.scala:139:28, :576:34]
      bitsReg_scalar_opnd_1 <= 64'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_scalar_opnd_2 <= 64'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uopRegInfo_vs1 <= 128'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uopRegInfo_vs2 <= 128'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uopRegInfo_mask <= 128'h0;	// @[Vsplit.scala:576:{34,47}]
      bitsReg_uopRegInfo_old_vd <= 128'h0;	// @[Vsplit.scala:576:{34,47}]
      mergeAttrReg_scalarRegWriteEn <= 1'h0;	// @[Vsplit.scala:139:28, :577:34]
      mergeAttrReg_floatRegWriteEn <= 1'h0;	// @[Vsplit.scala:139:28, :577:34]
      mergeAttrReg_rfWriteEn <= 1'h0;	// @[Vsplit.scala:139:28, :577:34]
      mergeAttrReg_ldest <= 5'h0;	// @[Vsplit.scala:576:47, :577:34]
      mergeAttrReg_muopEnd <= 1'h0;	// @[Vsplit.scala:139:28, :577:34]
      mergeAttrReg_permExpdLen <= 4'h0;	// @[Vsplit.scala:209:22, :577:34]
      mergeAttrReg_regDstIdx <= 5'h0;	// @[Vsplit.scala:576:47, :577:34]
      mergeAttrReg_regCount <= 4'h0;	// @[Vsplit.scala:209:22, :577:34]
      mergeAttrReg_regBackWidth <= 3'h0;	// @[Vsplit.scala:576:47, :577:34]
      mergeAttrReg_regWriteMuopIdx <= 4'h0;	// @[Vsplit.scala:209:22, :577:34]
    end
    else begin
      if (hasExcp | ~currentStateNext)	// @[Vsplit.scala:450:61, :532:25, :534:26, :561:{18,38}]
        idx <= 8'h0;	// @[Vsplit.scala:141:32, :491:53]
      else if ((instDecodeIn | currentState) & ~regConf & pipeRegReady & ~hasExcp)	// @[Vsplit.scala:145:31, :148:45, :431:67, :450:61, :503:{55,66}, :563:{30,85}, :579:37]
        idx <= _mUopIn_bits_uop_uopEnd_T_1;	// @[Vsplit.scala:141:32, :454:38]
      if (currentState)	// @[Vsplit.scala:145:31]
        currentState <= _GEN_7;	// @[Vsplit.scala:145:31, :146:39, :532:25, :547:26]
      else	// @[Vsplit.scala:145:31]
        currentState <= _GEN_6;	// @[Vsplit.scala:145:31, :534:26, :535:34, :536:67]
      if (mUopMergeAttrIn_bits_muopEnd & fire2PipeReg)	// @[Vsplit.scala:372:33, :454:44, :580:41]
        ldest_inc_last <= 4'hF;	// @[Vsplit.scala:359:33]
      else if (~mUopMergeAttrIn_bits_muopEnd & fire2PipeReg) begin	// @[Vsplit.scala:369:{10,34}, :454:44, :580:41]
        if (_expdLenLdSt_T)	// @[Vsplit.scala:231:29]
          ldest_inc_last <= _GEN_3;	// @[Vsplit.scala:299:45, :359:33]
        else if (_T_35)	// @[Vsplit.scala:300:22]
          ldest_inc_last <= _GEN_4;	// @[Vsplit.scala:301:23, :359:33]
        else if (io_in_decodeIn_bits_vCtrl_narrow)
          ldest_inc_last <= idx[4:1];	// @[Vsplit.scala:141:32, :276:61, :303:17, :359:33]
        else if (_T_38)	// @[Vsplit.scala:304:60]
          ldest_inc_last <= 4'h0;	// @[Vsplit.scala:209:22, :359:33]
        else	// @[Vsplit.scala:304:60]
          ldest_inc_last <= idx[3:0];	// @[Vsplit.scala:141:32, :359:33]
      end
      validReg <= ~_muopOutValid_T & (pipeRegReady ? mUopIn_valid : validReg);	// @[Vsplit.scala:503:64, :575:34, :579:37, :584:25, :585:18, :590:{37,62}, :591:18]
      if (pipeRegReady) begin	// @[Vsplit.scala:579:37]
        bitsReg_uop_ctrl_funct6 <= io_in_decodeIn_bits_vCtrl_funct6;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_funct3 <= io_in_decodeIn_bits_vCtrl_funct3;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_vm <= io_in_decodeIn_bits_vCtrl_vm;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_vs1_imm <= io_in_decodeIn_bits_vCtrl_lsrc_0;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_vs2 <= io_in_decodeIn_bits_vCtrl_lsrc_1;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_widen <= io_in_decodeIn_bits_vCtrl_widen;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_widen2 <= io_in_decodeIn_bits_vCtrl_widen2;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_narrow <= io_in_decodeIn_bits_vCtrl_narrow;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_narrow_to_1 <= io_in_decodeIn_bits_vCtrl_narrow_to_1;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_load <= io_in_decodeIn_bits_vCtrl_load;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_store <= io_in_decodeIn_bits_vCtrl_store;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_alu <= io_in_decodeIn_bits_vCtrl_alu;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_mul <= io_in_decodeIn_bits_vCtrl_mul;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_fp <= io_in_decodeIn_bits_vCtrl_fp;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_div <= io_in_decodeIn_bits_vCtrl_div;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_redu <= io_in_decodeIn_bits_vCtrl_redu;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_mask <= io_in_decodeIn_bits_vCtrl_mask;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_perm <= io_in_decodeIn_bits_vCtrl_perm;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_floatRed <= io_in_decodeIn_bits_floatRed;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_vGatherEi16EEW8 <= vGatherEi16 & io_in_decodeIn_bits_eewEmulInfo_veewVd == 3'h0;	// @[Vsplit.scala:197:64, :198:{40,63}, :576:{34,47}]
        bitsReg_uop_ctrl_vGatherEi16EEW32 <= vGatherEi16 & _log2DestElen_T_4;	// @[Vsplit.scala:197:64, :200:{40,63}, :576:34]
        bitsReg_uop_ctrl_vGatherEi16EEW64 <= vGatherEi16 & _log2DestElen_T_6;	// @[Vsplit.scala:197:64, :201:{40,63}, :576:34]
        bitsReg_uop_ctrl_lsrc_0 <= io_in_decodeIn_bits_vCtrl_lsrc_0;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_lsrc_1 <= io_in_decodeIn_bits_vCtrl_lsrc_1;	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_ldest <= io_in_decodeIn_bits_vCtrl_ldest;	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_ma <= io_in_decodeIn_bits_vInfo_vma;	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_ta <= io_in_decodeIn_bits_vInfo_vta;	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_vsew <= io_in_decodeIn_bits_vInfo_vsew;	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_vlmul <= io_in_decodeIn_bits_vInfo_vlmul;	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_vl <= io_in_decodeIn_bits_vInfo_vl;	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_vstart <= io_in_decodeIn_bits_vInfo_vstart;	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_vxrm <= io_in_decodeIn_bits_vInfo_vxrm;	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_frm <= io_in_decodeIn_bits_vInfo_frm;	// @[Vsplit.scala:576:34]
        bitsReg_uop_uopIdx <= uopIdx[6:0];	// @[Vsplit.scala:231:23, :452:30, :576:34]
        bitsReg_uop_segIndex <= segIndex[2:0];	// @[Vsplit.scala:230:24, :453:30, :576:34]
        bitsReg_uop_uopEnd <= mUopMergeAttrIn_bits_muopEnd;	// @[Vsplit.scala:454:44, :576:34]
        if (isfloat)	// @[Vsplit.scala:196:32]
          bitsReg_scalar_opnd_1 <= io_in_decodeIn_bits_float_opnd_1;	// @[Vsplit.scala:576:34]
        else	// @[Vsplit.scala:196:32]
          bitsReg_scalar_opnd_1 <= io_in_decodeIn_bits_scalar_opnd_1;	// @[Vsplit.scala:576:34]
        bitsReg_scalar_opnd_2 <= io_in_decodeIn_bits_scalar_opnd_2;	// @[Vsplit.scala:576:34]
        if (io_in_regFileIn_readVld_0)
          bitsReg_uopRegInfo_vs1 <= io_in_regFileIn_readData_0;	// @[Vsplit.scala:576:34]
        else
          bitsReg_uopRegInfo_vs1 <= uopRegInfo_0_vs1;	// @[Vsplit.scala:139:28, :576:34]
        if (io_in_regFileIn_readVld_1)
          bitsReg_uopRegInfo_vs2 <= io_in_regFileIn_readData_1;	// @[Vsplit.scala:576:34]
        else
          bitsReg_uopRegInfo_vs2 <= uopRegInfo_0_vs2;	// @[Vsplit.scala:139:28, :576:34]
        if (io_in_regFileIn_readVld_2)
          bitsReg_uopRegInfo_mask <= io_in_regFileIn_readData_2;	// @[Vsplit.scala:576:34]
        else
          bitsReg_uopRegInfo_mask <= uopRegInfo_0_mask;	// @[Vsplit.scala:139:28, :576:34]
        if (io_in_regFileIn_readVld_3)
          bitsReg_uopRegInfo_old_vd <= io_in_regFileIn_readData_3;	// @[Vsplit.scala:576:34]
        else
          bitsReg_uopRegInfo_old_vd <= uopRegInfo_0_old_vd;	// @[Vsplit.scala:139:28, :576:34]
        mergeAttrReg_scalarRegWriteEn <= io_in_decodeIn_bits_vCtrl_rdVal & ~isfloat;	// @[Vsplit.scala:196:32, :330:{57,60}, :577:34]
        mergeAttrReg_floatRegWriteEn <= mUopMergeAttrIn_bits_floatRegWriteEn;	// @[Vsplit.scala:331:57, :577:34]
        mergeAttrReg_rfWriteEn <= io_in_decodeIn_bits_vCtrl_ldestVal;	// @[Vsplit.scala:577:34]
        mergeAttrReg_ldest <= mUopMergeAttrIn_bits_ldest;	// @[Vsplit.scala:332:57, :577:34]
        mergeAttrReg_muopEnd <= mUopMergeAttrIn_bits_muopEnd;	// @[Vsplit.scala:454:44, :577:34]
        mergeAttrReg_permExpdLen <= mUopMergeAttrIn_bits_permExpdLen;	// @[Cat.scala:33:92, Vsplit.scala:577:34]
        mergeAttrReg_regDstIdx <= io_in_decodeIn_bits_vCtrl_ldest;	// @[Vsplit.scala:577:34]
        mergeAttrReg_regCount <= io_in_decodeIn_bits_vInfo_vl == 8'h0 ? 4'h1 : _mUopMergeAttrIn_bits_regCount_T_1[3:0];	// @[Vsplit.scala:346:{49,58,79}, :491:53, :525:24, :577:34]
        mergeAttrReg_regBackWidth <= {~io_in_decodeIn_bits_vCtrl_narrow, 2'h3};	// @[Vsplit.scala:201:63, :321:23, :322:43, :325:43, :577:34]
        if (io_in_decodeIn_bits_vCtrl_narrow)
          mergeAttrReg_regWriteMuopIdx <= {3'h0, idx[0]};	// @[Vsplit.scala:141:32, :323:{47,53}, :576:47, :577:34]
        else
          mergeAttrReg_regWriteMuopIdx <= 4'h0;	// @[Vsplit.scala:209:22, :577:34]
      end
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    logic [31:0] _RANDOM_22;
    logic [31:0] _RANDOM_23;
    logic [31:0] _RANDOM_24;
    logic [31:0] _RANDOM_25;
    logic [31:0] _RANDOM_26;
    logic [31:0] _RANDOM_27;
    logic [31:0] _RANDOM_28;
    logic [31:0] _RANDOM_29;
    logic [31:0] _RANDOM_30;
    logic [31:0] _RANDOM_31;
    logic [31:0] _RANDOM_32;
    logic [31:0] _RANDOM_33;
    logic [31:0] _RANDOM_34;
    logic [31:0] _RANDOM_35;
    logic [31:0] _RANDOM_36;
    logic [31:0] _RANDOM_37;
    logic [31:0] _RANDOM_38;
    logic [31:0] _RANDOM_39;
    logic [31:0] _RANDOM_40;
    logic [31:0] _RANDOM_41;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        _RANDOM_35 = `RANDOM;
        _RANDOM_36 = `RANDOM;
        _RANDOM_37 = `RANDOM;
        _RANDOM_38 = `RANDOM;
        _RANDOM_39 = `RANDOM;
        _RANDOM_40 = `RANDOM;
        _RANDOM_41 = `RANDOM;
        uopRegInfo_0_vs1 = {_RANDOM_0, _RANDOM_1, _RANDOM_2, _RANDOM_3};	// @[Vsplit.scala:139:28]
        uopRegInfo_0_vs2 = {_RANDOM_4, _RANDOM_5, _RANDOM_6, _RANDOM_7};	// @[Vsplit.scala:139:28]
        uopRegInfo_0_mask = {_RANDOM_8, _RANDOM_9, _RANDOM_10, _RANDOM_11};	// @[Vsplit.scala:139:28]
        uopRegInfo_0_old_vd = {_RANDOM_12, _RANDOM_13, _RANDOM_14, _RANDOM_15};	// @[Vsplit.scala:139:28]
        idx = _RANDOM_16[8:1];	// @[Vsplit.scala:141:32]
        currentState = _RANDOM_16[9];	// @[Vsplit.scala:141:32, :145:31]
        expdLenReg = _RANDOM_16[17:10];	// @[Vsplit.scala:141:32, :215:27]
        ldest_inc_last = _RANDOM_16[21:18];	// @[Vsplit.scala:141:32, :359:33]
        io_scoreBoardSetIO_setEn_REG = _RANDOM_16[22];	// @[Vsplit.scala:141:32, :442:45]
        io_scoreBoardSetIO_setMultiEn_REG = _RANDOM_16[23];	// @[Vsplit.scala:141:32, :443:45]
        io_scoreBoardSetIO_setNum_REG = _RANDOM_16[27:24];	// @[Vsplit.scala:141:32, :444:45]
        io_scoreBoardSetIO_setAddr_REG = {_RANDOM_16[31:28], _RANDOM_17[0]};	// @[Vsplit.scala:141:32, :445:45]
        validReg = _RANDOM_17[1];	// @[Vsplit.scala:445:45, :575:34]
        bitsReg_uop_ctrl_funct6 = _RANDOM_17[7:2];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_funct3 = _RANDOM_17[10:8];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_vm = _RANDOM_17[11];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_vs1_imm = _RANDOM_17[16:12];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_vs2 = _RANDOM_17[21:17];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_widen = _RANDOM_17[22];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_widen2 = _RANDOM_17[23];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_narrow = _RANDOM_17[24];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_narrow_to_1 = _RANDOM_17[25];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_load = _RANDOM_17[26];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_store = _RANDOM_17[27];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_alu = _RANDOM_17[28];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_mul = _RANDOM_17[29];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_fp = _RANDOM_17[30];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_div = _RANDOM_17[31];	// @[Vsplit.scala:445:45, :576:34]
        bitsReg_uop_ctrl_redu = _RANDOM_18[1];	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_mask = _RANDOM_18[2];	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_perm = _RANDOM_18[3];	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_floatRed = _RANDOM_18[4];	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_vGatherEi16EEW8 = _RANDOM_18[5];	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_vGatherEi16EEW32 = _RANDOM_18[7];	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_vGatherEi16EEW64 = _RANDOM_18[8];	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_lsrc_0 = _RANDOM_18[13:9];	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_lsrc_1 = _RANDOM_18[18:14];	// @[Vsplit.scala:576:34]
        bitsReg_uop_ctrl_ldest = _RANDOM_18[23:19];	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_ma = _RANDOM_18[24];	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_ta = _RANDOM_18[25];	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_vsew = _RANDOM_18[28:26];	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_vlmul = _RANDOM_18[31:29];	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_vl = _RANDOM_19[7:0];	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_vstart = _RANDOM_19[14:8];	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_vxrm = _RANDOM_19[16:15];	// @[Vsplit.scala:576:34]
        bitsReg_uop_info_frm = _RANDOM_19[19:17];	// @[Vsplit.scala:576:34]
        bitsReg_uop_uopIdx = _RANDOM_19[26:20];	// @[Vsplit.scala:576:34]
        bitsReg_uop_segIndex = _RANDOM_19[29:27];	// @[Vsplit.scala:576:34]
        bitsReg_uop_uopEnd = _RANDOM_19[30];	// @[Vsplit.scala:576:34]
        bitsReg_scalar_opnd_1 = {_RANDOM_20[31:8], _RANDOM_21, _RANDOM_22[7:0]};	// @[Vsplit.scala:576:34]
        bitsReg_scalar_opnd_2 = {_RANDOM_22[31:8], _RANDOM_23, _RANDOM_24[7:0]};	// @[Vsplit.scala:576:34]
        bitsReg_uopRegInfo_vs1 = {_RANDOM_24[31:8], _RANDOM_25, _RANDOM_26, _RANDOM_27, _RANDOM_28[7:0]};	// @[Vsplit.scala:576:34]
        bitsReg_uopRegInfo_vs2 = {_RANDOM_28[31:8], _RANDOM_29, _RANDOM_30, _RANDOM_31, _RANDOM_32[7:0]};	// @[Vsplit.scala:576:34]
        bitsReg_uopRegInfo_mask = {_RANDOM_32[31:8], _RANDOM_33, _RANDOM_34, _RANDOM_35, _RANDOM_36[7:0]};	// @[Vsplit.scala:576:34]
        bitsReg_uopRegInfo_old_vd = {_RANDOM_36[31:8], _RANDOM_37, _RANDOM_38, _RANDOM_39, _RANDOM_40[7:0]};	// @[Vsplit.scala:576:34]
        mergeAttrReg_scalarRegWriteEn = _RANDOM_40[9];	// @[Vsplit.scala:576:34, :577:34]
        mergeAttrReg_floatRegWriteEn = _RANDOM_40[10];	// @[Vsplit.scala:576:34, :577:34]
        mergeAttrReg_rfWriteEn = _RANDOM_40[11];	// @[Vsplit.scala:576:34, :577:34]
        mergeAttrReg_ldest = _RANDOM_40[16:12];	// @[Vsplit.scala:576:34, :577:34]
        mergeAttrReg_muopEnd = _RANDOM_40[17];	// @[Vsplit.scala:576:34, :577:34]
        mergeAttrReg_permExpdLen = _RANDOM_40[29:26];	// @[Vsplit.scala:576:34, :577:34]
        mergeAttrReg_regDstIdx = {_RANDOM_40[31:30], _RANDOM_41[2:0]};	// @[Vsplit.scala:576:34, :577:34]
        mergeAttrReg_regCount = _RANDOM_41[6:3];	// @[Vsplit.scala:577:34]
        mergeAttrReg_regBackWidth = _RANDOM_41[9:7];	// @[Vsplit.scala:577:34]
        mergeAttrReg_regWriteMuopIdx = _RANDOM_41[13:10];	// @[Vsplit.scala:577:34]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_in_decodeIn_ready = ~currentStateNext;	// @[Vsplit.scala:532:25, :534:26, :561:38]
  assign io_out_mUop_valid = muopOutValid;	// @[Vsplit.scala:600:45]
  assign io_out_mUop_bits_uop_ctrl_funct6 = bitsReg_uop_ctrl_funct6;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_funct3 = bitsReg_uop_ctrl_funct3;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_vm = bitsReg_uop_ctrl_vm;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_vs1_imm = bitsReg_uop_ctrl_vs1_imm;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_vs2 = bitsReg_uop_ctrl_vs2;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_widen = bitsReg_uop_ctrl_widen;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_widen2 = bitsReg_uop_ctrl_widen2;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_narrow = bitsReg_uop_ctrl_narrow;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_narrow_to_1 = bitsReg_uop_ctrl_narrow_to_1;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_load = bitsReg_uop_ctrl_load;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_store = bitsReg_uop_ctrl_store;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_alu = bitsReg_uop_ctrl_alu;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_mul = bitsReg_uop_ctrl_mul;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_fp = bitsReg_uop_ctrl_fp;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_div = bitsReg_uop_ctrl_div;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_redu = bitsReg_uop_ctrl_redu;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_mask = bitsReg_uop_ctrl_mask;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_perm = bitsReg_uop_ctrl_perm;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_floatRed = bitsReg_uop_ctrl_floatRed;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_vGatherEi16EEW8 = bitsReg_uop_ctrl_vGatherEi16EEW8;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_vGatherEi16EEW32 = bitsReg_uop_ctrl_vGatherEi16EEW32;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_vGatherEi16EEW64 = bitsReg_uop_ctrl_vGatherEi16EEW64;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_lsrc_0 = bitsReg_uop_ctrl_lsrc_0;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_lsrc_1 = bitsReg_uop_ctrl_lsrc_1;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_ctrl_ldest = bitsReg_uop_ctrl_ldest;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_info_ma = bitsReg_uop_info_ma;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_info_ta = bitsReg_uop_info_ta;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_info_vsew = bitsReg_uop_info_vsew;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_info_vlmul = bitsReg_uop_info_vlmul;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_info_vl = bitsReg_uop_info_vl;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_info_vstart = bitsReg_uop_info_vstart;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_info_vxrm = bitsReg_uop_info_vxrm;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_info_frm = bitsReg_uop_info_frm;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_uopIdx = bitsReg_uop_uopIdx;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_segIndex = bitsReg_uop_segIndex;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uop_uopEnd = bitsReg_uop_uopEnd;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_scalar_opnd_1 = bitsReg_scalar_opnd_1;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_scalar_opnd_2 = bitsReg_scalar_opnd_2;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uopRegInfo_vs1 = bitsReg_uopRegInfo_vs1;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uopRegInfo_vs2 = bitsReg_uopRegInfo_vs2;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uopRegInfo_mask = bitsReg_uopRegInfo_mask;	// @[Vsplit.scala:576:34]
  assign io_out_mUop_bits_uopRegInfo_old_vd = bitsReg_uopRegInfo_old_vd;	// @[Vsplit.scala:576:34]
  assign io_out_toRegFileRead_rfReadEn_0 = fire2PipeReg & io_in_decodeIn_bits_vCtrl_lsrcVal_0;	// @[Vsplit.scala:433:59, :580:41]
  assign io_out_toRegFileRead_rfReadEn_1 = fire2PipeReg & io_in_decodeIn_bits_vCtrl_lsrcVal_1;	// @[Vsplit.scala:434:59, :580:41]
  assign io_out_toRegFileRead_rfReadEn_2 = fire2PipeReg & ~io_in_decodeIn_bits_vCtrl_vm;	// @[Vsplit.scala:377:22, :435:59, :580:41]
  assign io_out_toRegFileRead_rfReadEn_3 = fire2PipeReg & _io_out_toRegFileRead_rfReadEn_3_T;	// @[Vsplit.scala:209:37, :436:59, :580:41]
  assign io_out_toRegFileRead_rfReadIdx_0 = vs1Idx[4:0];	// @[Vsplit.scala:378:35, :384:38]
  assign io_out_toRegFileRead_rfReadIdx_1 = vs2Idx;	// @[Vsplit.scala:379:35]
  assign io_out_toRegFileRead_rfReadIdx_3 = mUopMergeAttrIn_bits_ldest;	// @[Vsplit.scala:332:57]
  assign io_out_mUopMergeAttr_valid = muopOutValid;	// @[Vsplit.scala:600:45]
  assign io_out_mUopMergeAttr_bits_scalarRegWriteEn = mergeAttrReg_scalarRegWriteEn;	// @[Vsplit.scala:577:34]
  assign io_out_mUopMergeAttr_bits_floatRegWriteEn = mergeAttrReg_floatRegWriteEn;	// @[Vsplit.scala:577:34]
  assign io_out_mUopMergeAttr_bits_rfWriteEn = mergeAttrReg_rfWriteEn;	// @[Vsplit.scala:577:34]
  assign io_out_mUopMergeAttr_bits_ldest = mergeAttrReg_ldest;	// @[Vsplit.scala:577:34]
  assign io_out_mUopMergeAttr_bits_muopEnd = mergeAttrReg_muopEnd;	// @[Vsplit.scala:577:34]
  assign io_out_mUopMergeAttr_bits_permExpdLen = mergeAttrReg_permExpdLen;	// @[Vsplit.scala:577:34]
  assign io_out_mUopMergeAttr_bits_regDstIdx = mergeAttrReg_regDstIdx;	// @[Vsplit.scala:577:34]
  assign io_out_mUopMergeAttr_bits_regCount = mergeAttrReg_regCount;	// @[Vsplit.scala:577:34]
  assign io_out_mUopMergeAttr_bits_regBackWidth = mergeAttrReg_regBackWidth;	// @[Vsplit.scala:577:34]
  assign io_out_mUopMergeAttr_bits_regWriteMuopIdx = mergeAttrReg_regWriteMuopIdx;	// @[Vsplit.scala:577:34]
  assign io_scoreBoardSetIO_setEn = io_scoreBoardSetIO_setEn_REG;	// @[Vsplit.scala:442:45]
  assign io_scoreBoardSetIO_setAddr = io_scoreBoardSetIO_setAddr_REG;	// @[Vsplit.scala:445:45]
  assign io_scoreBoardSetIO_setMultiEn = io_scoreBoardSetIO_setMultiEn_REG;	// @[Vsplit.scala:443:45]
  assign io_scoreBoardSetIO_setNum = {1'h0, io_scoreBoardSetIO_setNum_REG};	// @[Vsplit.scala:139:28, :444:{35,45}]
  assign io_scoreBoardReadIO_readAddr1 = vs1Idx[4:0];	// @[Vsplit.scala:378:35, :384:38]
  assign io_scoreBoardReadIO_readAddr2 = vs2Idx;	// @[Vsplit.scala:379:35]
  assign io_scoreBoardReadIO_readAddr3 = mUopMergeAttrIn_bits_ldest;	// @[Vsplit.scala:332:57]
  assign io_scoreBoardReadIO_readNum1 = emulVs1[2:0];	// @[Vsplit.scala:210:22, :388:38]
  assign io_scoreBoardReadIO_readNum2 = emulVs2[2:0];	// @[Vsplit.scala:211:22, :389:38]
  assign io_excpInfo_exception_vld = io_vLSUXcpt_exception_vld | io_in_decodeIn_bits_vCtrl_illegal & instDecodeIn;	// @[Vsplit.scala:148:45, :611:{60,77}]
  assign io_excpInfo_update_vl = io_vLSUXcpt_update_vl;
  assign io_excpInfo_update_data = io_vLSUXcpt_update_data;
  assign io_excpInfo_xcpt_cause_ma_ld = io_vLSUXcpt_xcpt_cause_ma_ld;
  assign io_excpInfo_xcpt_cause_ma_st = io_vLSUXcpt_xcpt_cause_ma_st;
  assign io_excpInfo_xcpt_cause_pf_ld = io_vLSUXcpt_xcpt_cause_pf_ld;
  assign io_excpInfo_xcpt_cause_pf_st = io_vLSUXcpt_xcpt_cause_pf_st;
  assign io_excpInfo_xcpt_cause_gf_ld = io_vLSUXcpt_xcpt_cause_gf_ld;
  assign io_excpInfo_xcpt_cause_gf_st = io_vLSUXcpt_xcpt_cause_gf_st;
  assign io_excpInfo_xcpt_cause_ae_ld = io_vLSUXcpt_xcpt_cause_ae_ld;
  assign io_excpInfo_xcpt_cause_ae_st = io_vLSUXcpt_xcpt_cause_ae_st;
  assign io_excpInfo_xcpt_addr = io_vLSUXcpt_xcpt_addr;
  assign io_excpInfo_illegalInst = io_in_decodeIn_bits_vCtrl_illegal;
  assign io_excpInfo_update_float = mUopMergeAttrIn_bits_floatRegWriteEn;	// @[Vsplit.scala:331:57]
  assign io_excpInfo_reg_idx = io_in_decodeIn_bits_vCtrl_ldest;
endmodule

