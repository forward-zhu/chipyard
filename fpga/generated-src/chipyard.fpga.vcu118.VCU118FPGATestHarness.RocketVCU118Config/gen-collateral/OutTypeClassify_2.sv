// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module OutTypeClassify_2(
  input         fp_sign,
  input  [10:0] fp_exp,
  input  [51:0] fp_sig,
  input  [2:0]  rm,
  output        isSubnormal,
                rsqrtType_0,
                rsqrtType_1,
                rsqrtType_2,
                rsqrtType_3,
                rsqrtType_5,
                rsqrtType_6,
                recType_0,
                recType_1,
                recType_2,
                recType_3,
                recType_4,
                recType_5,
                recType_6,
                recType_7,
                recType_8,
                recType_9,
                recType_10
);

  wire decoded_expIsZero = fp_exp == 11'h0;	// @[package.scala:36:31]
  wire decoded_isSubnormal = decoded_expIsZero & (|fp_sig);	// @[package.scala:36:31, :38:31, :45:46]
  wire _WIRE_1_1 = (&fp_exp) & ~(|fp_sig);	// @[package.scala:37:31, :38:31, :44:27, :46:40]
  wire _WIRE_1_8 = decoded_expIsZero & ~(|fp_sig);	// @[package.scala:36:31, :38:31, :44:27, :47:41]
  wire decoded_isNaN = (&fp_exp) & (|fp_sig);	// @[package.scala:37:31, :38:31, :48:40]
  wire _WIRE_1_10 = decoded_isNaN & ~(fp_sig[51]);	// @[package.scala:48:40, :49:{37,40,49}]
  wire _WIRE_1_9 = decoded_isNaN & fp_sig[51];	// @[package.scala:48:40, :49:49, :50:37]
  wire _WIRE_1_2 = (&(fp_exp[10:2])) & fp_exp[1] & ~(fp_exp[0]);	// @[VFRec.scala:43:{16,31,45,49,52,59}]
  wire _WIRE_1_3 = (&(fp_exp[10:2])) & ~(fp_exp[1]) & fp_exp[0];	// @[VFRec.scala:43:{16,45,59}, :44:{31,39,50}]
  wire _recAbnormalOutputType_T_22 = fp_sign & decoded_isSubnormal;	// @[VFRec.scala:45:10, package.scala:45:46]
  wire _recAbnormalOutputType_T_37 = rm == 3'h1;	// @[VFRec.scala:45:66]
  wire _recAbnormalOutputType_T_46 = rm == 3'h3;	// @[VFRec.scala:45:80]
  wire _WIRE_1_4 = _recAbnormalOutputType_T_22 & ~(|(fp_sig[51:50])) & (_recAbnormalOutputType_T_37 | _recAbnormalOutputType_T_46);	// @[VFRec.scala:45:{10,47,51,59,66,74,80}]
  wire _recAbnormalOutputType_T_38 = rm == 3'h2;	// @[VFRec.scala:46:66]
  wire _recAbnormalOutputType_T_47 = rm == 3'h0;	// @[VFRec.scala:46:80]
  wire _recAbnormalOutputType_T_49 = rm == 3'h4;	// @[VFRec.scala:46:94]
  wire _WIRE_1_5 = _recAbnormalOutputType_T_22 & ~(|(fp_sig[51:50])) & (_recAbnormalOutputType_T_38 | _recAbnormalOutputType_T_47 | _recAbnormalOutputType_T_49);	// @[VFRec.scala:45:{10,47,51}, :46:{51,59,66,80,88,94}]
  wire _WIRE_1_6 = ~fp_sign & decoded_isSubnormal & ~(|(fp_sig[51:50])) & (_recAbnormalOutputType_T_37 | _recAbnormalOutputType_T_38);	// @[VFRec.scala:35:23, :45:{47,51,66}, :46:66, :47:{52,60,75}, package.scala:45:46]
  wire _WIRE_1_7 = ~fp_sign & decoded_isSubnormal & ~(|(fp_sig[51:50])) & (_recAbnormalOutputType_T_46 | _recAbnormalOutputType_T_47 | _recAbnormalOutputType_T_49);	// @[VFRec.scala:35:23, :45:{47,51,80}, :46:{80,94}, :48:{52,60,89}, package.scala:45:46]
  wire _T_23 = _WIRE_1_1 | _WIRE_1_2 | _WIRE_1_3 | _WIRE_1_4 | _WIRE_1_5 | _WIRE_1_6 | _WIRE_1_7 | _WIRE_1_8 | _WIRE_1_9 | _WIRE_1_10;	// @[VFRec.scala:43:49, :44:50, :45:59, :46:59, :47:60, :48:60, :53:48, package.scala:46:40, :47:41, :49:37, :50:37]
  assign isSubnormal = decoded_isSubnormal;	// @[package.scala:45:46]
  assign rsqrtType_0 = fp_sign & (~(&fp_exp) & ~_WIRE_1_8 | _WIRE_1_1);	// @[VFRec.scala:33:{10,15,34,37,54}, package.scala:37:31, :46:40, :47:41]
  assign rsqrtType_1 = _WIRE_1_8 & fp_sign;	// @[VFRec.scala:34:20, package.scala:47:41]
  assign rsqrtType_2 = _WIRE_1_8 & ~fp_sign;	// @[VFRec.scala:35:{20,23}, package.scala:47:41]
  assign rsqrtType_3 = ~fp_sign & ~(&fp_exp) & ~_WIRE_1_8;	// @[VFRec.scala:33:{15,37}, :35:23, :36:11, package.scala:37:31, :47:41]
  assign rsqrtType_5 = _WIRE_1_9;	// @[package.scala:50:37]
  assign rsqrtType_6 = _WIRE_1_10;	// @[package.scala:49:37]
  assign recType_0 = ~_T_23;	// @[VFRec.scala:53:{17,48}]
  assign recType_1 = _T_23 & _WIRE_1_1;	// @[VFRec.scala:53:{17,48}, package.scala:46:40]
  assign recType_2 = _T_23 & _WIRE_1_2;	// @[VFRec.scala:43:49, :53:{17,48}]
  assign recType_3 = _T_23 & _WIRE_1_3;	// @[VFRec.scala:44:50, :53:{17,48}]
  assign recType_4 = _T_23 & _WIRE_1_4;	// @[VFRec.scala:45:59, :53:{17,48}]
  assign recType_5 = _T_23 & _WIRE_1_5;	// @[VFRec.scala:46:59, :53:{17,48}]
  assign recType_6 = _T_23 & _WIRE_1_6;	// @[VFRec.scala:47:60, :53:{17,48}]
  assign recType_7 = _T_23 & _WIRE_1_7;	// @[VFRec.scala:48:60, :53:{17,48}]
  assign recType_8 = _T_23 & _WIRE_1_8;	// @[VFRec.scala:53:{17,48}, package.scala:47:41]
  assign recType_9 = _T_23 & _WIRE_1_9;	// @[VFRec.scala:53:{17,48}, package.scala:50:37]
  assign recType_10 = _T_23 & _WIRE_1_10;	// @[VFRec.scala:53:{17,48}, package.scala:49:37]
endmodule

