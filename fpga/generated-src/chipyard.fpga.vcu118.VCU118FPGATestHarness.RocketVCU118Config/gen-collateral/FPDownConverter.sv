// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module FPDownConverter(
  input  [63:0] io_in,
  input  [2:0]  io_rm,
  output [31:0] io_result,
  output [4:0]  io_fflags
);

  wire [22:0] _subnormal_rounder_io_out;	// @[FPToFP.scala:115:33]
  wire        _subnormal_rounder_io_inexact;	// @[FPToFP.scala:115:33]
  wire        _subnormal_rounder_io_cout;	// @[FPToFP.scala:115:33]
  wire [24:0] _shiftRightJam_io_out;	// @[ShiftRightJam.scala:28:31]
  wire        _shiftRightJam_io_sticky;	// @[ShiftRightJam.scala:28:31]
  wire [22:0] _normal_rounder_io_out;	// @[FPToFP.scala:81:30]
  wire        _normal_rounder_io_inexact;	// @[FPToFP.scala:81:30]
  wire        _normal_rounder_io_cout;	// @[FPToFP.scala:81:30]
  wire        decode_isNaN = (&(io_in[62:52])) & (|(io_in[51:0]));	// @[package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire [11:0] _down_exp_T_2 = {1'h0, io_in[62:52]} - 12'h380;	// @[FPToFP.scala:72:35, :95:53, package.scala:64:18]
  wire        normal_of = _normal_rounder_io_cout ? $signed(_down_exp_T_2) > 12'shFD : $signed(_down_exp_T_2) > 12'shFE;	// @[FPToFP.scala:72:35, :81:30, :90:22, :92:14, :93:14]
  wire        may_be_subnormal = $signed(_down_exp_T_2) < 12'sh1;	// @[FPToFP.scala:72:35, :95:69]
  wire        rmin = io_rm == 3'h5 | io_rm == 3'h1 | io_rm == 3'h2 & ~(io_in[63]) | io_rm == 3'h3 & io_in[63];	// @[FPToFP.scala:128:{11,28,46,54,57,70,80,88}, package.scala:63:19]
  wire        _GEN = may_be_subnormal | normal_of;	// @[FPToFP.scala:90:22, :95:69, Mux.scala:27:73]
  RoundingUnit normal_rounder (	// @[FPToFP.scala:81:30]
    .io_in       (io_in[51:29]),	// @[FPToFP.scala:77:34]
    .io_roundIn  (io_in[28]),	// @[FPToFP.scala:78:{39,62}]
    .io_stickyIn (|(io_in[27:0])),	// @[FPToFP.scala:79:{40,58}]
    .io_signIn   (io_in[63]),	// @[package.scala:63:19]
    .io_rm       (io_rm),
    .io_out      (_normal_rounder_io_out),
    .io_inexact  (_normal_rounder_io_inexact),
    .io_cout     (_normal_rounder_io_cout)
  );
  ShiftRightJam_3 shiftRightJam (	// @[ShiftRightJam.scala:28:31]
    .io_in     ({|(io_in[62:52]), io_in[51:28]}),	// @[Cat.scala:33:92, FPToFP.scala:111:42, package.scala:36:31, :64:18]
    .io_shamt  (11'h381 - io_in[62:52]),	// @[FPToFP.scala:109:47, package.scala:64:18]
    .io_out    (_shiftRightJam_io_out),
    .io_sticky (_shiftRightJam_io_sticky)
  );
  RoundingUnit subnormal_rounder (	// @[FPToFP.scala:115:33]
    .io_in       (_shiftRightJam_io_out[23:1]),	// @[FPToFP.scala:116:{48,56}, ShiftRightJam.scala:28:31]
    .io_roundIn  (_shiftRightJam_io_out[0]),	// @[FPToFP.scala:117:48, ShiftRightJam.scala:28:31]
    .io_stickyIn (_shiftRightJam_io_sticky | (|(io_in[27:0]))),	// @[FPToFP.scala:79:{40,58}, :114:42, ShiftRightJam.scala:28:31]
    .io_signIn   (io_in[63]),	// @[package.scala:63:19]
    .io_rm       (io_rm),
    .io_out      (_subnormal_rounder_io_out),
    .io_inexact  (_subnormal_rounder_io_inexact),
    .io_cout     (_subnormal_rounder_io_cout)
  );
  assign io_result = {~decode_isNaN & io_in[63], {8{&(io_in[62:52])}} | ((&(io_in[62:52])) ? 8'h0 : (~may_be_subnormal & normal_of ? {7'h7F, ~rmin} : 8'h0) | (_GEN ? 8'h0 : _normal_rounder_io_cout ? _down_exp_T_2[7:0] + 8'h1 : _down_exp_T_2[7:0]) | {7'h0, may_be_subnormal & _subnormal_rounder_io_cout}), ((&(io_in[62:52])) ? {|(io_in[51:0]), 22'h0} : 23'h0) | ((&(io_in[62:52])) ? 23'h0 : {23{~may_be_subnormal & normal_of & rmin}} | (_GEN ? 23'h0 : _normal_rounder_io_out) | (may_be_subnormal ? _subnormal_rounder_io_out : 23'h0))};	// @[Cat.scala:33:92, FPToFP.scala:72:35, :81:30, :89:{31,65}, :90:22, :95:69, :115:33, :128:70, :130:26, :136:26, :138:5, :144:{7,25}, :180:{5,19}, :183:11, Mux.scala:27:73, package.scala:37:31, :38:31, :48:40, :63:19, :64:18, :65:18]
  assign io_fflags = {decode_isNaN & ~(io_in[51]), 1'h0, ~(&(io_in[62:52])) & normal_of, ~(&(io_in[62:52])) & may_be_subnormal & (_normal_rounder_io_cout ? $signed(_down_exp_T_2) < 12'sh0 : may_be_subnormal) & _subnormal_rounder_io_inexact, ~(&(io_in[62:52])) & (~may_be_subnormal & (_normal_rounder_io_inexact | normal_of) | may_be_subnormal & _subnormal_rounder_io_inexact)};	// @[Cat.scala:33:92, FPToFP.scala:72:35, :81:30, :90:22, :95:{19,53,69}, :96:45, :115:33, :144:7, :172:{12,26}, :173:56, :174:26, :175:{24,38}, :176:25, package.scala:37:31, :48:40, :49:{37,40,49}, :64:18]
endmodule

