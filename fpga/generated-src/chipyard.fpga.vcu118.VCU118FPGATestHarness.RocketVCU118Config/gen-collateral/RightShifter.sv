// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module RightShifter(
  input  [5:0]  io_shiftNum,
  input  [63:0] io_in,
  input         io_msb,
  output [63:0] io_out
);

  wire [63:0] s0 = io_shiftNum[0] ? {io_msb, io_in[63:1]} : io_in;	// @[Cat.scala:33:92, DivUtils.scala:48:{15,21,69}]
  wire [63:0] s1 = io_shiftNum[1] ? {{2{io_msb}}, s0[63:2]} : s0;	// @[Cat.scala:33:92, DivUtils.scala:48:15, :49:{15,21,56,66}]
  wire [63:0] s2 = io_shiftNum[2] ? {{4{io_msb}}, s1[63:4]} : s1;	// @[Cat.scala:33:92, DivUtils.scala:49:15, :50:{15,21,56,66}]
  wire [63:0] s3 = io_shiftNum[3] ? {{8{io_msb}}, s2[63:8]} : s2;	// @[Cat.scala:33:92, DivUtils.scala:50:15, :55:{14,20,55,65}]
  wire [63:0] s4 = io_shiftNum[4] ? {{16{io_msb}}, s3[63:16]} : s3;	// @[Cat.scala:33:92, DivUtils.scala:55:14, :56:{14,20,56,66}]
  assign io_out = io_shiftNum[5] ? {{32{io_msb}}, s4[63:32]} : s4;	// @[Cat.scala:33:92, DivUtils.scala:56:14, :57:{14,20,56,66}]
endmodule

