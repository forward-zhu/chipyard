// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VFMiscDataModule(
  input         clock,
                reset,
                io_in_valid,
  input  [63:0] io_in_bits_vs1,
                io_in_bits_vs2,
  input  [7:0]  io_in_bits_prestart,
                io_in_bits_mask,
                io_in_bits_tail,
  input  [4:0]  io_in_bits_uop_ctrl_lsrc_0,
                io_in_bits_uop_ctrl_lsrc_1,
                io_in_bits_uop_ctrl_ldest,
  input         io_in_bits_uop_ctrl_vm,
  input  [5:0]  io_in_bits_uop_ctrl_funct6,
  input  [2:0]  io_in_bits_uop_ctrl_funct3,
  input         io_in_bits_uop_ctrl_widen,
                io_in_bits_uop_ctrl_widen2,
                io_in_bits_uop_ctrl_narrow,
                io_in_bits_uop_ctrl_narrow_to_1,
  input  [6:0]  io_in_bits_uop_info_vstart,
  input  [7:0]  io_in_bits_uop_info_vl,
  input  [1:0]  io_in_bits_uop_info_vxrm,
  input  [2:0]  io_in_bits_uop_info_frm,
                io_in_bits_uop_info_vlmul,
                io_in_bits_uop_info_vsew,
  input         io_in_bits_uop_info_ma,
                io_in_bits_uop_info_ta,
  input  [2:0]  io_in_bits_uop_info_destEew,
                io_in_bits_uop_expdIdx,
  input         io_in_bits_uop_expdEnd,
                io_in_bits_uop_sysUop_robIdx_flag,
  input  [7:0]  io_in_bits_uop_sysUop_robIdx_value,
  input  [63:0] io_in_bits_uop_maskKeep,
                io_in_bits_uop_maskOff,
  input  [4:0]  io_in_bits_uop_vfpCtrl_miscCmd,
  input  [2:0]  io_in_bits_uop_vfpCtrl_miscSubCmd,
  input         io_in_bits_uop_typeTag,
                io_out_ready,
  output        io_in_ready,
                io_out_valid,
  output [63:0] io_out_bits_vd,
  output [4:0]  io_out_bits_fflags,
                io_out_bits_uop_ctrl_lsrc_0,
                io_out_bits_uop_ctrl_lsrc_1,
                io_out_bits_uop_ctrl_ldest,
  output        io_out_bits_uop_ctrl_vm,
  output [5:0]  io_out_bits_uop_ctrl_funct6,
  output [2:0]  io_out_bits_uop_ctrl_funct3,
  output        io_out_bits_uop_ctrl_widen,
                io_out_bits_uop_ctrl_widen2,
                io_out_bits_uop_ctrl_narrow,
                io_out_bits_uop_ctrl_narrow_to_1,
  output [6:0]  io_out_bits_uop_info_vstart,
  output [7:0]  io_out_bits_uop_info_vl,
  output [1:0]  io_out_bits_uop_info_vxrm,
  output [2:0]  io_out_bits_uop_info_frm,
                io_out_bits_uop_info_vlmul,
                io_out_bits_uop_info_vsew,
  output        io_out_bits_uop_info_ma,
                io_out_bits_uop_info_ta,
  output [2:0]  io_out_bits_uop_info_destEew,
                io_out_bits_uop_expdIdx,
  output        io_out_bits_uop_expdEnd,
                io_out_bits_uop_sysUop_robIdx_flag,
  output [7:0]  io_out_bits_uop_sysUop_robIdx_value,
  output [63:0] io_out_bits_uop_maskKeep,
                io_out_bits_uop_maskOff
);

  wire        _WIRE_1;	// @[VFPUSubModule.scala:70:35]
  wire [63:0] _dcmp_io_minmaxResult;	// @[VFMisc.scala:111:20]
  wire        _dcmp_io_cmpResult;	// @[VFMisc.scala:111:20]
  wire        _dcmp_io_cmpInvalid;	// @[VFMisc.scala:111:20]
  wire        _dcmp_io_minmaxInvalid;	// @[VFMisc.scala:111:20]
  wire [31:0] _scmp2_io_minmaxResult;	// @[VFMisc.scala:110:21]
  wire        _scmp2_io_cmpResult;	// @[VFMisc.scala:110:21]
  wire        _scmp2_io_cmpInvalid;	// @[VFMisc.scala:110:21]
  wire        _scmp2_io_minmaxInvalid;	// @[VFMisc.scala:110:21]
  wire [31:0] _scmp1_io_minmaxResult;	// @[VFMisc.scala:109:21]
  wire        _scmp1_io_cmpResult;	// @[VFMisc.scala:109:21]
  wire        _scmp1_io_cmpInvalid;	// @[VFMisc.scala:109:21]
  wire        _scmp1_io_minmaxInvalid;	// @[VFMisc.scala:109:21]
  reg         REG;	// @[VFPUSubModule.scala:59:60]
  reg         REG_1;	// @[VFPUSubModule.scala:59:60]
  reg  [4:0]  uop_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  uop_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  uop_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  reg         uop_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  reg  [5:0]  uop_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  reg         uop_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  reg         uop_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  reg         uop_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  reg         uop_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  reg  [6:0]  uop_info_vstart;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]  uop_info_vl;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]  uop_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_info_frm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_info_vsew;	// @[VFPUSubModule.scala:63:57]
  reg         uop_info_ma;	// @[VFPUSubModule.scala:63:57]
  reg         uop_info_ta;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_info_destEew;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_expdIdx;	// @[VFPUSubModule.scala:63:57]
  reg         uop_expdEnd;	// @[VFPUSubModule.scala:63:57]
  reg         uop_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]  uop_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0] uop_maskKeep;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0] uop_maskOff;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  uop_vfpCtrl_miscCmd;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  uop_vfpCtrl_miscSubCmd;	// @[VFPUSubModule.scala:63:57]
  reg         uop_typeTag;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  REG_2_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  REG_2_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]  REG_2_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  reg         REG_2_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  reg  [5:0]  REG_2_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  REG_2_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  reg         REG_2_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  reg         REG_2_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  reg         REG_2_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  reg         REG_2_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  reg  [6:0]  REG_2_info_vstart;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]  REG_2_info_vl;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]  REG_2_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  REG_2_info_frm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  REG_2_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  REG_2_info_vsew;	// @[VFPUSubModule.scala:63:57]
  reg         REG_2_info_ma;	// @[VFPUSubModule.scala:63:57]
  reg         REG_2_info_ta;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  REG_2_info_destEew;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]  REG_2_expdIdx;	// @[VFPUSubModule.scala:63:57]
  reg         REG_2_expdEnd;	// @[VFPUSubModule.scala:63:57]
  reg         REG_2_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]  REG_2_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0] REG_2_maskKeep;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0] REG_2_maskOff;	// @[VFPUSubModule.scala:63:57]
  wire        _WIRE = ~REG | _WIRE_1;	// @[VFPUSubModule.scala:59:60, :70:{18,35}]
  assign _WIRE_1 = ~REG_1 | io_out_ready;	// @[VFPUSubModule.scala:59:60, :70:{18,35}]
  reg  [63:0] vs1;	// @[Reg.scala:19:16]
  reg  [63:0] vs2;	// @[Reg.scala:19:16]
  reg  [7:0]  mask;	// @[Reg.scala:19:16]
  reg         eleActives_0;	// @[Reg.scala:19:16]
  reg         eleActives_1;	// @[Reg.scala:19:16]
  reg         narrow_eleActives_0;	// @[Reg.scala:19:16]
  reg         narrow_eleActives_1;	// @[Reg.scala:19:16]
  reg  [63:0] io_out_bits_vd_r;	// @[Reg.scala:19:16]
  reg  [4:0]  io_out_bits_fflags_r;	// @[Reg.scala:19:16]
  wire        clsResult_decode_expIsZero = vs2[62:55] == 8'h0;	// @[Reg.scala:19:16, VFMisc.scala:117:25, package.scala:36:31, :64:18]
  wire        clsResult_decode_isSubnormal = clsResult_decode_expIsZero & (|(vs2[54:32]));	// @[Reg.scala:19:16, VFMisc.scala:117:25, package.scala:36:31, :38:31, :45:46, :65:18]
  wire        clsResult_decode_isInf = (&(vs2[62:55])) & ~(|(vs2[54:32]));	// @[Reg.scala:19:16, VFMisc.scala:117:25, package.scala:37:31, :38:31, :44:27, :46:40, :64:18, :65:18]
  wire        clsResult_decode_isZero = clsResult_decode_expIsZero & ~(|(vs2[54:32]));	// @[Reg.scala:19:16, VFMisc.scala:117:25, package.scala:36:31, :38:31, :44:27, :47:41, :65:18]
  wire        clsResult_decode_isNaN = (&(vs2[62:55])) & (|(vs2[54:32]));	// @[Reg.scala:19:16, VFMisc.scala:117:25, package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire        clsResult_isNormal = ~(&(vs2[62:55])) & ~clsResult_decode_expIsZero;	// @[Reg.scala:19:16, VFMisc.scala:117:25, :149:{20,38,41}, package.scala:36:31, :37:31, :64:18]
  wire        clsResult_decode_1_expIsZero = vs2[30:23] == 8'h0;	// @[Reg.scala:19:16, VFMisc.scala:113:15, package.scala:36:31, :64:18]
  wire        clsResult_decode_1_isSubnormal = clsResult_decode_1_expIsZero & (|(vs2[22:0]));	// @[Reg.scala:19:16, VFMisc.scala:113:15, package.scala:36:31, :38:31, :45:46, :65:18]
  wire        clsResult_decode_1_isInf = (&(vs2[30:23])) & ~(|(vs2[22:0]));	// @[Reg.scala:19:16, VFMisc.scala:113:15, package.scala:37:31, :38:31, :44:27, :46:40, :64:18, :65:18]
  wire        clsResult_decode_1_isZero = clsResult_decode_1_expIsZero & ~(|(vs2[22:0]));	// @[Reg.scala:19:16, VFMisc.scala:113:15, package.scala:36:31, :38:31, :44:27, :47:41, :65:18]
  wire        clsResult_decode_1_isNaN = (&(vs2[30:23])) & (|(vs2[22:0]));	// @[Reg.scala:19:16, VFMisc.scala:113:15, package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire        clsResult_isNormal_1 = ~(&(vs2[30:23])) & ~clsResult_decode_1_expIsZero;	// @[Reg.scala:19:16, VFMisc.scala:113:15, :149:{20,38,41}, package.scala:36:31, :37:31, :64:18]
  wire        clsResult_decode_2_expIsZero = vs2[62:52] == 11'h0;	// @[Reg.scala:19:16, package.scala:36:31, :64:18]
  wire        clsResult_decode_2_isSubnormal = clsResult_decode_2_expIsZero & (|(vs2[51:0]));	// @[Reg.scala:19:16, package.scala:36:31, :38:31, :45:46, :65:18]
  wire        clsResult_decode_2_isInf = (&(vs2[62:52])) & ~(|(vs2[51:0]));	// @[Reg.scala:19:16, package.scala:37:31, :38:31, :44:27, :46:40, :64:18, :65:18]
  wire        clsResult_decode_2_isZero = clsResult_decode_2_expIsZero & ~(|(vs2[51:0]));	// @[Reg.scala:19:16, package.scala:36:31, :38:31, :44:27, :47:41, :65:18]
  wire        clsResult_decode_2_isNaN = (&(vs2[62:52])) & (|(vs2[51:0]));	// @[Reg.scala:19:16, package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire        clsResult_isNormal_2 = ~(&(vs2[62:52])) & ~clsResult_decode_2_expIsZero;	// @[Reg.scala:19:16, VFMisc.scala:149:{20,38,41}, package.scala:36:31, :37:31, :64:18]
  wire        _narrow_eleActives_T_16 = io_in_valid & _WIRE;	// @[VFPUSubModule.scala:70:35, :88:49]
  wire        _io_out_bits_fflags_T = REG & _WIRE_1;	// @[VFPUSubModule.scala:59:60, :70:35, :88:49]
  always @(posedge clock) begin
    if (reset) begin
      REG <= 1'h0;	// @[VFPUSubModule.scala:59:60]
      REG_1 <= 1'h0;	// @[VFPUSubModule.scala:59:60]
    end
    else begin
      if (_narrow_eleActives_T_16)	// @[VFPUSubModule.scala:88:49]
        REG <= io_in_valid;	// @[VFPUSubModule.scala:59:60]
      else	// @[VFPUSubModule.scala:88:49]
        REG <= ~_WIRE_1 & REG;	// @[VFPUSubModule.scala:59:60, :70:35, :77:41, :78:19]
      if (_io_out_bits_fflags_T)	// @[VFPUSubModule.scala:88:49]
        REG_1 <= REG;	// @[VFPUSubModule.scala:59:60]
      else	// @[VFPUSubModule.scala:88:49]
        REG_1 <= ~io_out_ready & REG_1;	// @[VFPUSubModule.scala:59:60, :77:41, :78:19]
    end
    if (_narrow_eleActives_T_16) begin	// @[VFPUSubModule.scala:88:49]
      uop_ctrl_lsrc_0 <= io_in_bits_uop_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_lsrc_1 <= io_in_bits_uop_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_ldest <= io_in_bits_uop_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_vm <= io_in_bits_uop_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_funct6 <= io_in_bits_uop_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_funct3 <= io_in_bits_uop_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_widen <= io_in_bits_uop_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_widen2 <= io_in_bits_uop_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_narrow <= io_in_bits_uop_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
      uop_ctrl_narrow_to_1 <= io_in_bits_uop_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
      uop_info_vstart <= io_in_bits_uop_info_vstart;	// @[VFPUSubModule.scala:63:57]
      uop_info_vl <= io_in_bits_uop_info_vl;	// @[VFPUSubModule.scala:63:57]
      uop_info_vxrm <= io_in_bits_uop_info_vxrm;	// @[VFPUSubModule.scala:63:57]
      uop_info_frm <= io_in_bits_uop_info_frm;	// @[VFPUSubModule.scala:63:57]
      uop_info_vlmul <= io_in_bits_uop_info_vlmul;	// @[VFPUSubModule.scala:63:57]
      uop_info_vsew <= io_in_bits_uop_info_vsew;	// @[VFPUSubModule.scala:63:57]
      uop_info_ma <= io_in_bits_uop_info_ma;	// @[VFPUSubModule.scala:63:57]
      uop_info_ta <= io_in_bits_uop_info_ta;	// @[VFPUSubModule.scala:63:57]
      uop_info_destEew <= io_in_bits_uop_info_destEew;	// @[VFPUSubModule.scala:63:57]
      uop_expdIdx <= io_in_bits_uop_expdIdx;	// @[VFPUSubModule.scala:63:57]
      uop_expdEnd <= io_in_bits_uop_expdEnd;	// @[VFPUSubModule.scala:63:57]
      uop_sysUop_robIdx_flag <= io_in_bits_uop_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
      uop_sysUop_robIdx_value <= io_in_bits_uop_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
      uop_maskKeep <= io_in_bits_uop_maskKeep;	// @[VFPUSubModule.scala:63:57]
      uop_maskOff <= io_in_bits_uop_maskOff;	// @[VFPUSubModule.scala:63:57]
      uop_vfpCtrl_miscCmd <= io_in_bits_uop_vfpCtrl_miscCmd;	// @[VFPUSubModule.scala:63:57]
      uop_vfpCtrl_miscSubCmd <= io_in_bits_uop_vfpCtrl_miscSubCmd;	// @[VFPUSubModule.scala:63:57]
      uop_typeTag <= io_in_bits_uop_typeTag;	// @[VFPUSubModule.scala:63:57]
      vs1 <= io_in_bits_vs1;	// @[Reg.scala:19:16]
      vs2 <= io_in_bits_vs2;	// @[Reg.scala:19:16]
      mask <= io_in_bits_mask;	// @[Reg.scala:19:16]
      eleActives_0 <= ~(io_in_bits_prestart[0]) & ~(io_in_bits_tail[0]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[0]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      eleActives_1 <= ~(io_in_bits_prestart[4]) & ~(io_in_bits_tail[4]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[4]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      narrow_eleActives_0 <= ~(io_in_bits_prestart[0]) & ~(io_in_bits_tail[0]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[0]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      narrow_eleActives_1 <= ~(io_in_bits_prestart[1]) & ~(io_in_bits_tail[1]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[1]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
    end
    if (_io_out_bits_fflags_T) begin	// @[VFPUSubModule.scala:88:49]
      REG_2_ctrl_lsrc_0 <= uop_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_lsrc_1 <= uop_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_ldest <= uop_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_vm <= uop_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_funct6 <= uop_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_funct3 <= uop_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_widen <= uop_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_widen2 <= uop_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_narrow <= uop_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_narrow_to_1 <= uop_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vstart <= uop_info_vstart;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vl <= uop_info_vl;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vxrm <= uop_info_vxrm;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_frm <= uop_info_frm;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vlmul <= uop_info_vlmul;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vsew <= uop_info_vsew;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_ma <= uop_info_ma;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_ta <= uop_info_ta;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_destEew <= uop_info_destEew;	// @[VFPUSubModule.scala:63:57]
      REG_2_expdIdx <= uop_expdIdx;	// @[VFPUSubModule.scala:63:57]
      REG_2_expdEnd <= uop_expdEnd;	// @[VFPUSubModule.scala:63:57]
      REG_2_sysUop_robIdx_flag <= uop_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
      REG_2_sysUop_robIdx_value <= uop_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
      REG_2_maskKeep <= uop_maskKeep;	// @[VFPUSubModule.scala:63:57]
      REG_2_maskOff <= uop_maskOff;	// @[VFPUSubModule.scala:63:57]
      io_out_bits_vd_r <= (uop_vfpCtrl_miscCmd[0] ? {~uop_ctrl_vm & (uop_typeTag & ~(mask[0]) | ~uop_typeTag & ~(mask[4])) ? vs2[63:32] : vs1[63:32], uop_ctrl_vm | mask[0] ? vs1[31:0] : vs2[31:0]} : 64'h0) | (uop_vfpCtrl_miscCmd[1] ? (uop_typeTag ? _dcmp_io_minmaxResult : {_scmp1_io_minmaxResult, _scmp2_io_minmaxResult}) : 64'h0) | (uop_vfpCtrl_miscCmd[2] ? {uop_vfpCtrl_miscSubCmd[1] ? vs1[63] ^ vs2[63] : uop_vfpCtrl_miscSubCmd[0] ^ vs1[63], vs2[62:32], uop_typeTag ? vs2[31] : uop_vfpCtrl_miscSubCmd[1] ? vs1[31] ^ vs2[31] : uop_vfpCtrl_miscSubCmd[0] ^ vs1[31], vs2[30:0]} : 64'h0) | (uop_vfpCtrl_miscCmd[3] ? (uop_typeTag ? {63'h7FFFFFFFFFFFFFFF, _dcmp_io_cmpResult} : {62'h3FFFFFFFFFFFFFFF, _scmp1_io_cmpResult, _scmp2_io_cmpResult}) : 64'h0) | (uop_vfpCtrl_miscCmd[4] ? (uop_typeTag ? {54'h0, clsResult_decode_2_isNaN & vs2[51], clsResult_decode_2_isNaN & ~(vs2[51]), clsResult_decode_2_isInf & ~(vs2[63]), clsResult_isNormal_2 & ~(vs2[63]), clsResult_decode_2_isSubnormal & ~(vs2[63]), clsResult_decode_2_isZero & ~(vs2[63]), clsResult_decode_2_isZero & vs2[63], clsResult_decode_2_isSubnormal & vs2[63], clsResult_isNormal_2 & vs2[63], clsResult_decode_2_isInf & vs2[63]} : {22'h0, clsResult_decode_isNaN & vs2[54], clsResult_decode_isNaN & ~(vs2[54]), clsResult_decode_isInf & ~(vs2[63]), clsResult_isNormal & ~(vs2[63]), clsResult_decode_isSubnormal & ~(vs2[63]), clsResult_decode_isZero & ~(vs2[63]), clsResult_decode_isZero & vs2[63], clsResult_decode_isSubnormal & vs2[63], clsResult_isNormal & vs2[63], clsResult_decode_isInf & vs2[63], 22'h0, clsResult_decode_1_isNaN & vs2[22], clsResult_decode_1_isNaN & ~(vs2[22]), clsResult_decode_1_isInf & ~(vs2[31]), clsResult_isNormal_1 & ~(vs2[31]), clsResult_decode_1_isSubnormal & ~(vs2[31]), clsResult_decode_1_isZero & ~(vs2[31]), clsResult_decode_1_isZero & vs2[31], clsResult_decode_1_isSubnormal & vs2[31], clsResult_isNormal_1 & vs2[31], clsResult_decode_1_isInf & vs2[31]}) : 64'h0);	// @[Cat.scala:33:92, Mux.scala:27:73, Reg.scala:19:16, VFMisc.scala:101:{39,57,65,69,74,82,100}, :103:20, :104:{8,19,54}, :109:21, :110:21, :111:20, :113:15, :114:15, :117:25, :118:25, :119:30, :120:{27,32}, :124:30, :125:18, :126:{15,22}, :138:22, :149:38, :153:{20,23}, :154:16, :155:26, :156:21, :157:21, :158:26, :159:16, :160:20, :168:{24,25,46}, :169:24, :170:{18,44,47,57,82,85,90}, :177:39, VFPUSubModule.scala:63:57, package.scala:45:46, :46:40, :47:41, :48:40, :49:{37,40,49}, :50:37, :63:19]
      io_out_bits_fflags_r <= (uop_vfpCtrl_miscCmd[1] ? {uop_typeTag ? _dcmp_io_minmaxInvalid & eleActives_0 : _scmp1_io_minmaxInvalid & eleActives_1 | _scmp2_io_minmaxInvalid & eleActives_0, 4'h0} : 5'h0) | (uop_vfpCtrl_miscCmd[3] ? {uop_typeTag ? _dcmp_io_cmpInvalid & narrow_eleActives_0 : _scmp1_io_cmpInvalid & narrow_eleActives_1 | _scmp2_io_cmpInvalid & narrow_eleActives_0, 4'h0} : 5'h0);	// @[Cat.scala:33:92, Mux.scala:27:73, Reg.scala:19:16, VFMisc.scala:87:16, :109:21, :110:21, :111:20, :121:{29,56}, :122:{26,50}, :124:30, :127:17, :128:{38,66}, :129:14, :130:{35,70}, :177:39, VFPUSubModule.scala:63:57]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        REG = _RANDOM_0[0];	// @[VFPUSubModule.scala:59:60]
        REG_1 = _RANDOM_0[1];	// @[VFPUSubModule.scala:59:60]
        uop_ctrl_lsrc_0 = _RANDOM_0[6:2];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_lsrc_1 = _RANDOM_0[11:7];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_ldest = _RANDOM_0[16:12];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_vm = _RANDOM_0[17];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_funct6 = _RANDOM_0[23:18];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_funct3 = _RANDOM_0[26:24];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_widen = _RANDOM_0[27];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_widen2 = _RANDOM_0[28];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_narrow = _RANDOM_0[29];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_ctrl_narrow_to_1 = _RANDOM_0[30];	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_info_vstart = {_RANDOM_0[31], _RANDOM_1[5:0]};	// @[VFPUSubModule.scala:59:60, :63:57]
        uop_info_vl = _RANDOM_1[13:6];	// @[VFPUSubModule.scala:63:57]
        uop_info_vxrm = _RANDOM_1[15:14];	// @[VFPUSubModule.scala:63:57]
        uop_info_frm = _RANDOM_1[18:16];	// @[VFPUSubModule.scala:63:57]
        uop_info_vlmul = _RANDOM_1[21:19];	// @[VFPUSubModule.scala:63:57]
        uop_info_vsew = _RANDOM_1[24:22];	// @[VFPUSubModule.scala:63:57]
        uop_info_ma = _RANDOM_1[25];	// @[VFPUSubModule.scala:63:57]
        uop_info_ta = _RANDOM_1[26];	// @[VFPUSubModule.scala:63:57]
        uop_info_destEew = _RANDOM_1[29:27];	// @[VFPUSubModule.scala:63:57]
        uop_expdIdx = {_RANDOM_1[31:30], _RANDOM_2[0]};	// @[VFPUSubModule.scala:63:57]
        uop_expdEnd = _RANDOM_2[1];	// @[VFPUSubModule.scala:63:57]
        uop_sysUop_robIdx_flag = _RANDOM_2[3];	// @[VFPUSubModule.scala:63:57]
        uop_sysUop_robIdx_value = _RANDOM_2[11:4];	// @[VFPUSubModule.scala:63:57]
        uop_maskKeep = {_RANDOM_2[31:12], _RANDOM_3, _RANDOM_4[11:0]};	// @[VFPUSubModule.scala:63:57]
        uop_maskOff = {_RANDOM_4[31:12], _RANDOM_5, _RANDOM_6[11:0]};	// @[VFPUSubModule.scala:63:57]
        uop_vfpCtrl_miscCmd = _RANDOM_6[30:26];	// @[VFPUSubModule.scala:63:57]
        uop_vfpCtrl_miscSubCmd = {_RANDOM_6[31], _RANDOM_7[1:0]};	// @[VFPUSubModule.scala:63:57]
        uop_typeTag = _RANDOM_7[7];	// @[VFPUSubModule.scala:63:57]
        REG_2_ctrl_lsrc_0 = _RANDOM_7[13:9];	// @[VFPUSubModule.scala:63:57]
        REG_2_ctrl_lsrc_1 = _RANDOM_7[18:14];	// @[VFPUSubModule.scala:63:57]
        REG_2_ctrl_ldest = _RANDOM_7[23:19];	// @[VFPUSubModule.scala:63:57]
        REG_2_ctrl_vm = _RANDOM_7[24];	// @[VFPUSubModule.scala:63:57]
        REG_2_ctrl_funct6 = _RANDOM_7[30:25];	// @[VFPUSubModule.scala:63:57]
        REG_2_ctrl_funct3 = {_RANDOM_7[31], _RANDOM_8[1:0]};	// @[VFPUSubModule.scala:63:57]
        REG_2_ctrl_widen = _RANDOM_8[2];	// @[VFPUSubModule.scala:63:57]
        REG_2_ctrl_widen2 = _RANDOM_8[3];	// @[VFPUSubModule.scala:63:57]
        REG_2_ctrl_narrow = _RANDOM_8[4];	// @[VFPUSubModule.scala:63:57]
        REG_2_ctrl_narrow_to_1 = _RANDOM_8[5];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vstart = _RANDOM_8[12:6];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vl = _RANDOM_8[20:13];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vxrm = _RANDOM_8[22:21];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_frm = _RANDOM_8[25:23];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vlmul = _RANDOM_8[28:26];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vsew = _RANDOM_8[31:29];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_ma = _RANDOM_9[0];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_ta = _RANDOM_9[1];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_destEew = _RANDOM_9[4:2];	// @[VFPUSubModule.scala:63:57]
        REG_2_expdIdx = _RANDOM_9[7:5];	// @[VFPUSubModule.scala:63:57]
        REG_2_expdEnd = _RANDOM_9[8];	// @[VFPUSubModule.scala:63:57]
        REG_2_sysUop_robIdx_flag = _RANDOM_9[10];	// @[VFPUSubModule.scala:63:57]
        REG_2_sysUop_robIdx_value = _RANDOM_9[18:11];	// @[VFPUSubModule.scala:63:57]
        REG_2_maskKeep = {_RANDOM_9[31:19], _RANDOM_10, _RANDOM_11[18:0]};	// @[VFPUSubModule.scala:63:57]
        REG_2_maskOff = {_RANDOM_11[31:19], _RANDOM_12, _RANDOM_13[18:0]};	// @[VFPUSubModule.scala:63:57]
        vs1 = {_RANDOM_14[31:16], _RANDOM_15, _RANDOM_16[15:0]};	// @[Reg.scala:19:16]
        vs2 = {_RANDOM_16[31:16], _RANDOM_17, _RANDOM_18[15:0]};	// @[Reg.scala:19:16]
        mask = _RANDOM_18[23:16];	// @[Reg.scala:19:16]
        eleActives_0 = _RANDOM_18[24];	// @[Reg.scala:19:16]
        eleActives_1 = _RANDOM_18[25];	// @[Reg.scala:19:16]
        narrow_eleActives_0 = _RANDOM_18[26];	// @[Reg.scala:19:16]
        narrow_eleActives_1 = _RANDOM_18[27];	// @[Reg.scala:19:16]
        io_out_bits_vd_r = {_RANDOM_18[31:28], _RANDOM_19, _RANDOM_20[27:0]};	// @[Reg.scala:19:16]
        io_out_bits_fflags_r = {_RANDOM_20[31:28], _RANDOM_21[0]};	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  VFCMP scmp1 (	// @[VFMisc.scala:109:21]
    .io_a             (vs2[63:32]),	// @[Reg.scala:19:16, VFMisc.scala:117:25]
    .io_b             (vs1[63:32]),	// @[Reg.scala:19:16, VFMisc.scala:118:25]
    .io_cmd           (uop_vfpCtrl_miscSubCmd),	// @[VFPUSubModule.scala:63:57]
    .io_minmaxResult  (_scmp1_io_minmaxResult),
    .io_cmpResult     (_scmp1_io_cmpResult),
    .io_cmpInvalid    (_scmp1_io_cmpInvalid),
    .io_minmaxInvalid (_scmp1_io_minmaxInvalid)
  );
  VFCMP scmp2 (	// @[VFMisc.scala:110:21]
    .io_a             (vs2[31:0]),	// @[Reg.scala:19:16, VFMisc.scala:113:15]
    .io_b             (vs1[31:0]),	// @[Reg.scala:19:16, VFMisc.scala:114:15]
    .io_cmd           (uop_vfpCtrl_miscSubCmd),	// @[VFPUSubModule.scala:63:57]
    .io_minmaxResult  (_scmp2_io_minmaxResult),
    .io_cmpResult     (_scmp2_io_cmpResult),
    .io_cmpInvalid    (_scmp2_io_cmpInvalid),
    .io_minmaxInvalid (_scmp2_io_minmaxInvalid)
  );
  VFCMP_2 dcmp (	// @[VFMisc.scala:111:20]
    .io_a             (vs2),	// @[Reg.scala:19:16]
    .io_b             (vs1),	// @[Reg.scala:19:16]
    .io_cmd           (uop_vfpCtrl_miscSubCmd),	// @[VFPUSubModule.scala:63:57]
    .io_minmaxResult  (_dcmp_io_minmaxResult),
    .io_cmpResult     (_dcmp_io_cmpResult),
    .io_cmpInvalid    (_dcmp_io_cmpInvalid),
    .io_minmaxInvalid (_dcmp_io_minmaxInvalid)
  );
  assign io_in_ready = _WIRE;	// @[VFPUSubModule.scala:70:35]
  assign io_out_valid = REG_1;	// @[VFPUSubModule.scala:59:60]
  assign io_out_bits_vd = io_out_bits_vd_r;	// @[Reg.scala:19:16]
  assign io_out_bits_fflags = io_out_bits_fflags_r;	// @[Reg.scala:19:16]
  assign io_out_bits_uop_ctrl_lsrc_0 = REG_2_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_lsrc_1 = REG_2_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_ldest = REG_2_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_vm = REG_2_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_funct6 = REG_2_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_funct3 = REG_2_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_widen = REG_2_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_widen2 = REG_2_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_narrow = REG_2_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_narrow_to_1 = REG_2_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vstart = REG_2_info_vstart;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vl = REG_2_info_vl;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vxrm = REG_2_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_frm = REG_2_info_frm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vlmul = REG_2_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vsew = REG_2_info_vsew;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_ma = REG_2_info_ma;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_ta = REG_2_info_ta;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_destEew = REG_2_info_destEew;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_expdIdx = REG_2_expdIdx;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_expdEnd = REG_2_expdEnd;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_sysUop_robIdx_flag = REG_2_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_sysUop_robIdx_value = REG_2_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_maskKeep = REG_2_maskKeep;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_maskOff = REG_2_maskOff;	// @[VFPUSubModule.scala:63:57]
endmodule

