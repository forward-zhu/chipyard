// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VFCMP_2(
  input  [63:0] io_a,
                io_b,
  input  [2:0]  io_cmd,
  output [63:0] io_minmaxResult,
  output        io_cmpResult,
                io_cmpInvalid,
                io_minmaxInvalid
);

  wire        decode_a_isNaN = (&(io_a[62:52])) & (|(io_a[51:0]));	// @[package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire        decode_b_isNaN = (&(io_b[62:52])) & (|(io_b[51:0]));	// @[package.scala:37:31, :38:31, :48:40, :64:18, :65:18]
  wire        hasNaN = decode_a_isNaN | decode_b_isNaN;	// @[VFMisc.scala:34:31, package.scala:48:40]
  wire        hasSNaN = decode_a_isNaN & ~(io_a[51]) | decode_b_isNaN & ~(io_b[51]);	// @[VFMisc.scala:36:33, package.scala:48:40, :49:{37,40,49}]
  wire        bothZero = io_a[62:52] == 11'h0 & ~(|(io_a[51:0])) & io_b[62:52] == 11'h0 & ~(|(io_b[51:0]));	// @[VFMisc.scala:37:34, package.scala:36:31, :38:31, :44:27, :64:18, :65:18]
  wire        same_sign = io_a[63] == io_b[63];	// @[VFMisc.scala:39:29, package.scala:63:19]
  wire [64:0] _GEN = {1'h0, io_a} - {1'h0, io_b};	// @[VFMisc.scala:40:36, package.scala:41:27]
  wire        uint_less = io_a[63] ^ _GEN[64];	// @[VFMisc.scala:40:36, :42:{29,45}, package.scala:63:19]
  wire        lt = same_sign ? uint_less & (|(_GEN[63:0])) : io_a[63] & ~bothZero;	// @[VFMisc.scala:37:34, :39:29, :40:36, :41:{31,35}, :42:29, :46:{15,37,60,63}, package.scala:63:19]
  wire        _GEN_0 = (&io_cmd) & ~hasNaN & (same_sign ? ~uint_less | ~(|(_GEN[63:0])) : ~(io_a[63]) | bothZero);	// @[VFMisc.scala:34:31, :37:34, :39:29, :40:36, :41:{31,35}, :42:29, :47:{27,51}, :48:{15,38,61}, :51:16, :52:18, :58:{26,29}, package.scala:63:19]
  wire [7:0]  _GEN_1 = {{_GEN_0}, {_GEN_0}, {~hasNaN & (same_sign ? ~uint_less & (|(_GEN[63:0])) : ~(io_a[63]) & ~bothZero)}, {hasNaN | (|(_GEN[63:0])) & ~bothZero}, {~hasNaN & lt}, {_GEN_0}, {~hasNaN & (same_sign ? uint_less | ~(|(_GEN[63:0])) : io_a[63] | bothZero)}, {~hasNaN & (~(|(_GEN[63:0])) | bothZero)}};	// @[VFMisc.scala:34:31, :37:34, :39:29, :40:36, :41:{31,35}, :42:29, :45:{15,37,59}, :46:{15,63}, :47:{15,27,38,51,62}, :49:20, :50:21, :51:16, :52:18, :53:{26,29,37}, :54:{26,37}, :55:{26,29,37}, :56:{26,29,37}, :57:{26,29,37}, :58:26, package.scala:63:19]
  assign io_minmaxResult = decode_a_isNaN & decode_b_isNaN ? 64'h7FF8000000000000 : decode_b_isNaN | (bothZero ? io_a[63] ^ io_cmd[1] : ~decode_a_isNaN & (lt ^ io_cmd[1])) ? io_a : io_b;	// @[Cat.scala:33:92, VFMisc.scala:35:32, :37:34, :43:48, :46:15, :68:35, :69:{23,44,55,71,78}, :71:25, :74:8, package.scala:48:40, :63:19]
  assign io_cmpResult = _GEN_1[io_cmd];	// @[VFMisc.scala:52:18, :53:26, :54:26, :55:26, :56:26, :57:26]
  assign io_cmpInvalid = hasSNaN | (io_cmd[0] | io_cmd[1]) & hasNaN;	// @[VFMisc.scala:34:31, :36:33, :43:{25,36,40,48,53}]
  assign io_minmaxInvalid = hasSNaN;	// @[VFMisc.scala:36:33]
endmodule

