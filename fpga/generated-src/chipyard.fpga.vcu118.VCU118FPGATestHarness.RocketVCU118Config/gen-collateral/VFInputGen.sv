// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VFInputGen(
  input  [4:0]  io_in_uop_ctrl_lsrc_0,
  input         io_in_uop_ctrl_vm,
  input  [5:0]  io_in_uop_ctrl_funct6,
  input  [2:0]  io_in_uop_ctrl_funct3,
  input         io_in_uop_ctrl_narrow_to_1,
  input  [6:0]  io_in_uop_info_vstart,
  input  [7:0]  io_in_uop_info_vl,
  input  [2:0]  io_in_uop_info_frm,
                io_in_uop_info_vsew,
  input         io_in_uop_info_ma,
                io_in_uop_info_ta,
  input  [63:0] io_in_vs1,
                io_in_vs2,
                io_in_old_vd,
                io_in_rs1,
  input  [7:0]  io_in_prestart,
                io_in_mask,
                io_in_tail,
  output [63:0] io_out_vs1,
                io_out_vs2,
  output [7:0]  io_out_prestart,
                io_out_mask,
                io_out_tail,
  output        io_out_uop_ctrl_vm,
  output [2:0]  io_out_uop_info_frm,
  output [63:0] io_out_uop_maskKeep,
                io_out_uop_maskOff,
  output        io_out_uop_vfpCtrl_isDivSqrt,
                io_out_uop_vfpCtrl_isSqrt,
                io_out_uop_vfpCtrl_divReverse,
                io_out_uop_typeTag
);

  wire [63:0] _maskGen_io_maskKeep;	// @[VFPUTop.scala:164:23]
  wire [63:0] _maskGen_io_maskOff;	// @[VFPUTop.scala:164:23]
  wire [7:0]  _maskGen_io_maskKeep_cmp;	// @[VFPUTop.scala:164:23]
  wire [7:0]  _maskGen_io_maskOff_cmp;	// @[VFPUTop.scala:164:23]
  wire [1:0]  _vfpCtrl_d_io_fpCtrl_fmaCmd;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_negVs1;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_negVs2;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_negVd;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_switchVdVs2;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_isCvt;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_cvtSigned;	// @[VFDecoder.scala:166:19]
  wire [2:0]  _vfpCtrl_d_io_fpCtrl_cvtCmd;	// @[VFDecoder.scala:166:19]
  wire [1:0]  _vfpCtrl_d_io_fpCtrl_cvtRm;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_isMisc;	// @[VFDecoder.scala:166:19]
  wire [4:0]  _vfpCtrl_d_io_fpCtrl_miscCmd;	// @[VFDecoder.scala:166:19]
  wire [2:0]  _vfpCtrl_d_io_fpCtrl_miscSubCmd;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_isRec7;	// @[VFDecoder.scala:166:19]
  wire        _vfpCtrl_d_io_fpCtrl_isRecSqrt7;	// @[VFDecoder.scala:166:19]
  wire        _GEN = io_in_uop_info_vsew != 3'h2;	// @[VFPU.scala:28:14]
  VFDecoder vfpCtrl_d (	// @[VFDecoder.scala:166:19]
    .io_instr              ({io_in_uop_ctrl_funct6, io_in_uop_ctrl_vm, 5'h0, io_in_uop_ctrl_lsrc_0, io_in_uop_ctrl_funct3, 5'h0}),	// @[Cat.scala:33:92]
    .io_fpCtrl_fmaCmd      (_vfpCtrl_d_io_fpCtrl_fmaCmd),
    .io_fpCtrl_negVs1      (_vfpCtrl_d_io_fpCtrl_negVs1),
    .io_fpCtrl_negVs2      (_vfpCtrl_d_io_fpCtrl_negVs2),
    .io_fpCtrl_negVd       (_vfpCtrl_d_io_fpCtrl_negVd),
    .io_fpCtrl_switchVdVs2 (_vfpCtrl_d_io_fpCtrl_switchVdVs2),
    .io_fpCtrl_isCvt       (_vfpCtrl_d_io_fpCtrl_isCvt),
    .io_fpCtrl_cvtSigned   (_vfpCtrl_d_io_fpCtrl_cvtSigned),
    .io_fpCtrl_cvtCmd      (_vfpCtrl_d_io_fpCtrl_cvtCmd),
    .io_fpCtrl_cvtRm       (_vfpCtrl_d_io_fpCtrl_cvtRm),
    .io_fpCtrl_isMisc      (_vfpCtrl_d_io_fpCtrl_isMisc),
    .io_fpCtrl_miscCmd     (_vfpCtrl_d_io_fpCtrl_miscCmd),
    .io_fpCtrl_miscSubCmd  (_vfpCtrl_d_io_fpCtrl_miscSubCmd),
    .io_fpCtrl_isRec7      (_vfpCtrl_d_io_fpCtrl_isRec7),
    .io_fpCtrl_isRecSqrt7  (_vfpCtrl_d_io_fpCtrl_isRecSqrt7),
    .io_fpCtrl_isDivSqrt   (io_out_uop_vfpCtrl_isDivSqrt),
    .io_fpCtrl_isSqrt      (io_out_uop_vfpCtrl_isSqrt),
    .io_fpCtrl_divReverse  (io_out_uop_vfpCtrl_divReverse)
  );
  MaskTailData maskGen (	// @[VFPUTop.scala:164:23]
    .io_mask                 (io_in_mask),
    .io_tail                 (io_in_tail),
    .io_prestart             (io_in_prestart),
    .io_vstart_gte_vl        ({1'h0, io_in_uop_info_vstart} >= io_in_uop_info_vl),	// @[VFPUTop.scala:161:45]
    .io_oldVd                (io_in_old_vd),
    .io_uop_ctrl_vm          (io_in_uop_ctrl_vm),
    .io_uop_ctrl_funct6      (io_in_uop_ctrl_funct6),
    .io_uop_ctrl_narrow_to_1 (io_in_uop_ctrl_narrow_to_1),
    .io_uop_info_ma          (io_in_uop_info_ma),
    .io_uop_info_ta          (io_in_uop_info_ta),
    .io_maskKeep             (_maskGen_io_maskKeep),
    .io_maskOff              (_maskGen_io_maskOff),
    .io_maskKeep_cmp         (_maskGen_io_maskKeep_cmp),
    .io_maskOff_cmp          (_maskGen_io_maskOff_cmp)
  );
  assign io_out_vs1 = io_in_uop_ctrl_funct3[2] & ~_GEN ? {2{(&(io_in_rs1[63:32])) ? io_in_rs1[31:0] : 32'h7FC00000}} : io_in_uop_ctrl_funct3[2] & _GEN ? io_in_rs1 : io_in_vs1;	// @[Cat.scala:33:92, VFPU.scala:28:14, :38:{25,34}, :41:10, :42:15, VFPUTop.scala:152:20, :153:{13,24}, :155:{8,17}, VFuBundles.scala:151:18]
  assign io_out_vs2 = io_in_vs2;
  assign io_out_prestart = io_in_prestart;
  assign io_out_mask = io_in_mask;
  assign io_out_tail = io_in_tail;
  assign io_out_uop_ctrl_vm = io_in_uop_ctrl_vm;
  assign io_out_uop_info_frm = io_in_uop_info_frm;
  assign io_out_uop_maskKeep = io_in_uop_ctrl_funct6[5:3] == 3'h3 ? {56'h0, _maskGen_io_maskKeep_cmp} : _maskGen_io_maskKeep;	// @[VFPUTop.scala:164:23, :178:29, :182:{26,33}]
  assign io_out_uop_maskOff = io_in_uop_ctrl_funct6[5:3] == 3'h3 ? {56'h0, _maskGen_io_maskOff_cmp} : _maskGen_io_maskOff;	// @[VFPUTop.scala:164:23, :178:29, :179:28, :182:{26,33}]
  assign io_out_uop_typeTag = _GEN;	// @[VFPU.scala:28:14]
endmodule

