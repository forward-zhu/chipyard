// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VCommit(
  input         io_in_commitInfo_valid,
                io_in_commitInfo_bits_scalarRegWriteEn,
                io_in_commitInfo_bits_floatRegWriteEn,
  input  [4:0]  io_in_commitInfo_bits_ldest,
                io_in_commitInfo_bits_fflags,
  input  [63:0] io_in_commitInfo_bits_data,
  input         io_in_commitInfo_bits_vxsat,
                io_in_excpInfo_exception_vld,
                io_in_excpInfo_update_vl,
  input  [7:0]  io_in_excpInfo_update_data,
  input         io_in_excpInfo_xcpt_cause_ma_ld,
                io_in_excpInfo_xcpt_cause_ma_st,
                io_in_excpInfo_xcpt_cause_pf_ld,
                io_in_excpInfo_xcpt_cause_pf_st,
                io_in_excpInfo_xcpt_cause_gf_ld,
                io_in_excpInfo_xcpt_cause_gf_st,
                io_in_excpInfo_xcpt_cause_ae_ld,
                io_in_excpInfo_xcpt_cause_ae_st,
  input  [63:0] io_in_excpInfo_xcpt_addr,
  input         io_in_excpInfo_illegalInst,
                io_in_excpInfo_update_float,
  input  [4:0]  io_in_excpInfo_reg_idx,
  output        io_out_commitInfo_commit_vld,
                io_out_commitInfo_return_data_vld,
                io_out_commitInfo_return_data_float_vld,
  output [63:0] io_out_commitInfo_return_data,
  output [4:0]  io_out_commitInfo_return_reg_idx,
  output        io_out_commitInfo_exception_vld,
                io_out_commitInfo_illegal_inst,
                io_out_commitInfo_update_vl,
  output [4:0]  io_out_commitInfo_update_vl_data,
  output        io_out_commitInfo_xcpt_cause_ma_ld,
                io_out_commitInfo_xcpt_cause_ma_st,
                io_out_commitInfo_xcpt_cause_pf_ld,
                io_out_commitInfo_xcpt_cause_pf_st,
                io_out_commitInfo_xcpt_cause_gf_ld,
                io_out_commitInfo_xcpt_cause_gf_st,
                io_out_commitInfo_xcpt_cause_ae_ld,
                io_out_commitInfo_xcpt_cause_ae_st,
  output [63:0] io_out_commitInfo_xcpt_addr,
  output        io_out_commitInfo_vxsat,
  output [4:0]  io_out_commitInfo_fflags
);

  assign io_out_commitInfo_commit_vld = io_in_commitInfo_valid | io_in_excpInfo_exception_vld | io_in_excpInfo_update_vl;	// @[VCommit.scala:19:104]
  assign io_out_commitInfo_return_data_vld = io_in_commitInfo_bits_scalarRegWriteEn;
  assign io_out_commitInfo_return_data_float_vld = io_in_commitInfo_bits_floatRegWriteEn | io_in_excpInfo_update_float & io_in_excpInfo_exception_vld;	// @[VCommit.scala:25:{87,119}]
  assign io_out_commitInfo_return_data = io_in_commitInfo_bits_data;
  assign io_out_commitInfo_return_reg_idx = io_in_excpInfo_exception_vld ? io_in_excpInfo_reg_idx : io_in_commitInfo_bits_ldest;	// @[VCommit.scala:26:52]
  assign io_out_commitInfo_exception_vld = io_in_excpInfo_exception_vld;
  assign io_out_commitInfo_illegal_inst = io_in_excpInfo_illegalInst;
  assign io_out_commitInfo_update_vl = io_in_excpInfo_update_vl;
  assign io_out_commitInfo_update_vl_data = io_in_excpInfo_update_data[4:0];	// @[VCommit.scala:23:46]
  assign io_out_commitInfo_xcpt_cause_ma_ld = io_in_excpInfo_xcpt_cause_ma_ld;
  assign io_out_commitInfo_xcpt_cause_ma_st = io_in_excpInfo_xcpt_cause_ma_st;
  assign io_out_commitInfo_xcpt_cause_pf_ld = io_in_excpInfo_xcpt_cause_pf_ld;
  assign io_out_commitInfo_xcpt_cause_pf_st = io_in_excpInfo_xcpt_cause_pf_st;
  assign io_out_commitInfo_xcpt_cause_gf_ld = io_in_excpInfo_xcpt_cause_gf_ld;
  assign io_out_commitInfo_xcpt_cause_gf_st = io_in_excpInfo_xcpt_cause_gf_st;
  assign io_out_commitInfo_xcpt_cause_ae_ld = io_in_excpInfo_xcpt_cause_ae_ld;
  assign io_out_commitInfo_xcpt_cause_ae_st = io_in_excpInfo_xcpt_cause_ae_st;
  assign io_out_commitInfo_xcpt_addr = io_in_excpInfo_xcpt_addr;
  assign io_out_commitInfo_vxsat = io_in_commitInfo_bits_vxsat;
  assign io_out_commitInfo_fflags = io_in_commitInfo_bits_fflags;
endmodule

