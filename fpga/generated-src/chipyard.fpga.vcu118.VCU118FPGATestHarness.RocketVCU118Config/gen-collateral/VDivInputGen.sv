// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VDivInputGen(
  input         io_in_uop_ctrl_vm,
  input  [5:0]  io_in_uop_ctrl_funct6,
  input  [2:0]  io_in_uop_ctrl_funct3,
  input         io_in_uop_ctrl_narrow_to_1,
  input  [6:0]  io_in_uop_info_vstart,
  input  [7:0]  io_in_uop_info_vl,
  input  [2:0]  io_in_uop_info_vsew,
  input         io_in_uop_info_ma,
                io_in_uop_info_ta,
  input  [63:0] io_in_vs1,
                io_in_vs2,
                io_in_old_vd,
                io_in_rs1,
  input  [7:0]  io_in_prestart,
                io_in_mask,
                io_in_tail,
  output [63:0] io_out_vs1,
                io_out_vs2,
  output [5:0]  io_out_uop_ctrl_funct6,
  output [2:0]  io_out_uop_info_vsew,
  output [63:0] io_out_uop_maskKeep,
                io_out_uop_maskOff
);

  wire [7:0] _maskGen_io_maskKeep_cmp;	// @[DivTop.scala:50:23]
  wire [7:0] _maskGen_io_maskOff_cmp;	// @[DivTop.scala:50:23]
  MaskTailData maskGen (	// @[DivTop.scala:50:23]
    .io_mask                 (io_in_mask),
    .io_tail                 (io_in_tail),
    .io_prestart             (io_in_prestart),
    .io_vstart_gte_vl        ({1'h0, io_in_uop_info_vstart} >= io_in_uop_info_vl),	// @[DivTop.scala:47:45]
    .io_oldVd                (io_in_old_vd),
    .io_uop_ctrl_vm          (io_in_uop_ctrl_vm),
    .io_uop_ctrl_funct6      (io_in_uop_ctrl_funct6),
    .io_uop_ctrl_narrow_to_1 (io_in_uop_ctrl_narrow_to_1),
    .io_uop_info_ma          (io_in_uop_info_ma),
    .io_uop_info_ta          (io_in_uop_info_ta),
    .io_maskKeep             (io_out_uop_maskKeep),
    .io_maskOff              (io_out_uop_maskOff),
    .io_maskKeep_cmp         (_maskGen_io_maskKeep_cmp),
    .io_maskOff_cmp          (_maskGen_io_maskOff_cmp)
  );
  assign io_out_vs1 = io_in_uop_ctrl_funct3[2] ? (io_in_uop_info_vsew == 3'h0 ? {8{io_in_rs1[7:0]}} : 64'h0) | (io_in_uop_info_vsew == 3'h1 ? {4{io_in_rs1[15:0]}} : 64'h0) | (io_in_uop_info_vsew == 3'h2 ? {2{io_in_rs1[31:0]}} : 64'h0) | (io_in_uop_info_vsew == 3'h3 ? io_in_rs1 : 64'h0) : io_in_vs1;	// @[Cat.scala:33:92, DivTop.scala:42:35, :44:20, Mux.scala:27:73, :29:36, OneHot.scala:57:35, VFuBundles.scala:151:18]
  assign io_out_vs2 = io_in_vs2;
  assign io_out_uop_ctrl_funct6 = io_in_uop_ctrl_funct6;
  assign io_out_uop_info_vsew = io_in_uop_info_vsew;
endmodule

