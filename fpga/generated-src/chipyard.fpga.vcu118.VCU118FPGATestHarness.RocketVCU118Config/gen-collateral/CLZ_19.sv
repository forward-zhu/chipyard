// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module CLZ_19(
  input  [106:0] io_in,
  output [6:0]   io_out
);

  assign io_out =
    io_in[106]
      ? 7'h0
      : io_in[105]
          ? 7'h1
          : io_in[104]
              ? 7'h2
              : io_in[103]
                  ? 7'h3
                  : io_in[102] ? 7'h4 : io_in[101] ? 7'h5 : io_in[100] ? 7'h6 : io_in[99] ? 7'h7 : io_in[98] ? 7'h8 : io_in[97] ? 7'h9 : io_in[96] ? 7'hA : io_in[95] ? 7'hB : io_in[94] ? 7'hC : io_in[93] ? 7'hD : io_in[92] ? 7'hE : io_in[91] ? 7'hF : io_in[90] ? 7'h10 : io_in[89] ? 7'h11 : io_in[88] ? 7'h12 : io_in[87] ? 7'h13 : io_in[86] ? 7'h14 : io_in[85] ? 7'h15 : io_in[84] ? 7'h16 : io_in[83] ? 7'h17 : io_in[82] ? 7'h18 : io_in[81] ? 7'h19 : io_in[80] ? 7'h1A : io_in[79] ? 7'h1B : io_in[78] ? 7'h1C : io_in[77] ? 7'h1D : io_in[76] ? 7'h1E : io_in[75] ? 7'h1F : io_in[74] ? 7'h20 : io_in[73] ? 7'h21 : io_in[72] ? 7'h22 : io_in[71] ? 7'h23 : io_in[70] ? 7'h24 : io_in[69] ? 7'h25 : io_in[68] ? 7'h26 : io_in[67] ? 7'h27 : io_in[66] ? 7'h28 : io_in[65] ? 7'h29 : io_in[64] ? 7'h2A : io_in[63] ? 7'h2B : io_in[62] ? 7'h2C : io_in[61] ? 7'h2D : io_in[60] ? 7'h2E : io_in[59] ? 7'h2F : io_in[58] ? 7'h30 : io_in[57] ? 7'h31 : io_in[56] ? 7'h32 : io_in[55] ? 7'h33 : io_in[54] ? 7'h34 : io_in[53] ? 7'h35 : io_in[52] ? 7'h36 : io_in[51] ? 7'h37 : io_in[50] ? 7'h38 : io_in[49] ? 7'h39 : io_in[48] ? 7'h3A : io_in[47] ? 7'h3B : io_in[46] ? 7'h3C : io_in[45] ? 7'h3D : io_in[44] ? 7'h3E : io_in[43] ? 7'h3F : io_in[42] ? 7'h40 : io_in[41] ? 7'h41 : io_in[40] ? 7'h42 : io_in[39] ? 7'h43 : io_in[38] ? 7'h44 : io_in[37] ? 7'h45 : io_in[36] ? 7'h46 : io_in[35] ? 7'h47 : io_in[34] ? 7'h48 : io_in[33] ? 7'h49 : io_in[32] ? 7'h4A : io_in[31] ? 7'h4B : io_in[30] ? 7'h4C : io_in[29] ? 7'h4D : io_in[28] ? 7'h4E : io_in[27] ? 7'h4F : io_in[26] ? 7'h50 : io_in[25] ? 7'h51 : io_in[24] ? 7'h52 : io_in[23] ? 7'h53 : io_in[22] ? 7'h54 : io_in[21] ? 7'h55 : io_in[20] ? 7'h56 : io_in[19] ? 7'h57 : io_in[18] ? 7'h58 : io_in[17] ? 7'h59 : io_in[16] ? 7'h5A : io_in[15] ? 7'h5B : io_in[14] ? 7'h5C : io_in[13] ? 7'h5D : io_in[12] ? 7'h5E : io_in[11] ? 7'h5F : io_in[10] ? 7'h60 : io_in[9] ? 7'h61 : io_in[8] ? 7'h62 : io_in[7] ? 7'h63 : io_in[6] ? 7'h64 : io_in[5] ? 7'h65 : io_in[4] ? 7'h66 : io_in[3] ? 7'h67 : io_in[2] ? 7'h68 : io_in[1] ? 7'h69 : 7'h6A;	// @[CLZ.scala:18:42, Mux.scala:47:70]
endmodule

