// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module VFADD_pipe(
  input          clock,
                 reset,
                 io_in_valid,
  input  [63:0]  io_in_bits_vs1,
                 io_in_bits_vs2,
  input  [7:0]   io_in_bits_prestart,
                 io_in_bits_mask,
                 io_in_bits_tail,
  input  [4:0]   io_in_bits_uop_ctrl_lsrc_0,
                 io_in_bits_uop_ctrl_lsrc_1,
                 io_in_bits_uop_ctrl_ldest,
  input          io_in_bits_uop_ctrl_vm,
  input  [5:0]   io_in_bits_uop_ctrl_funct6,
  input  [2:0]   io_in_bits_uop_ctrl_funct3,
  input          io_in_bits_uop_ctrl_widen,
                 io_in_bits_uop_ctrl_widen2,
                 io_in_bits_uop_ctrl_narrow,
                 io_in_bits_uop_ctrl_narrow_to_1,
  input  [6:0]   io_in_bits_uop_info_vstart,
  input  [7:0]   io_in_bits_uop_info_vl,
  input  [1:0]   io_in_bits_uop_info_vxrm,
  input  [2:0]   io_in_bits_uop_info_frm,
                 io_in_bits_uop_info_vlmul,
                 io_in_bits_uop_info_vsew,
  input          io_in_bits_uop_info_ma,
                 io_in_bits_uop_info_ta,
  input  [2:0]   io_in_bits_uop_info_destEew,
                 io_in_bits_uop_expdIdx,
  input          io_in_bits_uop_expdEnd,
                 io_in_bits_uop_sysUop_robIdx_flag,
  input  [7:0]   io_in_bits_uop_sysUop_robIdx_value,
  input  [63:0]  io_in_bits_uop_maskKeep,
                 io_in_bits_uop_maskOff,
  input          io_in_bits_uop_typeTag,
                 mulToAddVec_mulOutElmt0Vec_1_fp_prod_sign,
  input  [10:0]  mulToAddVec_mulOutElmt0Vec_1_fp_prod_exp,
  input  [104:0] mulToAddVec_mulOutElmt0Vec_1_fp_prod_sig,
  input          mulToAddVec_mulOutElmt0Vec_1_inter_flags_isNaN,
                 mulToAddVec_mulOutElmt0Vec_1_inter_flags_isInf,
                 mulToAddVec_mulOutElmt0Vec_1_inter_flags_isInv,
                 mulToAddVec_mulOutElmt0Vec_1_inter_flags_overflow,
                 mulToAddVec_mulOutElmt0Vec_0_fp_prod_sign,
  input  [7:0]   mulToAddVec_mulOutElmt0Vec_0_fp_prod_exp,
  input  [46:0]  mulToAddVec_mulOutElmt0Vec_0_fp_prod_sig,
  input          mulToAddVec_mulOutElmt0Vec_0_inter_flags_isNaN,
                 mulToAddVec_mulOutElmt0Vec_0_inter_flags_isInf,
                 mulToAddVec_mulOutElmt0Vec_0_inter_flags_isInv,
                 mulToAddVec_mulOutElmt0Vec_0_inter_flags_overflow,
                 mulToAddVec_mulOutElmt1_fp_prod_sign,
  input  [7:0]   mulToAddVec_mulOutElmt1_fp_prod_exp,
  input  [46:0]  mulToAddVec_mulOutElmt1_fp_prod_sig,
  input          mulToAddVec_mulOutElmt1_inter_flags_isNaN,
                 mulToAddVec_mulOutElmt1_inter_flags_isInf,
                 mulToAddVec_mulOutElmt1_inter_flags_isInv,
                 mulToAddVec_mulOutElmt1_inter_flags_overflow,
  input  [63:0]  mulToAddVec_addend,
  input  [2:0]   mulToAddVec_uop_expdIdx,
  input          mulToAddVec_uop_typeTag,
                 isFMA,
  output         io_out_valid,
  output [63:0]  io_out_bits_vd,
  output [4:0]   io_out_bits_fflags,
                 io_out_bits_uop_ctrl_lsrc_0,
                 io_out_bits_uop_ctrl_lsrc_1,
                 io_out_bits_uop_ctrl_ldest,
  output         io_out_bits_uop_ctrl_vm,
  output [5:0]   io_out_bits_uop_ctrl_funct6,
  output [2:0]   io_out_bits_uop_ctrl_funct3,
  output         io_out_bits_uop_ctrl_widen,
                 io_out_bits_uop_ctrl_widen2,
                 io_out_bits_uop_ctrl_narrow,
                 io_out_bits_uop_ctrl_narrow_to_1,
  output [6:0]   io_out_bits_uop_info_vstart,
  output [7:0]   io_out_bits_uop_info_vl,
  output [1:0]   io_out_bits_uop_info_vxrm,
  output [2:0]   io_out_bits_uop_info_frm,
                 io_out_bits_uop_info_vlmul,
                 io_out_bits_uop_info_vsew,
  output         io_out_bits_uop_info_ma,
                 io_out_bits_uop_info_ta,
  output [2:0]   io_out_bits_uop_info_destEew,
                 io_out_bits_uop_expdIdx,
  output         io_out_bits_uop_expdEnd,
                 io_out_bits_uop_sysUop_robIdx_flag,
  output [7:0]   io_out_bits_uop_sysUop_robIdx_value,
  output [63:0]  io_out_bits_uop_maskKeep,
                 io_out_bits_uop_maskOff
);

  wire [31:0]  _stage2Elmt1_io_result;	// @[VFFMA.scala:298:20]
  wire [4:0]   _stage2Elmt1_io_fflags;	// @[VFFMA.scala:298:20]
  wire [2:0]   _stage1Elmt1_io_out_rm;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_far_path_out_sign;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_near_path_out_sign;	// @[VFFMA.scala:297:20]
  wire [7:0]   _stage1Elmt1_io_out_near_path_out_exp;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_special_case_valid;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_special_case_bits_iv;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_special_case_bits_nan;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_special_case_bits_inf_sign;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_small_add;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_far_path_mul_of;	// @[VFFMA.scala:297:20]
  wire [47:0]  _stage1Elmt1_io_out_far_sig_a;	// @[VFFMA.scala:297:20]
  wire [51:0]  _stage1Elmt1_io_out_far_sig_b;	// @[VFFMA.scala:297:20]
  wire [7:0]   _stage1Elmt1_io_out_far_exp_a_vec_0;	// @[VFFMA.scala:297:20]
  wire [7:0]   _stage1Elmt1_io_out_far_exp_a_vec_1;	// @[VFFMA.scala:297:20]
  wire [7:0]   _stage1Elmt1_io_out_far_exp_a_vec_2;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_near_path_sig_is_zero;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_near_path_lza_error;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_near_path_int_bit;	// @[VFFMA.scala:297:20]
  wire [48:0]  _stage1Elmt1_io_out_near_path_sig_raw;	// @[VFFMA.scala:297:20]
  wire [5:0]   _stage1Elmt1_io_out_near_path_lzc;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt1_io_out_sel_far_path;	// @[VFFMA.scala:297:20]
  wire [63:0]  _stage2Elmt0_1_io_result;	// @[VFFMA.scala:298:20]
  wire [4:0]   _stage2Elmt0_1_io_fflags;	// @[VFFMA.scala:298:20]
  wire [2:0]   _stage1Elmt0_1_io_out_rm;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_far_path_out_sign;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_near_path_out_sign;	// @[VFFMA.scala:297:20]
  wire [10:0]  _stage1Elmt0_1_io_out_near_path_out_exp;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_special_case_valid;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_special_case_bits_iv;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_special_case_bits_nan;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_special_case_bits_inf_sign;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_small_add;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_far_path_mul_of;	// @[VFFMA.scala:297:20]
  wire [105:0] _stage1Elmt0_1_io_out_far_sig_a;	// @[VFFMA.scala:297:20]
  wire [109:0] _stage1Elmt0_1_io_out_far_sig_b;	// @[VFFMA.scala:297:20]
  wire [10:0]  _stage1Elmt0_1_io_out_far_exp_a_vec_0;	// @[VFFMA.scala:297:20]
  wire [10:0]  _stage1Elmt0_1_io_out_far_exp_a_vec_1;	// @[VFFMA.scala:297:20]
  wire [10:0]  _stage1Elmt0_1_io_out_far_exp_a_vec_2;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_near_path_sig_is_zero;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_near_path_lza_error;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_near_path_int_bit;	// @[VFFMA.scala:297:20]
  wire [106:0] _stage1Elmt0_1_io_out_near_path_sig_raw;	// @[VFFMA.scala:297:20]
  wire [6:0]   _stage1Elmt0_1_io_out_near_path_lzc;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_1_io_out_sel_far_path;	// @[VFFMA.scala:297:20]
  wire [31:0]  _stage2Elmt0_0_io_result;	// @[VFFMA.scala:298:20]
  wire [4:0]   _stage2Elmt0_0_io_fflags;	// @[VFFMA.scala:298:20]
  wire [2:0]   _stage1Elmt0_0_io_out_rm;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_far_path_out_sign;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_near_path_out_sign;	// @[VFFMA.scala:297:20]
  wire [7:0]   _stage1Elmt0_0_io_out_near_path_out_exp;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_special_case_valid;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_special_case_bits_iv;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_special_case_bits_nan;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_special_case_bits_inf_sign;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_small_add;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_far_path_mul_of;	// @[VFFMA.scala:297:20]
  wire [47:0]  _stage1Elmt0_0_io_out_far_sig_a;	// @[VFFMA.scala:297:20]
  wire [51:0]  _stage1Elmt0_0_io_out_far_sig_b;	// @[VFFMA.scala:297:20]
  wire [7:0]   _stage1Elmt0_0_io_out_far_exp_a_vec_0;	// @[VFFMA.scala:297:20]
  wire [7:0]   _stage1Elmt0_0_io_out_far_exp_a_vec_1;	// @[VFFMA.scala:297:20]
  wire [7:0]   _stage1Elmt0_0_io_out_far_exp_a_vec_2;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_near_path_sig_is_zero;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_near_path_lza_error;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_near_path_int_bit;	// @[VFFMA.scala:297:20]
  wire [48:0]  _stage1Elmt0_0_io_out_near_path_sig_raw;	// @[VFFMA.scala:297:20]
  wire [5:0]   _stage1Elmt0_0_io_out_near_path_lzc;	// @[VFFMA.scala:297:20]
  wire         _stage1Elmt0_0_io_out_sel_far_path;	// @[VFFMA.scala:297:20]
  reg          REG;	// @[VFPUSubModule.scala:59:60]
  reg          REG_1;	// @[VFPUSubModule.scala:59:60]
  reg  [4:0]   REG_2_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]   REG_2_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]   REG_2_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  reg  [5:0]   REG_2_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  reg  [6:0]   REG_2_info_vstart;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]   REG_2_info_vl;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]   REG_2_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_info_frm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_info_vsew;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_info_ma;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_info_ta;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_info_destEew;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_2_expdIdx;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_expdEnd;	// @[VFPUSubModule.scala:63:57]
  reg          REG_2_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]   REG_2_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]  REG_2_maskKeep;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]  REG_2_maskOff;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]   REG_3_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]   REG_3_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  reg  [4:0]   REG_3_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  reg  [5:0]   REG_3_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  reg  [6:0]   REG_3_info_vstart;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]   REG_3_info_vl;	// @[VFPUSubModule.scala:63:57]
  reg  [1:0]   REG_3_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_info_frm;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_info_vsew;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_info_ma;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_info_ta;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_info_destEew;	// @[VFPUSubModule.scala:63:57]
  reg  [2:0]   REG_3_expdIdx;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_expdEnd;	// @[VFPUSubModule.scala:63:57]
  reg          REG_3_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  reg  [7:0]   REG_3_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]  REG_3_maskKeep;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]  REG_3_maskOff;	// @[VFPUSubModule.scala:63:57]
  reg  [63:0]  src1;	// @[Reg.scala:19:16]
  reg  [63:0]  src2;	// @[Reg.scala:19:16]
  reg          eleActives_r_0;	// @[Reg.scala:19:16]
  reg          eleActives_r_1;	// @[Reg.scala:19:16]
  reg          eleActives_0;	// @[Reg.scala:19:16]
  reg          eleActives_1;	// @[Reg.scala:19:16]
  reg  [2:0]   uopIn_expdIdx;	// @[Reg.scala:19:16]
  reg          uopIn_typeTag;	// @[Reg.scala:19:16]
  reg          fma;	// @[Reg.scala:19:16]
  reg          mulProdElmt0Vec_1_fp_prod_sign;	// @[Reg.scala:19:16]
  reg  [10:0]  mulProdElmt0Vec_1_fp_prod_exp;	// @[Reg.scala:19:16]
  reg  [104:0] mulProdElmt0Vec_1_fp_prod_sig;	// @[Reg.scala:19:16]
  reg          mulProdElmt0Vec_1_inter_flags_isNaN;	// @[Reg.scala:19:16]
  reg          mulProdElmt0Vec_1_inter_flags_isInf;	// @[Reg.scala:19:16]
  reg          mulProdElmt0Vec_1_inter_flags_isInv;	// @[Reg.scala:19:16]
  reg          mulProdElmt0Vec_1_inter_flags_overflow;	// @[Reg.scala:19:16]
  reg          mulProdElmt0Vec_0_fp_prod_sign;	// @[Reg.scala:19:16]
  reg  [7:0]   mulProdElmt0Vec_0_fp_prod_exp;	// @[Reg.scala:19:16]
  reg  [46:0]  mulProdElmt0Vec_0_fp_prod_sig;	// @[Reg.scala:19:16]
  reg          mulProdElmt0Vec_0_inter_flags_isNaN;	// @[Reg.scala:19:16]
  reg          mulProdElmt0Vec_0_inter_flags_isInf;	// @[Reg.scala:19:16]
  reg          mulProdElmt0Vec_0_inter_flags_isInv;	// @[Reg.scala:19:16]
  reg          mulProdElmt0Vec_0_inter_flags_overflow;	// @[Reg.scala:19:16]
  reg          mulProdElmt1_fp_prod_sign;	// @[Reg.scala:19:16]
  reg  [7:0]   mulProdElmt1_fp_prod_exp;	// @[Reg.scala:19:16]
  reg  [46:0]  mulProdElmt1_fp_prod_sig;	// @[Reg.scala:19:16]
  reg          mulProdElmt1_inter_flags_isNaN;	// @[Reg.scala:19:16]
  reg          mulProdElmt1_inter_flags_isInf;	// @[Reg.scala:19:16]
  reg          mulProdElmt1_inter_flags_isInv;	// @[Reg.scala:19:16]
  reg          mulProdElmt1_inter_flags_overflow;	// @[Reg.scala:19:16]
  reg  [2:0]   s1_io_rm_r;	// @[Reg.scala:19:16]
  reg  [2:0]   s2_io_in_r_rm;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_far_path_out_sign;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_near_path_out_sign;	// @[Reg.scala:19:16]
  reg  [7:0]   s2_io_in_r_near_path_out_exp;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_special_case_valid;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_special_case_bits_iv;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_special_case_bits_nan;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_special_case_bits_inf_sign;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_small_add;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_far_path_mul_of;	// @[Reg.scala:19:16]
  reg  [47:0]  s2_io_in_r_far_sig_a;	// @[Reg.scala:19:16]
  reg  [51:0]  s2_io_in_r_far_sig_b;	// @[Reg.scala:19:16]
  reg  [7:0]   s2_io_in_r_far_exp_a_vec_0;	// @[Reg.scala:19:16]
  reg  [7:0]   s2_io_in_r_far_exp_a_vec_1;	// @[Reg.scala:19:16]
  reg  [7:0]   s2_io_in_r_far_exp_a_vec_2;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_near_path_sig_is_zero;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_near_path_lza_error;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_near_path_int_bit;	// @[Reg.scala:19:16]
  reg  [48:0]  s2_io_in_r_near_path_sig_raw;	// @[Reg.scala:19:16]
  reg  [5:0]   s2_io_in_r_near_path_lzc;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_sel_far_path;	// @[Reg.scala:19:16]
  reg  [2:0]   s1_io_rm_r_1;	// @[Reg.scala:19:16]
  reg  [2:0]   s2_io_in_r_1_rm;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_far_path_out_sign;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_near_path_out_sign;	// @[Reg.scala:19:16]
  reg  [10:0]  s2_io_in_r_1_near_path_out_exp;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_special_case_valid;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_special_case_bits_iv;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_special_case_bits_nan;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_special_case_bits_inf_sign;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_small_add;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_far_path_mul_of;	// @[Reg.scala:19:16]
  reg  [105:0] s2_io_in_r_1_far_sig_a;	// @[Reg.scala:19:16]
  reg  [109:0] s2_io_in_r_1_far_sig_b;	// @[Reg.scala:19:16]
  reg  [10:0]  s2_io_in_r_1_far_exp_a_vec_0;	// @[Reg.scala:19:16]
  reg  [10:0]  s2_io_in_r_1_far_exp_a_vec_1;	// @[Reg.scala:19:16]
  reg  [10:0]  s2_io_in_r_1_far_exp_a_vec_2;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_near_path_sig_is_zero;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_near_path_lza_error;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_near_path_int_bit;	// @[Reg.scala:19:16]
  reg  [106:0] s2_io_in_r_1_near_path_sig_raw;	// @[Reg.scala:19:16]
  reg  [6:0]   s2_io_in_r_1_near_path_lzc;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_1_sel_far_path;	// @[Reg.scala:19:16]
  reg  [2:0]   s1_io_rm_r_2;	// @[Reg.scala:19:16]
  reg  [2:0]   s2_io_in_r_2_rm;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_far_path_out_sign;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_near_path_out_sign;	// @[Reg.scala:19:16]
  reg  [7:0]   s2_io_in_r_2_near_path_out_exp;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_special_case_valid;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_special_case_bits_iv;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_special_case_bits_nan;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_special_case_bits_inf_sign;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_small_add;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_far_path_mul_of;	// @[Reg.scala:19:16]
  reg  [47:0]  s2_io_in_r_2_far_sig_a;	// @[Reg.scala:19:16]
  reg  [51:0]  s2_io_in_r_2_far_sig_b;	// @[Reg.scala:19:16]
  reg  [7:0]   s2_io_in_r_2_far_exp_a_vec_0;	// @[Reg.scala:19:16]
  reg  [7:0]   s2_io_in_r_2_far_exp_a_vec_1;	// @[Reg.scala:19:16]
  reg  [7:0]   s2_io_in_r_2_far_exp_a_vec_2;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_near_path_sig_is_zero;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_near_path_lza_error;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_near_path_int_bit;	// @[Reg.scala:19:16]
  reg  [48:0]  s2_io_in_r_2_near_path_sig_raw;	// @[Reg.scala:19:16]
  reg  [5:0]   s2_io_in_r_2_near_path_lzc;	// @[Reg.scala:19:16]
  reg          s2_io_in_r_2_sel_far_path;	// @[Reg.scala:19:16]
  reg          outSel_0;	// @[Reg.scala:19:16]
  reg          outSel_1;	// @[Reg.scala:19:16]
  reg          io_out_bits_fflags_r;	// @[Reg.scala:19:16]
  always @(posedge clock) begin
    if (reset) begin
      REG <= 1'h0;	// @[VFPUSubModule.scala:59:60]
      REG_1 <= 1'h0;	// @[VFPUSubModule.scala:59:60]
    end
    else begin
      REG <= io_in_valid;	// @[VFPUSubModule.scala:59:60]
      REG_1 <= REG;	// @[VFPUSubModule.scala:59:60]
    end
    if (io_in_valid) begin
      REG_2_ctrl_lsrc_0 <= io_in_bits_uop_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_lsrc_1 <= io_in_bits_uop_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_ldest <= io_in_bits_uop_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_vm <= io_in_bits_uop_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_funct6 <= io_in_bits_uop_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_funct3 <= io_in_bits_uop_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_widen <= io_in_bits_uop_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_widen2 <= io_in_bits_uop_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_narrow <= io_in_bits_uop_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
      REG_2_ctrl_narrow_to_1 <= io_in_bits_uop_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vstart <= io_in_bits_uop_info_vstart;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vl <= io_in_bits_uop_info_vl;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vxrm <= io_in_bits_uop_info_vxrm;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_frm <= io_in_bits_uop_info_frm;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vlmul <= io_in_bits_uop_info_vlmul;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_vsew <= io_in_bits_uop_info_vsew;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_ma <= io_in_bits_uop_info_ma;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_ta <= io_in_bits_uop_info_ta;	// @[VFPUSubModule.scala:63:57]
      REG_2_info_destEew <= io_in_bits_uop_info_destEew;	// @[VFPUSubModule.scala:63:57]
      REG_2_expdIdx <= io_in_bits_uop_expdIdx;	// @[VFPUSubModule.scala:63:57]
      REG_2_expdEnd <= io_in_bits_uop_expdEnd;	// @[VFPUSubModule.scala:63:57]
      REG_2_sysUop_robIdx_flag <= io_in_bits_uop_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
      REG_2_sysUop_robIdx_value <= io_in_bits_uop_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
      REG_2_maskKeep <= io_in_bits_uop_maskKeep;	// @[VFPUSubModule.scala:63:57]
      REG_2_maskOff <= io_in_bits_uop_maskOff;	// @[VFPUSubModule.scala:63:57]
      src1 <= io_in_bits_vs1;	// @[Reg.scala:19:16]
      if (isFMA) begin
        src2 <= mulToAddVec_addend;	// @[Reg.scala:19:16]
        uopIn_expdIdx <= mulToAddVec_uop_expdIdx;	// @[Reg.scala:19:16]
        uopIn_typeTag <= mulToAddVec_uop_typeTag;	// @[Reg.scala:19:16]
      end
      else begin
        src2 <= io_in_bits_vs2;	// @[Reg.scala:19:16]
        uopIn_expdIdx <= io_in_bits_uop_expdIdx;	// @[Reg.scala:19:16]
        uopIn_typeTag <= io_in_bits_uop_typeTag;	// @[Reg.scala:19:16]
      end
      eleActives_r_0 <= ~(io_in_bits_prestart[0]) & ~(io_in_bits_tail[0]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[0]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      eleActives_r_1 <= ~(io_in_bits_prestart[4]) & ~(io_in_bits_tail[4]) & (io_in_bits_uop_ctrl_vm | io_in_bits_mask[4]);	// @[Reg.scala:19:16, VFPUSubModule.scala:23:{27,47,54,70,75}, :24:{28,45}]
      fma <= isFMA;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_1_fp_prod_sign <= mulToAddVec_mulOutElmt0Vec_1_fp_prod_sign;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_1_fp_prod_exp <= mulToAddVec_mulOutElmt0Vec_1_fp_prod_exp;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_1_fp_prod_sig <= mulToAddVec_mulOutElmt0Vec_1_fp_prod_sig;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_1_inter_flags_isNaN <= mulToAddVec_mulOutElmt0Vec_1_inter_flags_isNaN;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_1_inter_flags_isInf <= mulToAddVec_mulOutElmt0Vec_1_inter_flags_isInf;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_1_inter_flags_isInv <= mulToAddVec_mulOutElmt0Vec_1_inter_flags_isInv;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_1_inter_flags_overflow <= mulToAddVec_mulOutElmt0Vec_1_inter_flags_overflow;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_0_fp_prod_sign <= mulToAddVec_mulOutElmt0Vec_0_fp_prod_sign;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_0_fp_prod_exp <= mulToAddVec_mulOutElmt0Vec_0_fp_prod_exp;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_0_fp_prod_sig <= mulToAddVec_mulOutElmt0Vec_0_fp_prod_sig;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_0_inter_flags_isNaN <= mulToAddVec_mulOutElmt0Vec_0_inter_flags_isNaN;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_0_inter_flags_isInf <= mulToAddVec_mulOutElmt0Vec_0_inter_flags_isInf;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_0_inter_flags_isInv <= mulToAddVec_mulOutElmt0Vec_0_inter_flags_isInv;	// @[Reg.scala:19:16]
      mulProdElmt0Vec_0_inter_flags_overflow <= mulToAddVec_mulOutElmt0Vec_0_inter_flags_overflow;	// @[Reg.scala:19:16]
      mulProdElmt1_fp_prod_sign <= mulToAddVec_mulOutElmt1_fp_prod_sign;	// @[Reg.scala:19:16]
      mulProdElmt1_fp_prod_exp <= mulToAddVec_mulOutElmt1_fp_prod_exp;	// @[Reg.scala:19:16]
      mulProdElmt1_fp_prod_sig <= mulToAddVec_mulOutElmt1_fp_prod_sig;	// @[Reg.scala:19:16]
      mulProdElmt1_inter_flags_isNaN <= mulToAddVec_mulOutElmt1_inter_flags_isNaN;	// @[Reg.scala:19:16]
      mulProdElmt1_inter_flags_isInf <= mulToAddVec_mulOutElmt1_inter_flags_isInf;	// @[Reg.scala:19:16]
      mulProdElmt1_inter_flags_isInv <= mulToAddVec_mulOutElmt1_inter_flags_isInv;	// @[Reg.scala:19:16]
      mulProdElmt1_inter_flags_overflow <= mulToAddVec_mulOutElmt1_inter_flags_overflow;	// @[Reg.scala:19:16]
      s1_io_rm_r <= io_in_bits_uop_info_frm;	// @[Reg.scala:19:16]
      s1_io_rm_r_1 <= io_in_bits_uop_info_frm;	// @[Reg.scala:19:16]
      s1_io_rm_r_2 <= io_in_bits_uop_info_frm;	// @[Reg.scala:19:16]
    end
    if (REG) begin	// @[VFPUSubModule.scala:59:60]
      REG_3_ctrl_lsrc_0 <= REG_2_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_lsrc_1 <= REG_2_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_ldest <= REG_2_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_vm <= REG_2_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_funct6 <= REG_2_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_funct3 <= REG_2_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_widen <= REG_2_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_widen2 <= REG_2_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_narrow <= REG_2_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
      REG_3_ctrl_narrow_to_1 <= REG_2_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_vstart <= REG_2_info_vstart;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_vl <= REG_2_info_vl;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_vxrm <= REG_2_info_vxrm;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_frm <= REG_2_info_frm;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_vlmul <= REG_2_info_vlmul;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_vsew <= REG_2_info_vsew;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_ma <= REG_2_info_ma;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_ta <= REG_2_info_ta;	// @[VFPUSubModule.scala:63:57]
      REG_3_info_destEew <= REG_2_info_destEew;	// @[VFPUSubModule.scala:63:57]
      REG_3_expdIdx <= REG_2_expdIdx;	// @[VFPUSubModule.scala:63:57]
      REG_3_expdEnd <= REG_2_expdEnd;	// @[VFPUSubModule.scala:63:57]
      REG_3_sysUop_robIdx_flag <= REG_2_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
      REG_3_sysUop_robIdx_value <= REG_2_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
      REG_3_maskKeep <= REG_2_maskKeep;	// @[VFPUSubModule.scala:63:57]
      REG_3_maskOff <= REG_2_maskOff;	// @[VFPUSubModule.scala:63:57]
      eleActives_0 <= eleActives_r_0;	// @[Reg.scala:19:16]
      eleActives_1 <= eleActives_r_1;	// @[Reg.scala:19:16]
      s2_io_in_r_rm <= _stage1Elmt0_0_io_out_rm;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_far_path_out_sign <= _stage1Elmt0_0_io_out_far_path_out_sign;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_near_path_out_sign <= _stage1Elmt0_0_io_out_near_path_out_sign;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_near_path_out_exp <= _stage1Elmt0_0_io_out_near_path_out_exp;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_special_case_valid <= _stage1Elmt0_0_io_out_special_case_valid;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_special_case_bits_iv <= _stage1Elmt0_0_io_out_special_case_bits_iv;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_special_case_bits_nan <= _stage1Elmt0_0_io_out_special_case_bits_nan;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_special_case_bits_inf_sign <= _stage1Elmt0_0_io_out_special_case_bits_inf_sign;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_small_add <= _stage1Elmt0_0_io_out_small_add;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_far_path_mul_of <= _stage1Elmt0_0_io_out_far_path_mul_of;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_far_sig_a <= _stage1Elmt0_0_io_out_far_sig_a;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_far_sig_b <= _stage1Elmt0_0_io_out_far_sig_b;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_far_exp_a_vec_0 <= _stage1Elmt0_0_io_out_far_exp_a_vec_0;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_far_exp_a_vec_1 <= _stage1Elmt0_0_io_out_far_exp_a_vec_1;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_far_exp_a_vec_2 <= _stage1Elmt0_0_io_out_far_exp_a_vec_2;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_near_path_sig_is_zero <= _stage1Elmt0_0_io_out_near_path_sig_is_zero;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_near_path_lza_error <= _stage1Elmt0_0_io_out_near_path_lza_error;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_near_path_int_bit <= _stage1Elmt0_0_io_out_near_path_int_bit;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_near_path_sig_raw <= _stage1Elmt0_0_io_out_near_path_sig_raw;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_near_path_lzc <= _stage1Elmt0_0_io_out_near_path_lzc;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_sel_far_path <= _stage1Elmt0_0_io_out_sel_far_path;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_rm <= _stage1Elmt0_1_io_out_rm;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_far_path_out_sign <= _stage1Elmt0_1_io_out_far_path_out_sign;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_near_path_out_sign <= _stage1Elmt0_1_io_out_near_path_out_sign;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_near_path_out_exp <= _stage1Elmt0_1_io_out_near_path_out_exp;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_special_case_valid <= _stage1Elmt0_1_io_out_special_case_valid;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_special_case_bits_iv <= _stage1Elmt0_1_io_out_special_case_bits_iv;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_special_case_bits_nan <= _stage1Elmt0_1_io_out_special_case_bits_nan;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_special_case_bits_inf_sign <= _stage1Elmt0_1_io_out_special_case_bits_inf_sign;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_small_add <= _stage1Elmt0_1_io_out_small_add;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_far_path_mul_of <= _stage1Elmt0_1_io_out_far_path_mul_of;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_far_sig_a <= _stage1Elmt0_1_io_out_far_sig_a;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_far_sig_b <= _stage1Elmt0_1_io_out_far_sig_b;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_far_exp_a_vec_0 <= _stage1Elmt0_1_io_out_far_exp_a_vec_0;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_far_exp_a_vec_1 <= _stage1Elmt0_1_io_out_far_exp_a_vec_1;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_far_exp_a_vec_2 <= _stage1Elmt0_1_io_out_far_exp_a_vec_2;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_near_path_sig_is_zero <= _stage1Elmt0_1_io_out_near_path_sig_is_zero;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_near_path_lza_error <= _stage1Elmt0_1_io_out_near_path_lza_error;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_near_path_int_bit <= _stage1Elmt0_1_io_out_near_path_int_bit;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_near_path_sig_raw <= _stage1Elmt0_1_io_out_near_path_sig_raw;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_near_path_lzc <= _stage1Elmt0_1_io_out_near_path_lzc;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_1_sel_far_path <= _stage1Elmt0_1_io_out_sel_far_path;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_rm <= _stage1Elmt1_io_out_rm;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_far_path_out_sign <= _stage1Elmt1_io_out_far_path_out_sign;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_near_path_out_sign <= _stage1Elmt1_io_out_near_path_out_sign;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_near_path_out_exp <= _stage1Elmt1_io_out_near_path_out_exp;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_special_case_valid <= _stage1Elmt1_io_out_special_case_valid;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_special_case_bits_iv <= _stage1Elmt1_io_out_special_case_bits_iv;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_special_case_bits_nan <= _stage1Elmt1_io_out_special_case_bits_nan;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_special_case_bits_inf_sign <= _stage1Elmt1_io_out_special_case_bits_inf_sign;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_small_add <= _stage1Elmt1_io_out_small_add;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_far_path_mul_of <= _stage1Elmt1_io_out_far_path_mul_of;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_far_sig_a <= _stage1Elmt1_io_out_far_sig_a;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_far_sig_b <= _stage1Elmt1_io_out_far_sig_b;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_far_exp_a_vec_0 <= _stage1Elmt1_io_out_far_exp_a_vec_0;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_far_exp_a_vec_1 <= _stage1Elmt1_io_out_far_exp_a_vec_1;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_far_exp_a_vec_2 <= _stage1Elmt1_io_out_far_exp_a_vec_2;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_near_path_sig_is_zero <= _stage1Elmt1_io_out_near_path_sig_is_zero;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_near_path_lza_error <= _stage1Elmt1_io_out_near_path_lza_error;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_near_path_int_bit <= _stage1Elmt1_io_out_near_path_int_bit;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_near_path_sig_raw <= _stage1Elmt1_io_out_near_path_sig_raw;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_near_path_lzc <= _stage1Elmt1_io_out_near_path_lzc;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      s2_io_in_r_2_sel_far_path <= _stage1Elmt1_io_out_sel_far_path;	// @[Reg.scala:19:16, VFFMA.scala:297:20]
      outSel_0 <= ~uopIn_typeTag;	// @[Reg.scala:19:16, VFFMA.scala:280:66]
      outSel_1 <= uopIn_typeTag;	// @[Reg.scala:19:16]
      io_out_bits_fflags_r <= uopIn_expdIdx[0];	// @[Reg.scala:19:16, VFFMA.scala:290:30]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    logic [31:0] _RANDOM_7;
    logic [31:0] _RANDOM_8;
    logic [31:0] _RANDOM_9;
    logic [31:0] _RANDOM_10;
    logic [31:0] _RANDOM_11;
    logic [31:0] _RANDOM_12;
    logic [31:0] _RANDOM_13;
    logic [31:0] _RANDOM_14;
    logic [31:0] _RANDOM_15;
    logic [31:0] _RANDOM_16;
    logic [31:0] _RANDOM_17;
    logic [31:0] _RANDOM_18;
    logic [31:0] _RANDOM_19;
    logic [31:0] _RANDOM_20;
    logic [31:0] _RANDOM_21;
    logic [31:0] _RANDOM_22;
    logic [31:0] _RANDOM_23;
    logic [31:0] _RANDOM_24;
    logic [31:0] _RANDOM_25;
    logic [31:0] _RANDOM_26;
    logic [31:0] _RANDOM_27;
    logic [31:0] _RANDOM_28;
    logic [31:0] _RANDOM_29;
    logic [31:0] _RANDOM_30;
    logic [31:0] _RANDOM_31;
    logic [31:0] _RANDOM_32;
    logic [31:0] _RANDOM_33;
    logic [31:0] _RANDOM_34;
    logic [31:0] _RANDOM_35;
    logic [31:0] _RANDOM_36;
    logic [31:0] _RANDOM_37;
    logic [31:0] _RANDOM_38;
    logic [31:0] _RANDOM_39;
    logic [31:0] _RANDOM_40;
    logic [31:0] _RANDOM_41;
    logic [31:0] _RANDOM_42;
    logic [31:0] _RANDOM_43;
    logic [31:0] _RANDOM_44;
    logic [31:0] _RANDOM_45;
    logic [31:0] _RANDOM_46;
    logic [31:0] _RANDOM_47;
    logic [31:0] _RANDOM_48;
    logic [31:0] _RANDOM_49;
    logic [31:0] _RANDOM_50;
    logic [31:0] _RANDOM_51;
    logic [31:0] _RANDOM_52;
    logic [31:0] _RANDOM_53;
    logic [31:0] _RANDOM_54;
    logic [31:0] _RANDOM_55;
    logic [31:0] _RANDOM_56;
    logic [31:0] _RANDOM_57;
    logic [31:0] _RANDOM_58;
    logic [31:0] _RANDOM_59;
    logic [31:0] _RANDOM_60;
    logic [31:0] _RANDOM_61;
    logic [31:0] _RANDOM_62;
    logic [31:0] _RANDOM_63;
    logic [31:0] _RANDOM_64;
    logic [31:0] _RANDOM_65;
    logic [31:0] _RANDOM_66;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        _RANDOM_32 = `RANDOM;
        _RANDOM_33 = `RANDOM;
        _RANDOM_34 = `RANDOM;
        _RANDOM_35 = `RANDOM;
        _RANDOM_36 = `RANDOM;
        _RANDOM_37 = `RANDOM;
        _RANDOM_38 = `RANDOM;
        _RANDOM_39 = `RANDOM;
        _RANDOM_40 = `RANDOM;
        _RANDOM_41 = `RANDOM;
        _RANDOM_42 = `RANDOM;
        _RANDOM_43 = `RANDOM;
        _RANDOM_44 = `RANDOM;
        _RANDOM_45 = `RANDOM;
        _RANDOM_46 = `RANDOM;
        _RANDOM_47 = `RANDOM;
        _RANDOM_48 = `RANDOM;
        _RANDOM_49 = `RANDOM;
        _RANDOM_50 = `RANDOM;
        _RANDOM_51 = `RANDOM;
        _RANDOM_52 = `RANDOM;
        _RANDOM_53 = `RANDOM;
        _RANDOM_54 = `RANDOM;
        _RANDOM_55 = `RANDOM;
        _RANDOM_56 = `RANDOM;
        _RANDOM_57 = `RANDOM;
        _RANDOM_58 = `RANDOM;
        _RANDOM_59 = `RANDOM;
        _RANDOM_60 = `RANDOM;
        _RANDOM_61 = `RANDOM;
        _RANDOM_62 = `RANDOM;
        _RANDOM_63 = `RANDOM;
        _RANDOM_64 = `RANDOM;
        _RANDOM_65 = `RANDOM;
        _RANDOM_66 = `RANDOM;
        REG = _RANDOM_0[0];	// @[VFPUSubModule.scala:59:60]
        REG_1 = _RANDOM_0[1];	// @[VFPUSubModule.scala:59:60]
        REG_2_ctrl_lsrc_0 = _RANDOM_0[6:2];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_lsrc_1 = _RANDOM_0[11:7];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_ldest = _RANDOM_0[16:12];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_vm = _RANDOM_0[17];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_funct6 = _RANDOM_0[23:18];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_funct3 = _RANDOM_0[26:24];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_widen = _RANDOM_0[27];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_widen2 = _RANDOM_0[28];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_narrow = _RANDOM_0[29];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_ctrl_narrow_to_1 = _RANDOM_0[30];	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_info_vstart = {_RANDOM_0[31], _RANDOM_1[5:0]};	// @[VFPUSubModule.scala:59:60, :63:57]
        REG_2_info_vl = _RANDOM_1[13:6];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vxrm = _RANDOM_1[15:14];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_frm = _RANDOM_1[18:16];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vlmul = _RANDOM_1[21:19];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_vsew = _RANDOM_1[24:22];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_ma = _RANDOM_1[25];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_ta = _RANDOM_1[26];	// @[VFPUSubModule.scala:63:57]
        REG_2_info_destEew = _RANDOM_1[29:27];	// @[VFPUSubModule.scala:63:57]
        REG_2_expdIdx = {_RANDOM_1[31:30], _RANDOM_2[0]};	// @[VFPUSubModule.scala:63:57]
        REG_2_expdEnd = _RANDOM_2[1];	// @[VFPUSubModule.scala:63:57]
        REG_2_sysUop_robIdx_flag = _RANDOM_2[3];	// @[VFPUSubModule.scala:63:57]
        REG_2_sysUop_robIdx_value = _RANDOM_2[11:4];	// @[VFPUSubModule.scala:63:57]
        REG_2_maskKeep = {_RANDOM_2[31:12], _RANDOM_3, _RANDOM_4[11:0]};	// @[VFPUSubModule.scala:63:57]
        REG_2_maskOff = {_RANDOM_4[31:12], _RANDOM_5, _RANDOM_6[11:0]};	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_lsrc_0 = _RANDOM_7[13:9];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_lsrc_1 = _RANDOM_7[18:14];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_ldest = _RANDOM_7[23:19];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_vm = _RANDOM_7[24];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_funct6 = _RANDOM_7[30:25];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_funct3 = {_RANDOM_7[31], _RANDOM_8[1:0]};	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_widen = _RANDOM_8[2];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_widen2 = _RANDOM_8[3];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_narrow = _RANDOM_8[4];	// @[VFPUSubModule.scala:63:57]
        REG_3_ctrl_narrow_to_1 = _RANDOM_8[5];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_vstart = _RANDOM_8[12:6];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_vl = _RANDOM_8[20:13];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_vxrm = _RANDOM_8[22:21];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_frm = _RANDOM_8[25:23];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_vlmul = _RANDOM_8[28:26];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_vsew = _RANDOM_8[31:29];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_ma = _RANDOM_9[0];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_ta = _RANDOM_9[1];	// @[VFPUSubModule.scala:63:57]
        REG_3_info_destEew = _RANDOM_9[4:2];	// @[VFPUSubModule.scala:63:57]
        REG_3_expdIdx = _RANDOM_9[7:5];	// @[VFPUSubModule.scala:63:57]
        REG_3_expdEnd = _RANDOM_9[8];	// @[VFPUSubModule.scala:63:57]
        REG_3_sysUop_robIdx_flag = _RANDOM_9[10];	// @[VFPUSubModule.scala:63:57]
        REG_3_sysUop_robIdx_value = _RANDOM_9[18:11];	// @[VFPUSubModule.scala:63:57]
        REG_3_maskKeep = {_RANDOM_9[31:19], _RANDOM_10, _RANDOM_11[18:0]};	// @[VFPUSubModule.scala:63:57]
        REG_3_maskOff = {_RANDOM_11[31:19], _RANDOM_12, _RANDOM_13[18:0]};	// @[VFPUSubModule.scala:63:57]
        src1 = {_RANDOM_14[31:16], _RANDOM_15, _RANDOM_16[15:0]};	// @[Reg.scala:19:16]
        src2 = {_RANDOM_16[31:16], _RANDOM_17, _RANDOM_18[15:0]};	// @[Reg.scala:19:16]
        eleActives_r_0 = _RANDOM_18[16];	// @[Reg.scala:19:16]
        eleActives_r_1 = _RANDOM_18[17];	// @[Reg.scala:19:16]
        eleActives_0 = _RANDOM_18[18];	// @[Reg.scala:19:16]
        eleActives_1 = _RANDOM_18[19];	// @[Reg.scala:19:16]
        uopIn_expdIdx = _RANDOM_20[18:16];	// @[Reg.scala:19:16]
        uopIn_typeTag = _RANDOM_25[25];	// @[Reg.scala:19:16]
        fma = _RANDOM_25[27];	// @[Reg.scala:19:16]
        mulProdElmt0Vec_1_fp_prod_sign = _RANDOM_25[28];	// @[Reg.scala:19:16]
        mulProdElmt0Vec_1_fp_prod_exp = {_RANDOM_25[31:29], _RANDOM_26[7:0]};	// @[Reg.scala:19:16]
        mulProdElmt0Vec_1_fp_prod_sig = {_RANDOM_26[31:8], _RANDOM_27, _RANDOM_28, _RANDOM_29[16:0]};	// @[Reg.scala:19:16]
        mulProdElmt0Vec_1_inter_flags_isNaN = _RANDOM_29[17];	// @[Reg.scala:19:16]
        mulProdElmt0Vec_1_inter_flags_isInf = _RANDOM_29[18];	// @[Reg.scala:19:16]
        mulProdElmt0Vec_1_inter_flags_isInv = _RANDOM_29[19];	// @[Reg.scala:19:16]
        mulProdElmt0Vec_1_inter_flags_overflow = _RANDOM_29[20];	// @[Reg.scala:19:16]
        mulProdElmt0Vec_0_fp_prod_sign = _RANDOM_29[24];	// @[Reg.scala:19:16]
        mulProdElmt0Vec_0_fp_prod_exp = {_RANDOM_29[31:25], _RANDOM_30[0]};	// @[Reg.scala:19:16]
        mulProdElmt0Vec_0_fp_prod_sig = {_RANDOM_30[31:1], _RANDOM_31[15:0]};	// @[Reg.scala:19:16]
        mulProdElmt0Vec_0_inter_flags_isNaN = _RANDOM_31[16];	// @[Reg.scala:19:16]
        mulProdElmt0Vec_0_inter_flags_isInf = _RANDOM_31[17];	// @[Reg.scala:19:16]
        mulProdElmt0Vec_0_inter_flags_isInv = _RANDOM_31[18];	// @[Reg.scala:19:16]
        mulProdElmt0Vec_0_inter_flags_overflow = _RANDOM_31[19];	// @[Reg.scala:19:16]
        mulProdElmt1_fp_prod_sign = _RANDOM_31[23];	// @[Reg.scala:19:16]
        mulProdElmt1_fp_prod_exp = _RANDOM_31[31:24];	// @[Reg.scala:19:16]
        mulProdElmt1_fp_prod_sig = {_RANDOM_32, _RANDOM_33[14:0]};	// @[Reg.scala:19:16]
        mulProdElmt1_inter_flags_isNaN = _RANDOM_33[15];	// @[Reg.scala:19:16]
        mulProdElmt1_inter_flags_isInf = _RANDOM_33[16];	// @[Reg.scala:19:16]
        mulProdElmt1_inter_flags_isInv = _RANDOM_33[17];	// @[Reg.scala:19:16]
        mulProdElmt1_inter_flags_overflow = _RANDOM_33[18];	// @[Reg.scala:19:16]
        s1_io_rm_r = _RANDOM_33[24:22];	// @[Reg.scala:19:16]
        s2_io_in_r_rm = _RANDOM_33[27:25];	// @[Reg.scala:19:16]
        s2_io_in_r_far_path_out_sign = _RANDOM_33[28];	// @[Reg.scala:19:16]
        s2_io_in_r_near_path_out_sign = _RANDOM_35[0];	// @[Reg.scala:19:16]
        s2_io_in_r_near_path_out_exp = _RANDOM_35[8:1];	// @[Reg.scala:19:16]
        s2_io_in_r_special_case_valid = _RANDOM_36[4];	// @[Reg.scala:19:16]
        s2_io_in_r_special_case_bits_iv = _RANDOM_36[5];	// @[Reg.scala:19:16]
        s2_io_in_r_special_case_bits_nan = _RANDOM_36[6];	// @[Reg.scala:19:16]
        s2_io_in_r_special_case_bits_inf_sign = _RANDOM_36[7];	// @[Reg.scala:19:16]
        s2_io_in_r_small_add = _RANDOM_36[8];	// @[Reg.scala:19:16]
        s2_io_in_r_far_path_mul_of = _RANDOM_36[9];	// @[Reg.scala:19:16]
        s2_io_in_r_far_sig_a = {_RANDOM_36[31:10], _RANDOM_37[25:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_far_sig_b = {_RANDOM_37[31:26], _RANDOM_38, _RANDOM_39[13:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_far_exp_a_vec_0 = _RANDOM_39[22:15];	// @[Reg.scala:19:16]
        s2_io_in_r_far_exp_a_vec_1 = _RANDOM_39[30:23];	// @[Reg.scala:19:16]
        s2_io_in_r_far_exp_a_vec_2 = {_RANDOM_39[31], _RANDOM_40[6:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_near_path_sig_is_zero = _RANDOM_40[7];	// @[Reg.scala:19:16]
        s2_io_in_r_near_path_lza_error = _RANDOM_40[8];	// @[Reg.scala:19:16]
        s2_io_in_r_near_path_int_bit = _RANDOM_40[9];	// @[Reg.scala:19:16]
        s2_io_in_r_near_path_sig_raw = {_RANDOM_40[31:10], _RANDOM_41[26:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_near_path_lzc = {_RANDOM_41[31:27], _RANDOM_42[0]};	// @[Reg.scala:19:16]
        s2_io_in_r_sel_far_path = _RANDOM_42[1];	// @[Reg.scala:19:16]
        s1_io_rm_r_1 = _RANDOM_42[4:2];	// @[Reg.scala:19:16]
        s2_io_in_r_1_rm = _RANDOM_42[7:5];	// @[Reg.scala:19:16]
        s2_io_in_r_1_far_path_out_sign = _RANDOM_42[8];	// @[Reg.scala:19:16]
        s2_io_in_r_1_near_path_out_sign = _RANDOM_44[12];	// @[Reg.scala:19:16]
        s2_io_in_r_1_near_path_out_exp = _RANDOM_44[23:13];	// @[Reg.scala:19:16]
        s2_io_in_r_1_special_case_valid = _RANDOM_46[16];	// @[Reg.scala:19:16]
        s2_io_in_r_1_special_case_bits_iv = _RANDOM_46[17];	// @[Reg.scala:19:16]
        s2_io_in_r_1_special_case_bits_nan = _RANDOM_46[18];	// @[Reg.scala:19:16]
        s2_io_in_r_1_special_case_bits_inf_sign = _RANDOM_46[19];	// @[Reg.scala:19:16]
        s2_io_in_r_1_small_add = _RANDOM_46[20];	// @[Reg.scala:19:16]
        s2_io_in_r_1_far_path_mul_of = _RANDOM_46[21];	// @[Reg.scala:19:16]
        s2_io_in_r_1_far_sig_a = {_RANDOM_46[31:22], _RANDOM_47, _RANDOM_48, _RANDOM_49};	// @[Reg.scala:19:16]
        s2_io_in_r_1_far_sig_b = {_RANDOM_50, _RANDOM_51, _RANDOM_52, _RANDOM_53[13:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_1_far_exp_a_vec_0 = _RANDOM_53[25:15];	// @[Reg.scala:19:16]
        s2_io_in_r_1_far_exp_a_vec_1 = {_RANDOM_53[31:26], _RANDOM_54[4:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_1_far_exp_a_vec_2 = _RANDOM_54[15:5];	// @[Reg.scala:19:16]
        s2_io_in_r_1_near_path_sig_is_zero = _RANDOM_54[16];	// @[Reg.scala:19:16]
        s2_io_in_r_1_near_path_lza_error = _RANDOM_54[17];	// @[Reg.scala:19:16]
        s2_io_in_r_1_near_path_int_bit = _RANDOM_54[18];	// @[Reg.scala:19:16]
        s2_io_in_r_1_near_path_sig_raw = {_RANDOM_54[31:19], _RANDOM_55, _RANDOM_56, _RANDOM_57[29:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_1_near_path_lzc = {_RANDOM_57[31:30], _RANDOM_58[4:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_1_sel_far_path = _RANDOM_58[5];	// @[Reg.scala:19:16]
        s1_io_rm_r_2 = _RANDOM_58[8:6];	// @[Reg.scala:19:16]
        s2_io_in_r_2_rm = _RANDOM_58[11:9];	// @[Reg.scala:19:16]
        s2_io_in_r_2_far_path_out_sign = _RANDOM_58[12];	// @[Reg.scala:19:16]
        s2_io_in_r_2_near_path_out_sign = _RANDOM_59[16];	// @[Reg.scala:19:16]
        s2_io_in_r_2_near_path_out_exp = _RANDOM_59[24:17];	// @[Reg.scala:19:16]
        s2_io_in_r_2_special_case_valid = _RANDOM_60[20];	// @[Reg.scala:19:16]
        s2_io_in_r_2_special_case_bits_iv = _RANDOM_60[21];	// @[Reg.scala:19:16]
        s2_io_in_r_2_special_case_bits_nan = _RANDOM_60[22];	// @[Reg.scala:19:16]
        s2_io_in_r_2_special_case_bits_inf_sign = _RANDOM_60[23];	// @[Reg.scala:19:16]
        s2_io_in_r_2_small_add = _RANDOM_60[24];	// @[Reg.scala:19:16]
        s2_io_in_r_2_far_path_mul_of = _RANDOM_60[25];	// @[Reg.scala:19:16]
        s2_io_in_r_2_far_sig_a = {_RANDOM_60[31:26], _RANDOM_61, _RANDOM_62[9:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_2_far_sig_b = {_RANDOM_62[31:10], _RANDOM_63[29:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_2_far_exp_a_vec_0 = {_RANDOM_63[31], _RANDOM_64[6:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_2_far_exp_a_vec_1 = _RANDOM_64[14:7];	// @[Reg.scala:19:16]
        s2_io_in_r_2_far_exp_a_vec_2 = _RANDOM_64[22:15];	// @[Reg.scala:19:16]
        s2_io_in_r_2_near_path_sig_is_zero = _RANDOM_64[23];	// @[Reg.scala:19:16]
        s2_io_in_r_2_near_path_lza_error = _RANDOM_64[24];	// @[Reg.scala:19:16]
        s2_io_in_r_2_near_path_int_bit = _RANDOM_64[25];	// @[Reg.scala:19:16]
        s2_io_in_r_2_near_path_sig_raw = {_RANDOM_64[31:26], _RANDOM_65, _RANDOM_66[10:0]};	// @[Reg.scala:19:16]
        s2_io_in_r_2_near_path_lzc = _RANDOM_66[16:11];	// @[Reg.scala:19:16]
        s2_io_in_r_2_sel_far_path = _RANDOM_66[17];	// @[Reg.scala:19:16]
        outSel_0 = _RANDOM_66[18];	// @[Reg.scala:19:16]
        outSel_1 = _RANDOM_66[19];	// @[Reg.scala:19:16]
        io_out_bits_fflags_r = _RANDOM_66[20];	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  FCMA_ADD_s1 stage1Elmt0_0 (	// @[VFFMA.scala:297:20]
    .io_a                              ({src2[31:0], 24'h0}),	// @[Cat.scala:33:92, Reg.scala:19:16, VFFMA.scala:303:23]
    .io_b                              (fma ? {mulProdElmt0Vec_0_fp_prod_sign, mulProdElmt0Vec_0_fp_prod_exp, mulProdElmt0Vec_0_fp_prod_sig} : {src1[31:0], 24'h0}),	// @[Cat.scala:33:92, Reg.scala:19:16, VFFMA.scala:299:18, :300:23, :301:15]
    .io_b_inter_valid                  (fma),	// @[Reg.scala:19:16]
    .io_b_inter_flags_isNaN            (fma & mulProdElmt0Vec_0_inter_flags_isNaN),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_b_inter_flags_isInf            (fma & mulProdElmt0Vec_0_inter_flags_isInf),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_b_inter_flags_isInv            (fma & mulProdElmt0Vec_0_inter_flags_isInv),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_b_inter_flags_overflow         (fma & mulProdElmt0Vec_0_inter_flags_overflow),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_rm                             (s1_io_rm_r),	// @[Reg.scala:19:16]
    .io_out_rm                         (_stage1Elmt0_0_io_out_rm),
    .io_out_far_path_out_sign          (_stage1Elmt0_0_io_out_far_path_out_sign),
    .io_out_near_path_out_sign         (_stage1Elmt0_0_io_out_near_path_out_sign),
    .io_out_near_path_out_exp          (_stage1Elmt0_0_io_out_near_path_out_exp),
    .io_out_special_case_valid         (_stage1Elmt0_0_io_out_special_case_valid),
    .io_out_special_case_bits_iv       (_stage1Elmt0_0_io_out_special_case_bits_iv),
    .io_out_special_case_bits_nan      (_stage1Elmt0_0_io_out_special_case_bits_nan),
    .io_out_special_case_bits_inf_sign (_stage1Elmt0_0_io_out_special_case_bits_inf_sign),
    .io_out_small_add                  (_stage1Elmt0_0_io_out_small_add),
    .io_out_far_path_mul_of            (_stage1Elmt0_0_io_out_far_path_mul_of),
    .io_out_far_sig_a                  (_stage1Elmt0_0_io_out_far_sig_a),
    .io_out_far_sig_b                  (_stage1Elmt0_0_io_out_far_sig_b),
    .io_out_far_exp_a_vec_0            (_stage1Elmt0_0_io_out_far_exp_a_vec_0),
    .io_out_far_exp_a_vec_1            (_stage1Elmt0_0_io_out_far_exp_a_vec_1),
    .io_out_far_exp_a_vec_2            (_stage1Elmt0_0_io_out_far_exp_a_vec_2),
    .io_out_near_path_sig_is_zero      (_stage1Elmt0_0_io_out_near_path_sig_is_zero),
    .io_out_near_path_lza_error        (_stage1Elmt0_0_io_out_near_path_lza_error),
    .io_out_near_path_int_bit          (_stage1Elmt0_0_io_out_near_path_int_bit),
    .io_out_near_path_sig_raw          (_stage1Elmt0_0_io_out_near_path_sig_raw),
    .io_out_near_path_lzc              (_stage1Elmt0_0_io_out_near_path_lzc),
    .io_out_sel_far_path               (_stage1Elmt0_0_io_out_sel_far_path)
  );
  FCMA_ADD_s2 stage2Elmt0_0 (	// @[VFFMA.scala:298:20]
    .io_in_rm                         (s2_io_in_r_rm),	// @[Reg.scala:19:16]
    .io_in_far_path_out_sign          (s2_io_in_r_far_path_out_sign),	// @[Reg.scala:19:16]
    .io_in_near_path_out_sign         (s2_io_in_r_near_path_out_sign),	// @[Reg.scala:19:16]
    .io_in_near_path_out_exp          (s2_io_in_r_near_path_out_exp),	// @[Reg.scala:19:16]
    .io_in_special_case_valid         (s2_io_in_r_special_case_valid),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_iv       (s2_io_in_r_special_case_bits_iv),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_nan      (s2_io_in_r_special_case_bits_nan),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inf_sign (s2_io_in_r_special_case_bits_inf_sign),	// @[Reg.scala:19:16]
    .io_in_small_add                  (s2_io_in_r_small_add),	// @[Reg.scala:19:16]
    .io_in_far_path_mul_of            (s2_io_in_r_far_path_mul_of),	// @[Reg.scala:19:16]
    .io_in_far_sig_a                  (s2_io_in_r_far_sig_a),	// @[Reg.scala:19:16]
    .io_in_far_sig_b                  (s2_io_in_r_far_sig_b),	// @[Reg.scala:19:16]
    .io_in_far_exp_a_vec_0            (s2_io_in_r_far_exp_a_vec_0),	// @[Reg.scala:19:16]
    .io_in_far_exp_a_vec_1            (s2_io_in_r_far_exp_a_vec_1),	// @[Reg.scala:19:16]
    .io_in_far_exp_a_vec_2            (s2_io_in_r_far_exp_a_vec_2),	// @[Reg.scala:19:16]
    .io_in_near_path_sig_is_zero      (s2_io_in_r_near_path_sig_is_zero),	// @[Reg.scala:19:16]
    .io_in_near_path_lza_error        (s2_io_in_r_near_path_lza_error),	// @[Reg.scala:19:16]
    .io_in_near_path_int_bit          (s2_io_in_r_near_path_int_bit),	// @[Reg.scala:19:16]
    .io_in_near_path_sig_raw          (s2_io_in_r_near_path_sig_raw),	// @[Reg.scala:19:16]
    .io_in_near_path_lzc              (s2_io_in_r_near_path_lzc),	// @[Reg.scala:19:16]
    .io_in_sel_far_path               (s2_io_in_r_sel_far_path),	// @[Reg.scala:19:16]
    .io_result                        (_stage2Elmt0_0_io_result),
    .io_fflags                        (_stage2Elmt0_0_io_fflags)
  );
  FCMA_ADD_s1_1 stage1Elmt0_1 (	// @[VFFMA.scala:297:20]
    .io_a                              ({src2, 53'h0}),	// @[Cat.scala:33:92, Reg.scala:19:16]
    .io_b                              (fma ? {mulProdElmt0Vec_1_fp_prod_sign, mulProdElmt0Vec_1_fp_prod_exp, mulProdElmt0Vec_1_fp_prod_sig} : {src1, 53'h0}),	// @[Cat.scala:33:92, Reg.scala:19:16, VFFMA.scala:299:18, :300:23]
    .io_b_inter_valid                  (fma),	// @[Reg.scala:19:16]
    .io_b_inter_flags_isNaN            (fma & mulProdElmt0Vec_1_inter_flags_isNaN),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_b_inter_flags_isInf            (fma & mulProdElmt0Vec_1_inter_flags_isInf),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_b_inter_flags_isInv            (fma & mulProdElmt0Vec_1_inter_flags_isInv),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_b_inter_flags_overflow         (fma & mulProdElmt0Vec_1_inter_flags_overflow),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_rm                             (s1_io_rm_r_1),	// @[Reg.scala:19:16]
    .io_out_rm                         (_stage1Elmt0_1_io_out_rm),
    .io_out_far_path_out_sign          (_stage1Elmt0_1_io_out_far_path_out_sign),
    .io_out_near_path_out_sign         (_stage1Elmt0_1_io_out_near_path_out_sign),
    .io_out_near_path_out_exp          (_stage1Elmt0_1_io_out_near_path_out_exp),
    .io_out_special_case_valid         (_stage1Elmt0_1_io_out_special_case_valid),
    .io_out_special_case_bits_iv       (_stage1Elmt0_1_io_out_special_case_bits_iv),
    .io_out_special_case_bits_nan      (_stage1Elmt0_1_io_out_special_case_bits_nan),
    .io_out_special_case_bits_inf_sign (_stage1Elmt0_1_io_out_special_case_bits_inf_sign),
    .io_out_small_add                  (_stage1Elmt0_1_io_out_small_add),
    .io_out_far_path_mul_of            (_stage1Elmt0_1_io_out_far_path_mul_of),
    .io_out_far_sig_a                  (_stage1Elmt0_1_io_out_far_sig_a),
    .io_out_far_sig_b                  (_stage1Elmt0_1_io_out_far_sig_b),
    .io_out_far_exp_a_vec_0            (_stage1Elmt0_1_io_out_far_exp_a_vec_0),
    .io_out_far_exp_a_vec_1            (_stage1Elmt0_1_io_out_far_exp_a_vec_1),
    .io_out_far_exp_a_vec_2            (_stage1Elmt0_1_io_out_far_exp_a_vec_2),
    .io_out_near_path_sig_is_zero      (_stage1Elmt0_1_io_out_near_path_sig_is_zero),
    .io_out_near_path_lza_error        (_stage1Elmt0_1_io_out_near_path_lza_error),
    .io_out_near_path_int_bit          (_stage1Elmt0_1_io_out_near_path_int_bit),
    .io_out_near_path_sig_raw          (_stage1Elmt0_1_io_out_near_path_sig_raw),
    .io_out_near_path_lzc              (_stage1Elmt0_1_io_out_near_path_lzc),
    .io_out_sel_far_path               (_stage1Elmt0_1_io_out_sel_far_path)
  );
  FCMA_ADD_s2_1 stage2Elmt0_1 (	// @[VFFMA.scala:298:20]
    .io_in_rm                         (s2_io_in_r_1_rm),	// @[Reg.scala:19:16]
    .io_in_far_path_out_sign          (s2_io_in_r_1_far_path_out_sign),	// @[Reg.scala:19:16]
    .io_in_near_path_out_sign         (s2_io_in_r_1_near_path_out_sign),	// @[Reg.scala:19:16]
    .io_in_near_path_out_exp          (s2_io_in_r_1_near_path_out_exp),	// @[Reg.scala:19:16]
    .io_in_special_case_valid         (s2_io_in_r_1_special_case_valid),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_iv       (s2_io_in_r_1_special_case_bits_iv),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_nan      (s2_io_in_r_1_special_case_bits_nan),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inf_sign (s2_io_in_r_1_special_case_bits_inf_sign),	// @[Reg.scala:19:16]
    .io_in_small_add                  (s2_io_in_r_1_small_add),	// @[Reg.scala:19:16]
    .io_in_far_path_mul_of            (s2_io_in_r_1_far_path_mul_of),	// @[Reg.scala:19:16]
    .io_in_far_sig_a                  (s2_io_in_r_1_far_sig_a),	// @[Reg.scala:19:16]
    .io_in_far_sig_b                  (s2_io_in_r_1_far_sig_b),	// @[Reg.scala:19:16]
    .io_in_far_exp_a_vec_0            (s2_io_in_r_1_far_exp_a_vec_0),	// @[Reg.scala:19:16]
    .io_in_far_exp_a_vec_1            (s2_io_in_r_1_far_exp_a_vec_1),	// @[Reg.scala:19:16]
    .io_in_far_exp_a_vec_2            (s2_io_in_r_1_far_exp_a_vec_2),	// @[Reg.scala:19:16]
    .io_in_near_path_sig_is_zero      (s2_io_in_r_1_near_path_sig_is_zero),	// @[Reg.scala:19:16]
    .io_in_near_path_lza_error        (s2_io_in_r_1_near_path_lza_error),	// @[Reg.scala:19:16]
    .io_in_near_path_int_bit          (s2_io_in_r_1_near_path_int_bit),	// @[Reg.scala:19:16]
    .io_in_near_path_sig_raw          (s2_io_in_r_1_near_path_sig_raw),	// @[Reg.scala:19:16]
    .io_in_near_path_lzc              (s2_io_in_r_1_near_path_lzc),	// @[Reg.scala:19:16]
    .io_in_sel_far_path               (s2_io_in_r_1_sel_far_path),	// @[Reg.scala:19:16]
    .io_result                        (_stage2Elmt0_1_io_result),
    .io_fflags                        (_stage2Elmt0_1_io_fflags)
  );
  FCMA_ADD_s1 stage1Elmt1 (	// @[VFFMA.scala:297:20]
    .io_a                              ({src2[63:32], 24'h0}),	// @[Cat.scala:33:92, Reg.scala:19:16, VFFMA.scala:277:39]
    .io_b                              (fma ? {mulProdElmt1_fp_prod_sign, mulProdElmt1_fp_prod_exp, mulProdElmt1_fp_prod_sig} : {src1[63:32], 24'h0}),	// @[Cat.scala:33:92, Reg.scala:19:16, VFFMA.scala:277:24, :299:18, :300:23]
    .io_b_inter_valid                  (fma),	// @[Reg.scala:19:16]
    .io_b_inter_flags_isNaN            (fma & mulProdElmt1_inter_flags_isNaN),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_b_inter_flags_isInf            (fma & mulProdElmt1_inter_flags_isInf),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_b_inter_flags_isInv            (fma & mulProdElmt1_inter_flags_isInv),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_b_inter_flags_overflow         (fma & mulProdElmt1_inter_flags_overflow),	// @[Reg.scala:19:16, VFFMA.scala:307:31]
    .io_rm                             (s1_io_rm_r_2),	// @[Reg.scala:19:16]
    .io_out_rm                         (_stage1Elmt1_io_out_rm),
    .io_out_far_path_out_sign          (_stage1Elmt1_io_out_far_path_out_sign),
    .io_out_near_path_out_sign         (_stage1Elmt1_io_out_near_path_out_sign),
    .io_out_near_path_out_exp          (_stage1Elmt1_io_out_near_path_out_exp),
    .io_out_special_case_valid         (_stage1Elmt1_io_out_special_case_valid),
    .io_out_special_case_bits_iv       (_stage1Elmt1_io_out_special_case_bits_iv),
    .io_out_special_case_bits_nan      (_stage1Elmt1_io_out_special_case_bits_nan),
    .io_out_special_case_bits_inf_sign (_stage1Elmt1_io_out_special_case_bits_inf_sign),
    .io_out_small_add                  (_stage1Elmt1_io_out_small_add),
    .io_out_far_path_mul_of            (_stage1Elmt1_io_out_far_path_mul_of),
    .io_out_far_sig_a                  (_stage1Elmt1_io_out_far_sig_a),
    .io_out_far_sig_b                  (_stage1Elmt1_io_out_far_sig_b),
    .io_out_far_exp_a_vec_0            (_stage1Elmt1_io_out_far_exp_a_vec_0),
    .io_out_far_exp_a_vec_1            (_stage1Elmt1_io_out_far_exp_a_vec_1),
    .io_out_far_exp_a_vec_2            (_stage1Elmt1_io_out_far_exp_a_vec_2),
    .io_out_near_path_sig_is_zero      (_stage1Elmt1_io_out_near_path_sig_is_zero),
    .io_out_near_path_lza_error        (_stage1Elmt1_io_out_near_path_lza_error),
    .io_out_near_path_int_bit          (_stage1Elmt1_io_out_near_path_int_bit),
    .io_out_near_path_sig_raw          (_stage1Elmt1_io_out_near_path_sig_raw),
    .io_out_near_path_lzc              (_stage1Elmt1_io_out_near_path_lzc),
    .io_out_sel_far_path               (_stage1Elmt1_io_out_sel_far_path)
  );
  FCMA_ADD_s2 stage2Elmt1 (	// @[VFFMA.scala:298:20]
    .io_in_rm                         (s2_io_in_r_2_rm),	// @[Reg.scala:19:16]
    .io_in_far_path_out_sign          (s2_io_in_r_2_far_path_out_sign),	// @[Reg.scala:19:16]
    .io_in_near_path_out_sign         (s2_io_in_r_2_near_path_out_sign),	// @[Reg.scala:19:16]
    .io_in_near_path_out_exp          (s2_io_in_r_2_near_path_out_exp),	// @[Reg.scala:19:16]
    .io_in_special_case_valid         (s2_io_in_r_2_special_case_valid),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_iv       (s2_io_in_r_2_special_case_bits_iv),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_nan      (s2_io_in_r_2_special_case_bits_nan),	// @[Reg.scala:19:16]
    .io_in_special_case_bits_inf_sign (s2_io_in_r_2_special_case_bits_inf_sign),	// @[Reg.scala:19:16]
    .io_in_small_add                  (s2_io_in_r_2_small_add),	// @[Reg.scala:19:16]
    .io_in_far_path_mul_of            (s2_io_in_r_2_far_path_mul_of),	// @[Reg.scala:19:16]
    .io_in_far_sig_a                  (s2_io_in_r_2_far_sig_a),	// @[Reg.scala:19:16]
    .io_in_far_sig_b                  (s2_io_in_r_2_far_sig_b),	// @[Reg.scala:19:16]
    .io_in_far_exp_a_vec_0            (s2_io_in_r_2_far_exp_a_vec_0),	// @[Reg.scala:19:16]
    .io_in_far_exp_a_vec_1            (s2_io_in_r_2_far_exp_a_vec_1),	// @[Reg.scala:19:16]
    .io_in_far_exp_a_vec_2            (s2_io_in_r_2_far_exp_a_vec_2),	// @[Reg.scala:19:16]
    .io_in_near_path_sig_is_zero      (s2_io_in_r_2_near_path_sig_is_zero),	// @[Reg.scala:19:16]
    .io_in_near_path_lza_error        (s2_io_in_r_2_near_path_lza_error),	// @[Reg.scala:19:16]
    .io_in_near_path_int_bit          (s2_io_in_r_2_near_path_int_bit),	// @[Reg.scala:19:16]
    .io_in_near_path_sig_raw          (s2_io_in_r_2_near_path_sig_raw),	// @[Reg.scala:19:16]
    .io_in_near_path_lzc              (s2_io_in_r_2_near_path_lzc),	// @[Reg.scala:19:16]
    .io_in_sel_far_path               (s2_io_in_r_2_sel_far_path),	// @[Reg.scala:19:16]
    .io_result                        (_stage2Elmt1_io_result),
    .io_fflags                        (_stage2Elmt1_io_fflags)
  );
  assign io_out_valid = REG_1;	// @[VFPUSubModule.scala:59:60]
  assign io_out_bits_vd = (outSel_0 ? {_stage2Elmt1_io_result, _stage2Elmt0_0_io_result} : 64'h0) | (outSel_1 ? _stage2Elmt0_1_io_result : 64'h0);	// @[Cat.scala:33:92, Mux.scala:27:73, Reg.scala:19:16, VFFMA.scala:298:20]
  assign io_out_bits_fflags = (outSel_0 ? (eleActives_1 ? _stage2Elmt1_io_fflags : 5'h0) | (eleActives_0 ? _stage2Elmt0_0_io_fflags : 5'h0) : 5'h0) | (outSel_1 & (io_out_bits_fflags_r ? eleActives_1 : eleActives_0) ? _stage2Elmt0_1_io_fflags : 5'h0);	// @[Mux.scala:27:73, Reg.scala:19:16, VFFMA.scala:287:8, :288:{7,12}, :289:8, :290:10, :298:20]
  assign io_out_bits_uop_ctrl_lsrc_0 = REG_3_ctrl_lsrc_0;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_lsrc_1 = REG_3_ctrl_lsrc_1;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_ldest = REG_3_ctrl_ldest;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_vm = REG_3_ctrl_vm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_funct6 = REG_3_ctrl_funct6;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_funct3 = REG_3_ctrl_funct3;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_widen = REG_3_ctrl_widen;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_widen2 = REG_3_ctrl_widen2;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_narrow = REG_3_ctrl_narrow;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_ctrl_narrow_to_1 = REG_3_ctrl_narrow_to_1;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vstart = REG_3_info_vstart;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vl = REG_3_info_vl;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vxrm = REG_3_info_vxrm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_frm = REG_3_info_frm;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vlmul = REG_3_info_vlmul;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_vsew = REG_3_info_vsew;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_ma = REG_3_info_ma;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_ta = REG_3_info_ta;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_info_destEew = REG_3_info_destEew;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_expdIdx = REG_3_expdIdx;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_expdEnd = REG_3_expdEnd;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_sysUop_robIdx_flag = REG_3_sysUop_robIdx_flag;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_sysUop_robIdx_value = REG_3_sysUop_robIdx_value;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_maskKeep = REG_3_maskKeep;	// @[VFPUSubModule.scala:63:57]
  assign io_out_bits_uop_maskOff = REG_3_maskOff;	// @[VFPUSubModule.scala:63:57]
endmodule

