// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module NearPath_2(
  input          io_in_a_sign,
  input  [10:0]  io_in_a_exp,
  input  [105:0] io_in_a_sig,
  input          io_in_b_sign,
  input  [105:0] io_in_b_sig,
  input          io_in_need_shift_b,
  output         io_out_result_sign,
  output [10:0]  io_out_result_exp,
  output         io_out_sig_is_zero,
                 io_out_a_lt_b,
                 io_out_lza_error,
                 io_out_int_bit,
  output [106:0] io_out_sig_raw,
  output [6:0]   io_out_lzc
);

  wire [106:0] _lza_ab_io_f;	// @[FADD.scala:110:22]
  wire [106:0] b_sig = {io_in_b_sig, 1'h0} >> io_in_need_shift_b;	// @[Cat.scala:33:92, FADD.scala:104:37]
  wire [107:0] _GEN = {1'h0, io_in_a_sig, 1'h0} + {1'h1, ~b_sig} + 108'h1;	// @[Cat.scala:33:92, FADD.scala:104:37, :105:16, :107:{40,63}]
  wire         lza_str_zero = _lza_ab_io_f == 107'h0;	// @[FADD.scala:110:22, :114:39, :122:27]
  wire         need_shift_lim = io_in_a_exp < 11'h6B;	// @[FADD.scala:117:30]
  wire [107:0] _shift_lim_mask_raw_T_2 = 108'h800000000000000000000000000 >> io_in_a_exp[6:0];	// @[Cat.scala:33:92, FADD.scala:120:{41,49}]
  wire [106:0] lzc_str = (need_shift_lim ? _shift_lim_mask_raw_T_2[106:0] : 107'h0) | _lza_ab_io_f;	// @[FADD.scala:110:22, :117:30, :120:41, :121:16, :122:27, :125:32]
  wire         _int_bit_mask_T_5 = lzc_str[105] & ~(lzc_str[106]);	// @[FADD.scala:125:32, :130:{36,40,42,55}]
  wire         _int_bit_mask_T_10 = lzc_str[104] & lzc_str[106:105] == 2'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_15 = lzc_str[103] & lzc_str[106:104] == 3'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_20 = lzc_str[102] & lzc_str[106:103] == 4'h0;	// @[FADD.scala:117:30, :125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_25 = lzc_str[101] & lzc_str[106:102] == 5'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_30 = lzc_str[100] & lzc_str[106:101] == 6'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_35 = lzc_str[99] & lzc_str[106:100] == 7'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_40 = lzc_str[98] & lzc_str[106:99] == 8'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_45 = lzc_str[97] & lzc_str[106:98] == 9'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_50 = lzc_str[96] & lzc_str[106:97] == 10'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_55 = lzc_str[95] & lzc_str[106:96] == 11'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_60 = lzc_str[94] & lzc_str[106:95] == 12'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_65 = lzc_str[93] & lzc_str[106:94] == 13'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_70 = lzc_str[92] & lzc_str[106:93] == 14'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_75 = lzc_str[91] & lzc_str[106:92] == 15'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_80 = lzc_str[90] & lzc_str[106:91] == 16'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_85 = lzc_str[89] & lzc_str[106:90] == 17'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_90 = lzc_str[88] & lzc_str[106:89] == 18'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_95 = lzc_str[87] & lzc_str[106:88] == 19'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_100 = lzc_str[86] & lzc_str[106:87] == 20'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_105 = lzc_str[85] & lzc_str[106:86] == 21'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_110 = lzc_str[84] & lzc_str[106:85] == 22'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_115 = lzc_str[83] & lzc_str[106:84] == 23'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_120 = lzc_str[82] & lzc_str[106:83] == 24'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_125 = lzc_str[81] & lzc_str[106:82] == 25'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_130 = lzc_str[80] & lzc_str[106:81] == 26'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_135 = lzc_str[79] & lzc_str[106:80] == 27'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_140 = lzc_str[78] & lzc_str[106:79] == 28'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_145 = lzc_str[77] & lzc_str[106:78] == 29'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_150 = lzc_str[76] & lzc_str[106:77] == 30'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_155 = lzc_str[75] & lzc_str[106:76] == 31'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_160 = lzc_str[74] & lzc_str[106:75] == 32'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_165 = lzc_str[73] & lzc_str[106:74] == 33'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_170 = lzc_str[72] & lzc_str[106:73] == 34'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_175 = lzc_str[71] & lzc_str[106:72] == 35'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_180 = lzc_str[70] & lzc_str[106:71] == 36'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_185 = lzc_str[69] & lzc_str[106:70] == 37'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_190 = lzc_str[68] & lzc_str[106:69] == 38'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_195 = lzc_str[67] & lzc_str[106:68] == 39'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_200 = lzc_str[66] & lzc_str[106:67] == 40'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_205 = lzc_str[65] & lzc_str[106:66] == 41'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_210 = lzc_str[64] & lzc_str[106:65] == 42'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_215 = lzc_str[63] & lzc_str[106:64] == 43'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_220 = lzc_str[62] & lzc_str[106:63] == 44'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_225 = lzc_str[61] & lzc_str[106:62] == 45'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_230 = lzc_str[60] & lzc_str[106:61] == 46'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_235 = lzc_str[59] & lzc_str[106:60] == 47'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_240 = lzc_str[58] & lzc_str[106:59] == 48'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_245 = lzc_str[57] & lzc_str[106:58] == 49'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_250 = lzc_str[56] & lzc_str[106:57] == 50'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_255 = lzc_str[55] & lzc_str[106:56] == 51'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_260 = lzc_str[54] & lzc_str[106:55] == 52'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_265 = lzc_str[53] & lzc_str[106:54] == 53'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_270 = lzc_str[52] & lzc_str[106:53] == 54'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_275 = lzc_str[51] & lzc_str[106:52] == 55'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_280 = lzc_str[50] & lzc_str[106:51] == 56'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_285 = lzc_str[49] & lzc_str[106:50] == 57'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_290 = lzc_str[48] & lzc_str[106:49] == 58'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_295 = lzc_str[47] & lzc_str[106:48] == 59'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_300 = lzc_str[46] & lzc_str[106:47] == 60'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_305 = lzc_str[45] & lzc_str[106:46] == 61'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_310 = lzc_str[44] & lzc_str[106:45] == 62'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_315 = lzc_str[43] & lzc_str[106:44] == 63'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_320 = lzc_str[42] & lzc_str[106:43] == 64'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_325 = lzc_str[41] & lzc_str[106:42] == 65'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_330 = lzc_str[40] & lzc_str[106:41] == 66'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_335 = lzc_str[39] & lzc_str[106:40] == 67'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_340 = lzc_str[38] & lzc_str[106:39] == 68'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_345 = lzc_str[37] & lzc_str[106:38] == 69'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_350 = lzc_str[36] & lzc_str[106:37] == 70'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_355 = lzc_str[35] & lzc_str[106:36] == 71'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_360 = lzc_str[34] & lzc_str[106:35] == 72'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_365 = lzc_str[33] & lzc_str[106:34] == 73'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_370 = lzc_str[32] & lzc_str[106:33] == 74'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_375 = lzc_str[31] & lzc_str[106:32] == 75'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_380 = lzc_str[30] & lzc_str[106:31] == 76'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_385 = lzc_str[29] & lzc_str[106:30] == 77'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_390 = lzc_str[28] & lzc_str[106:29] == 78'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_395 = lzc_str[27] & lzc_str[106:28] == 79'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_400 = lzc_str[26] & lzc_str[106:27] == 80'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_405 = lzc_str[25] & lzc_str[106:26] == 81'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_410 = lzc_str[24] & lzc_str[106:25] == 82'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_415 = lzc_str[23] & lzc_str[106:24] == 83'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_420 = lzc_str[22] & lzc_str[106:23] == 84'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_425 = lzc_str[21] & lzc_str[106:22] == 85'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_430 = lzc_str[20] & lzc_str[106:21] == 86'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_435 = lzc_str[19] & lzc_str[106:20] == 87'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_440 = lzc_str[18] & lzc_str[106:19] == 88'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_445 = lzc_str[17] & lzc_str[106:18] == 89'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_450 = lzc_str[16] & lzc_str[106:17] == 90'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_455 = lzc_str[15] & lzc_str[106:16] == 91'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_460 = lzc_str[14] & lzc_str[106:15] == 92'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_465 = lzc_str[13] & lzc_str[106:14] == 93'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_470 = lzc_str[12] & lzc_str[106:13] == 94'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_475 = lzc_str[11] & lzc_str[106:12] == 95'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_480 = lzc_str[10] & lzc_str[106:11] == 96'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_485 = lzc_str[9] & lzc_str[106:10] == 97'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_490 = lzc_str[8] & lzc_str[106:9] == 98'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_495 = lzc_str[7] & lzc_str[106:8] == 99'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_500 = lzc_str[6] & lzc_str[106:7] == 100'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_505 = lzc_str[5] & lzc_str[106:6] == 101'h0;	// @[FADD.scala:120:41, :125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_510 = lzc_str[4] & lzc_str[106:5] == 102'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_515 = lzc_str[3] & lzc_str[106:4] == 103'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_520 = lzc_str[2] & lzc_str[106:3] == 104'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire         _int_bit_mask_T_525 = lzc_str[1] & lzc_str[106:2] == 105'h0;	// @[FADD.scala:125:32, :130:{36,40,55,82}]
  wire [106:0] _int_bit_predicted_T_1 =
    {lzc_str[106],
     _int_bit_mask_T_5,
     _int_bit_mask_T_10,
     _int_bit_mask_T_15,
     _int_bit_mask_T_20,
     _int_bit_mask_T_25,
     _int_bit_mask_T_30,
     _int_bit_mask_T_35,
     _int_bit_mask_T_40,
     _int_bit_mask_T_45,
     _int_bit_mask_T_50,
     _int_bit_mask_T_55,
     _int_bit_mask_T_60,
     _int_bit_mask_T_65,
     _int_bit_mask_T_70,
     _int_bit_mask_T_75,
     _int_bit_mask_T_80,
     _int_bit_mask_T_85,
     _int_bit_mask_T_90,
     _int_bit_mask_T_95,
     _int_bit_mask_T_100,
     _int_bit_mask_T_105,
     _int_bit_mask_T_110,
     _int_bit_mask_T_115,
     _int_bit_mask_T_120,
     _int_bit_mask_T_125,
     _int_bit_mask_T_130,
     _int_bit_mask_T_135,
     _int_bit_mask_T_140,
     _int_bit_mask_T_145,
     _int_bit_mask_T_150,
     _int_bit_mask_T_155,
     _int_bit_mask_T_160,
     _int_bit_mask_T_165,
     _int_bit_mask_T_170,
     _int_bit_mask_T_175,
     _int_bit_mask_T_180,
     _int_bit_mask_T_185,
     _int_bit_mask_T_190,
     _int_bit_mask_T_195,
     _int_bit_mask_T_200,
     _int_bit_mask_T_205,
     _int_bit_mask_T_210,
     _int_bit_mask_T_215,
     _int_bit_mask_T_220,
     _int_bit_mask_T_225,
     _int_bit_mask_T_230,
     _int_bit_mask_T_235,
     _int_bit_mask_T_240,
     _int_bit_mask_T_245,
     _int_bit_mask_T_250,
     _int_bit_mask_T_255,
     _int_bit_mask_T_260,
     _int_bit_mask_T_265,
     _int_bit_mask_T_270,
     _int_bit_mask_T_275,
     _int_bit_mask_T_280,
     _int_bit_mask_T_285,
     _int_bit_mask_T_290,
     _int_bit_mask_T_295,
     _int_bit_mask_T_300,
     _int_bit_mask_T_305,
     _int_bit_mask_T_310,
     _int_bit_mask_T_315,
     _int_bit_mask_T_320,
     _int_bit_mask_T_325,
     _int_bit_mask_T_330,
     _int_bit_mask_T_335,
     _int_bit_mask_T_340,
     _int_bit_mask_T_345,
     _int_bit_mask_T_350,
     _int_bit_mask_T_355,
     _int_bit_mask_T_360,
     _int_bit_mask_T_365,
     _int_bit_mask_T_370,
     _int_bit_mask_T_375,
     _int_bit_mask_T_380,
     _int_bit_mask_T_385,
     _int_bit_mask_T_390,
     _int_bit_mask_T_395,
     _int_bit_mask_T_400,
     _int_bit_mask_T_405,
     _int_bit_mask_T_410,
     _int_bit_mask_T_415,
     _int_bit_mask_T_420,
     _int_bit_mask_T_425,
     _int_bit_mask_T_430,
     _int_bit_mask_T_435,
     _int_bit_mask_T_440,
     _int_bit_mask_T_445,
     _int_bit_mask_T_450,
     _int_bit_mask_T_455,
     _int_bit_mask_T_460,
     _int_bit_mask_T_465,
     _int_bit_mask_T_470,
     _int_bit_mask_T_475,
     _int_bit_mask_T_480,
     _int_bit_mask_T_485,
     _int_bit_mask_T_490,
     _int_bit_mask_T_495,
     _int_bit_mask_T_500,
     _int_bit_mask_T_505,
     _int_bit_mask_T_510,
     _int_bit_mask_T_515,
     _int_bit_mask_T_520,
     _int_bit_mask_T_525,
     lzc_str[0] & lzc_str[106:1] == 106'h0 | lza_str_zero} & _GEN[106:0];	// @[FADD.scala:104:37, :107:63, :109:31, :114:39, :125:32, :129:36, :130:{36,40,55,82}, :134:{20,36}]
  wire         exceed_lim =
    need_shift_lim
    & ({_lza_ab_io_f[106],
        |(_lza_ab_io_f[106:105]),
        |(_lza_ab_io_f[106:104]),
        |(_lza_ab_io_f[106:103]),
        |(_lza_ab_io_f[106:102]),
        |(_lza_ab_io_f[106:101]),
        |(_lza_ab_io_f[106:100]),
        |(_lza_ab_io_f[106:99]),
        |(_lza_ab_io_f[106:98]),
        |(_lza_ab_io_f[106:97]),
        |(_lza_ab_io_f[106:96]),
        |(_lza_ab_io_f[106:95]),
        |(_lza_ab_io_f[106:94]),
        |(_lza_ab_io_f[106:93]),
        |(_lza_ab_io_f[106:92]),
        |(_lza_ab_io_f[106:91]),
        |(_lza_ab_io_f[106:90]),
        |(_lza_ab_io_f[106:89]),
        |(_lza_ab_io_f[106:88]),
        |(_lza_ab_io_f[106:87]),
        |(_lza_ab_io_f[106:86]),
        |(_lza_ab_io_f[106:85]),
        |(_lza_ab_io_f[106:84]),
        |(_lza_ab_io_f[106:83]),
        |(_lza_ab_io_f[106:82]),
        |(_lza_ab_io_f[106:81]),
        |(_lza_ab_io_f[106:80]),
        |(_lza_ab_io_f[106:79]),
        |(_lza_ab_io_f[106:78]),
        |(_lza_ab_io_f[106:77]),
        |(_lza_ab_io_f[106:76]),
        |(_lza_ab_io_f[106:75]),
        |(_lza_ab_io_f[106:74]),
        |(_lza_ab_io_f[106:73]),
        |(_lza_ab_io_f[106:72]),
        |(_lza_ab_io_f[106:71]),
        |(_lza_ab_io_f[106:70]),
        |(_lza_ab_io_f[106:69]),
        |(_lza_ab_io_f[106:68]),
        |(_lza_ab_io_f[106:67]),
        |(_lza_ab_io_f[106:66]),
        |(_lza_ab_io_f[106:65]),
        |(_lza_ab_io_f[106:64]),
        |(_lza_ab_io_f[106:63]),
        |(_lza_ab_io_f[106:62]),
        |(_lza_ab_io_f[106:61]),
        |(_lza_ab_io_f[106:60]),
        |(_lza_ab_io_f[106:59]),
        |(_lza_ab_io_f[106:58]),
        |(_lza_ab_io_f[106:57]),
        |(_lza_ab_io_f[106:56]),
        |(_lza_ab_io_f[106:55]),
        |(_lza_ab_io_f[106:54]),
        |(_lza_ab_io_f[106:53]),
        |(_lza_ab_io_f[106:52]),
        |(_lza_ab_io_f[106:51]),
        |(_lza_ab_io_f[106:50]),
        |(_lza_ab_io_f[106:49]),
        |(_lza_ab_io_f[106:48]),
        |(_lza_ab_io_f[106:47]),
        |(_lza_ab_io_f[106:46]),
        |(_lza_ab_io_f[106:45]),
        |(_lza_ab_io_f[106:44]),
        |(_lza_ab_io_f[106:43]),
        |(_lza_ab_io_f[106:42]),
        |(_lza_ab_io_f[106:41]),
        |(_lza_ab_io_f[106:40]),
        |(_lza_ab_io_f[106:39]),
        |(_lza_ab_io_f[106:38]),
        |(_lza_ab_io_f[106:37]),
        |(_lza_ab_io_f[106:36]),
        |(_lza_ab_io_f[106:35]),
        |(_lza_ab_io_f[106:34]),
        |(_lza_ab_io_f[106:33]),
        |(_lza_ab_io_f[106:32]),
        |(_lza_ab_io_f[106:31]),
        |(_lza_ab_io_f[106:30]),
        |(_lza_ab_io_f[106:29]),
        |(_lza_ab_io_f[106:28]),
        |(_lza_ab_io_f[106:27]),
        |(_lza_ab_io_f[106:26]),
        |(_lza_ab_io_f[106:25]),
        |(_lza_ab_io_f[106:24]),
        |(_lza_ab_io_f[106:23]),
        |(_lza_ab_io_f[106:22]),
        |(_lza_ab_io_f[106:21]),
        |(_lza_ab_io_f[106:20]),
        |(_lza_ab_io_f[106:19]),
        |(_lza_ab_io_f[106:18]),
        |(_lza_ab_io_f[106:17]),
        |(_lza_ab_io_f[106:16]),
        |(_lza_ab_io_f[106:15]),
        |(_lza_ab_io_f[106:14]),
        |(_lza_ab_io_f[106:13]),
        |(_lza_ab_io_f[106:12]),
        |(_lza_ab_io_f[106:11]),
        |(_lza_ab_io_f[106:10]),
        |(_lza_ab_io_f[106:9]),
        |(_lza_ab_io_f[106:8]),
        |(_lza_ab_io_f[106:7]),
        |(_lza_ab_io_f[106:6]),
        |(_lza_ab_io_f[106:5]),
        |(_lza_ab_io_f[106:4]),
        |(_lza_ab_io_f[106:3]),
        |(_lza_ab_io_f[106:2]),
        |(_lza_ab_io_f[106:1])} & _shift_lim_mask_raw_T_2[105:0]) == 106'h0;	// @[Cat.scala:33:92, FADD.scala:104:37, :110:22, :117:30, :120:41, :121:16, :140:{37,64}, :143:{20,41,66}]
  LZA_2 lza_ab (	// @[FADD.scala:110:22]
    .io_a ({io_in_a_sig, 1'h0}),	// @[Cat.scala:33:92]
    .io_b (~b_sig),	// @[FADD.scala:104:37, :105:16]
    .io_f (_lza_ab_io_f)
  );
  CLZ_19 lzc_clz (	// @[CLZ.scala:23:21]
    .io_in  (lzc_str),	// @[FADD.scala:125:32]
    .io_out (io_out_lzc)
  );
  assign io_out_result_sign = _GEN[107] ? io_in_b_sign : io_in_a_sign;	// @[FADD.scala:107:63, :108:30, :167:27]
  assign io_out_result_exp = io_in_a_exp;
  assign io_out_sig_is_zero = lza_str_zero & ~(_GEN[0]);	// @[FADD.scala:107:63, :109:31, :114:39, :174:{38,41,49}]
  assign io_out_a_lt_b = _GEN[107];	// @[FADD.scala:107:63, :108:30]
  assign io_out_lza_error = ~(|_int_bit_predicted_T_1) & ~exceed_lim;	// @[FADD.scala:134:{36,50}, :143:20, :148:{19,38,41}]
  assign io_out_int_bit =
    exceed_lim
      ? (|(_shift_lim_mask_raw_T_2[106:0] & _GEN[106:0]))
      : (|({lzc_str[106],
            _int_bit_mask_T_5,
            _int_bit_mask_T_10,
            _int_bit_mask_T_15,
            _int_bit_mask_T_20,
            _int_bit_mask_T_25,
            _int_bit_mask_T_30,
            _int_bit_mask_T_35,
            _int_bit_mask_T_40,
            _int_bit_mask_T_45,
            _int_bit_mask_T_50,
            _int_bit_mask_T_55,
            _int_bit_mask_T_60,
            _int_bit_mask_T_65,
            _int_bit_mask_T_70,
            _int_bit_mask_T_75,
            _int_bit_mask_T_80,
            _int_bit_mask_T_85,
            _int_bit_mask_T_90,
            _int_bit_mask_T_95,
            _int_bit_mask_T_100,
            _int_bit_mask_T_105,
            _int_bit_mask_T_110,
            _int_bit_mask_T_115,
            _int_bit_mask_T_120,
            _int_bit_mask_T_125,
            _int_bit_mask_T_130,
            _int_bit_mask_T_135,
            _int_bit_mask_T_140,
            _int_bit_mask_T_145,
            _int_bit_mask_T_150,
            _int_bit_mask_T_155,
            _int_bit_mask_T_160,
            _int_bit_mask_T_165,
            _int_bit_mask_T_170,
            _int_bit_mask_T_175,
            _int_bit_mask_T_180,
            _int_bit_mask_T_185,
            _int_bit_mask_T_190,
            _int_bit_mask_T_195,
            _int_bit_mask_T_200,
            _int_bit_mask_T_205,
            _int_bit_mask_T_210,
            _int_bit_mask_T_215,
            _int_bit_mask_T_220,
            _int_bit_mask_T_225,
            _int_bit_mask_T_230,
            _int_bit_mask_T_235,
            _int_bit_mask_T_240,
            _int_bit_mask_T_245,
            _int_bit_mask_T_250,
            _int_bit_mask_T_255,
            _int_bit_mask_T_260,
            _int_bit_mask_T_265,
            _int_bit_mask_T_270,
            _int_bit_mask_T_275,
            _int_bit_mask_T_280,
            _int_bit_mask_T_285,
            _int_bit_mask_T_290,
            _int_bit_mask_T_295,
            _int_bit_mask_T_300,
            _int_bit_mask_T_305,
            _int_bit_mask_T_310,
            _int_bit_mask_T_315,
            _int_bit_mask_T_320,
            _int_bit_mask_T_325,
            _int_bit_mask_T_330,
            _int_bit_mask_T_335,
            _int_bit_mask_T_340,
            _int_bit_mask_T_345,
            _int_bit_mask_T_350,
            _int_bit_mask_T_355,
            _int_bit_mask_T_360,
            _int_bit_mask_T_365,
            _int_bit_mask_T_370,
            _int_bit_mask_T_375,
            _int_bit_mask_T_380,
            _int_bit_mask_T_385,
            _int_bit_mask_T_390,
            _int_bit_mask_T_395,
            _int_bit_mask_T_400,
            _int_bit_mask_T_405,
            _int_bit_mask_T_410,
            _int_bit_mask_T_415,
            _int_bit_mask_T_420,
            _int_bit_mask_T_425,
            _int_bit_mask_T_430,
            _int_bit_mask_T_435,
            _int_bit_mask_T_440,
            _int_bit_mask_T_445,
            _int_bit_mask_T_450,
            _int_bit_mask_T_455,
            _int_bit_mask_T_460,
            _int_bit_mask_T_465,
            _int_bit_mask_T_470,
            _int_bit_mask_T_475,
            _int_bit_mask_T_480,
            _int_bit_mask_T_485,
            _int_bit_mask_T_490,
            _int_bit_mask_T_495,
            _int_bit_mask_T_500,
            _int_bit_mask_T_505,
            _int_bit_mask_T_510,
            _int_bit_mask_T_515,
            _int_bit_mask_T_520,
            _int_bit_mask_T_525} & _GEN[105:0])) | (|_int_bit_predicted_T_1);	// @[Cat.scala:33:92, FADD.scala:107:63, :109:31, :120:41, :121:16, :123:{43,57}, :125:32, :129:36, :130:40, :134:{36,50}, :136:{20,37,51}, :143:20, :146:{8,53}]
  assign io_out_sig_raw = _GEN[106:0];	// @[FADD.scala:107:63, :109:31]
endmodule

