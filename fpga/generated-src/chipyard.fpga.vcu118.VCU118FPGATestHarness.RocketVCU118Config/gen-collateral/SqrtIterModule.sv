// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module SqrtIterModule(
  input         clock,
  input  [24:0] io_a,
  input  [1:0]  io_state,
  output [26:0] io_rem,
  output [25:0] io_res,
                io_resM1
);

  wire [26:0]     _csa_iter_io_out_0;	// @[FDIV.scala:600:23]
  wire [26:0]     _csa_iter_io_out_1;	// @[FDIV.scala:600:23]
  wire [7:0]      _signs_csa_sel_3_io_out_0;	// @[FDIV.scala:570:21]
  wire [7:0]      _signs_csa_sel_3_io_out_1;	// @[FDIV.scala:570:21]
  wire [7:0]      _signs_csa_sel_2_io_out_0;	// @[FDIV.scala:570:21]
  wire [7:0]      _signs_csa_sel_2_io_out_1;	// @[FDIV.scala:570:21]
  wire [7:0]      _signs_csa_sel_1_io_out_0;	// @[FDIV.scala:570:21]
  wire [7:0]      _signs_csa_sel_1_io_out_1;	// @[FDIV.scala:570:21]
  wire [7:0]      _signs_csa_sel_0_io_out_0;	// @[FDIV.scala:570:21]
  wire [7:0]      _signs_csa_sel_0_io_out_1;	// @[FDIV.scala:570:21]
  wire [7:0][5:0] _GEN = '{6'h2A, 6'h2C, 6'h2C, 6'h2E, 6'h30, 6'h30, 6'h32, 6'h34};	// @[Mux.scala:81:{58,61}]
  wire [7:0][5:0] _GEN_0 = '{6'h17, 6'h16, 6'h14, 6'h12, 6'h11, 6'h10, 6'hE, 6'hD};	// @[Mux.scala:81:{58,61}]
  reg  [25:0]     aReg;	// @[Reg.scala:19:16]
  reg  [25:0]     bReg;	// @[Reg.scala:19:16]
  reg  [2:0]      aHeadReg;	// @[FDIV.scala:539:21]
  reg  [26:0]     wsReg;	// @[Reg.scala:19:16]
  reg  [26:0]     wcReg;	// @[Reg.scala:19:16]
  reg  [31:0]     jReg;	// @[Reg.scala:19:16]
  wire            _aHeadReg_T_3 = jReg == 32'h1;	// @[FDIV.scala:544:27, :547:22, Reg.scala:19:16]
  wire [2:0]      lookup = _aHeadReg_T_3 ? 3'h5 : aHeadReg;	// @[FDIV.scala:539:21, :547:{19,22}]
  wire [5:0]      _mNeg_T_14 = _GEN_0[lookup];	// @[FDIV.scala:547:19, Mux.scala:81:{58,61}]
  wire [5:0]      _mNeg_T_65 = _GEN[lookup];	// @[FDIV.scala:547:19, Mux.scala:81:{58,61}]
  wire [7:0]      _GEN_1 = _signs_csa_sel_0_io_out_0 + {_signs_csa_sel_0_io_out_1[6:0], 1'h0};	// @[FDIV.scala:570:21, :589:{20,36}, Reg.scala:19:16]
  wire [7:0]      _GEN_2 = _signs_csa_sel_1_io_out_0 + {_signs_csa_sel_1_io_out_1[6:0], 1'h0};	// @[FDIV.scala:570:21, :589:{20,36}, Reg.scala:19:16]
  wire [7:0]      _GEN_3 = _signs_csa_sel_2_io_out_0 + {_signs_csa_sel_2_io_out_1[6:0], 1'h0};	// @[FDIV.scala:570:21, :589:{20,36}, Reg.scala:19:16]
  wire [7:0]      _GEN_4 = _signs_csa_sel_3_io_out_0 + {_signs_csa_sel_3_io_out_1[6:0], 1'h0};	// @[FDIV.scala:570:21, :589:{20,36}, Reg.scala:19:16]
  wire            s_sel_q_0 = _GEN_1[7] & _GEN_2[7] & _GEN_3[7];	// @[FDIV.scala:589:{20,49}, :638:40]
  wire            s_sel_q_1 = ~(_GEN_1[7]) & _GEN_2[7] & _GEN_3[7];	// @[FDIV.scala:589:{20,49}, :639:{17,42}]
  wire            s_sel_q_3 = _GEN_4[7] & ~(_GEN_3[7]) & ~(_GEN_2[7]);	// @[FDIV.scala:589:{20,49}, :641:{30,42,45}]
  wire            s_sel_q_4 = ~(_GEN_4[7]) & ~(_GEN_3[7]) & ~(_GEN_2[7]);	// @[FDIV.scala:589:{20,49}, :642:{17,32,44,47}]
  wire [25:0]     _f_T_7 = ~aReg;	// @[FDIV.scala:596:6, Reg.scala:19:16]
  wire [59:0]     _csa_iter_io_in_2_T_2 = {6'h0, (s_sel_q_0 ? {bReg[24:0], 4'hC} : 29'h0) | (s_sel_q_1 ? {bReg, 3'h7} : 29'h0) | (s_sel_q_3 ? {_f_T_7, 3'h7} : 29'h0) | (s_sel_q_4 ? {_f_T_7[24:0], 4'hC} : 29'h0), 25'h0} >> {27'h0, jReg, 1'h0};	// @[FDIV.scala:542:28, :593:{11,16}, :594:11, :596:{6,12}, :597:12, :603:{26,40}, :638:40, :639:42, :641:42, :642:44, Mux.scala:27:73, :81:61, Reg.scala:19:16]
  wire            s_sel_q_2 = _GEN_3[7] & ~(_GEN_2[7]);	// @[FDIV.scala:589:{20,49}, :640:{27,30}]
  wire [25:0]     _GEN_5 = {aReg[23:0], 2'h1};	// @[FDIV.scala:650:21, :651:26, Reg.scala:19:16]
  wire [25:0]     _GEN_6 = {aReg[23:0], 2'h0};	// @[Cat.scala:33:92, FDIV.scala:650:21, Reg.scala:19:16]
  wire [25:0]     _GEN_7 = {bReg[23:0], 2'h3};	// @[Cat.scala:33:92, FDIV.scala:653:23, Reg.scala:19:16]
  wire [25:0]     _GEN_8 = {bReg[23:0], 2'h2};	// @[FDIV.scala:650:26, :653:23, Reg.scala:19:16]
  wire [25:0]     aIter = (s_sel_q_4 ? {aReg[23:0], 2'h2} : 26'h0) | (s_sel_q_3 ? _GEN_5 : 26'h0) | (s_sel_q_2 ? _GEN_6 : 26'h0) | (s_sel_q_1 ? _GEN_7 : 26'h0) | (s_sel_q_0 ? _GEN_8 : 26'h0);	// @[FDIV.scala:538:27, :638:40, :639:42, :640:27, :641:42, :642:44, :650:{21,26}, :653:23, Mux.scala:27:73, Reg.scala:19:16]
  wire [32:0]     _GEN_9 = {7'h0, aIter};	// @[FDIV.scala:624:24, Mux.scala:27:73]
  wire [32:0]     _aHeadReg_T_9 = _GEN_9 >> {jReg - 32'h2, 1'h0};	// @[FDIV.scala:624:24, :628:{13,20,27}, Reg.scala:19:16]
  wire [32:0]     _aHeadReg_T_1 = _GEN_9 >> {jReg, 1'h0};	// @[FDIV.scala:603:46, :624:24, Reg.scala:19:16]
  always @(posedge clock) begin
    if (|io_state) begin	// @[FDIV.scala:537:74]
      if (io_state[0])	// @[FDIV.scala:537:33]
        aReg <= 26'h1;	// @[FDIV.scala:537:27, Reg.scala:19:16]
      else	// @[FDIV.scala:537:33]
        aReg <= aIter;	// @[Mux.scala:27:73, Reg.scala:19:16]
    end
    if (|io_state) begin	// @[FDIV.scala:538:74]
      if (io_state[0])	// @[FDIV.scala:537:33]
        bReg <= 26'h0;	// @[FDIV.scala:538:27, Reg.scala:19:16]
      else	// @[FDIV.scala:537:33]
        bReg <= (s_sel_q_4 ? _GEN_5 : 26'h0) | (s_sel_q_3 ? _GEN_6 : 26'h0) | (s_sel_q_2 ? _GEN_7 : 26'h0) | (s_sel_q_1 ? _GEN_8 : 26'h0) | (s_sel_q_0 ? {bReg[23:0], 2'h1} : 26'h0);	// @[FDIV.scala:538:27, :638:40, :639:42, :640:27, :641:42, :642:44, :650:21, :651:26, :653:23, Mux.scala:27:73, Reg.scala:19:16]
    end
    aHeadReg <= _aHeadReg_T_1[0] ? 3'h7 : _aHeadReg_T_3 ? {aIter[0], 2'h0} : _aHeadReg_T_9[2:0];	// @[Cat.scala:33:92, FDIV.scala:539:21, :547:22, :624:{18,24}, :626:8, :627:16, :628:13, Mux.scala:27:73, :81:61]
    if (|io_state) begin	// @[FDIV.scala:541:77]
      if (io_state[0])	// @[FDIV.scala:537:33]
        wsReg <= {2'h3, io_a};	// @[Cat.scala:33:92, Reg.scala:19:16]
      else	// @[FDIV.scala:537:33]
        wsReg <= _csa_iter_io_out_0;	// @[FDIV.scala:600:23, Reg.scala:19:16]
    end
    if (|io_state) begin	// @[FDIV.scala:542:77]
      if (io_state[0])	// @[FDIV.scala:537:33]
        wcReg <= 27'h0;	// @[FDIV.scala:542:28, Reg.scala:19:16]
      else	// @[FDIV.scala:537:33]
        wcReg <= {_csa_iter_io_out_1[25:0], 1'h0};	// @[FDIV.scala:600:23, :605:{30,41}, Reg.scala:19:16]
    end
    if (|io_state) begin	// @[FDIV.scala:544:72]
      if (io_state[0])	// @[FDIV.scala:537:33]
        jReg <= 32'h1;	// @[FDIV.scala:544:27, Reg.scala:19:16]
      else	// @[FDIV.scala:537:33]
        jReg <= jReg + 32'h1;	// @[FDIV.scala:544:{27,50}, Reg.scala:19:16]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        aReg = _RANDOM_0[25:0];	// @[Reg.scala:19:16]
        bReg = {_RANDOM_0[31:26], _RANDOM_1[19:0]};	// @[Reg.scala:19:16]
        aHeadReg = _RANDOM_1[22:20];	// @[FDIV.scala:539:21, Reg.scala:19:16]
        wsReg = {_RANDOM_1[31:23], _RANDOM_2[17:0]};	// @[Reg.scala:19:16]
        wcReg = {_RANDOM_2[31:18], _RANDOM_3[12:0]};	// @[Reg.scala:19:16]
        jReg = {_RANDOM_3[31:13], _RANDOM_4[12:0]};	// @[Reg.scala:19:16]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  CSA3_2_62 signs_csa_sel_0 (	// @[FDIV.scala:570:21]
    .io_in_0  (wsReg[26:19]),	// @[FDIV.scala:571:31, Reg.scala:19:16]
    .io_in_1  (wcReg[26:19]),	// @[FDIV.scala:572:31, Reg.scala:19:16]
    .io_in_2  ({_mNeg_T_14[5], _mNeg_T_14, 1'h0}),	// @[Cat.scala:33:92, FDIV.scala:130:20, Mux.scala:81:58, Reg.scala:19:16]
    .io_out_0 (_signs_csa_sel_0_io_out_0),
    .io_out_1 (_signs_csa_sel_0_io_out_1)
  );
  CSA3_2_62 signs_csa_sel_1 (	// @[FDIV.scala:570:21]
    .io_in_0  (wsReg[26:19]),	// @[FDIV.scala:571:31, Reg.scala:19:16]
    .io_in_1  (wcReg[26:19]),	// @[FDIV.scala:572:31, Reg.scala:19:16]
    .io_in_2  ({1'h0, (&lookup) | lookup == 3'h6 | lookup == 3'h5 ? 6'h8 : lookup == 3'h4 | lookup == 3'h3 | lookup == 3'h2 ? 6'h6 : {5'h2, lookup == 3'h1}, 1'h0}),	// @[Cat.scala:33:92, FDIV.scala:547:19, Mux.scala:81:{58,61}, Reg.scala:19:16]
    .io_out_0 (_signs_csa_sel_1_io_out_0),
    .io_out_1 (_signs_csa_sel_1_io_out_1)
  );
  CSA3_2_62 signs_csa_sel_2 (	// @[FDIV.scala:570:21]
    .io_in_0  (wsReg[26:19]),	// @[FDIV.scala:571:31, Reg.scala:19:16]
    .io_in_1  (wcReg[26:19]),	// @[FDIV.scala:572:31, Reg.scala:19:16]
    .io_in_2  ({1'h1, (&lookup) | lookup == 3'h6 ? 6'h38 : lookup == 3'h5 | lookup == 3'h4 ? 6'h3A : 6'h3C, 1'h0}),	// @[Cat.scala:33:92, FDIV.scala:537:27, :547:19, Mux.scala:81:{58,61}, Reg.scala:19:16]
    .io_out_0 (_signs_csa_sel_2_io_out_0),
    .io_out_1 (_signs_csa_sel_2_io_out_1)
  );
  CSA3_2_62 signs_csa_sel_3 (	// @[FDIV.scala:570:21]
    .io_in_0  (wsReg[26:19]),	// @[FDIV.scala:571:31, Reg.scala:19:16]
    .io_in_1  (wcReg[26:19]),	// @[FDIV.scala:572:31, Reg.scala:19:16]
    .io_in_2  ({_mNeg_T_65[5], _mNeg_T_65, 1'h0}),	// @[Cat.scala:33:92, FDIV.scala:130:20, Mux.scala:81:58, Reg.scala:19:16]
    .io_out_0 (_signs_csa_sel_3_io_out_0),
    .io_out_1 (_signs_csa_sel_3_io_out_1)
  );
  CSA3_2_66 csa_iter (	// @[FDIV.scala:600:23]
    .io_in_0  ({wsReg[24:0], 2'h0}),	// @[Cat.scala:33:92, FDIV.scala:601:20, Reg.scala:19:16]
    .io_in_1  ({wcReg[24:0], 2'h0}),	// @[Cat.scala:33:92, FDIV.scala:602:20, Reg.scala:19:16]
    .io_in_2  (_csa_iter_io_in_2_T_2[26:0]),	// @[FDIV.scala:603:{20,40}]
    .io_out_0 (_csa_iter_io_out_0),
    .io_out_1 (_csa_iter_io_out_1)
  );
  assign io_rem = wsReg + wcReg;	// @[FDIV.scala:630:19, Reg.scala:19:16]
  assign io_res = aReg;	// @[Reg.scala:19:16]
  assign io_resM1 = bReg;	// @[Reg.scala:19:16]
endmodule

